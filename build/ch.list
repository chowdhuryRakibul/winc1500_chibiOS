
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08003071 	.word	0x08003071
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	08003b61 	.word	0x08003b61
 800005c:	08003b11 	.word	0x08003b11
 8000060:	08003ac1 	.word	0x08003ac1
 8000064:	08003a71 	.word	0x08003a71
 8000068:	08003a21 	.word	0x08003a21
 800006c:	08003801 	.word	0x08003801
 8000070:	080037d1 	.word	0x080037d1
 8000074:	080037a1 	.word	0x080037a1
 8000078:	08003771 	.word	0x08003771
 800007c:	08003741 	.word	0x08003741
 8000080:	08003711 	.word	0x08003711
 8000084:	080036e1 	.word	0x080036e1
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	08003941 	.word	0x08003941
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080002db 	.word	0x080002db
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	080032d1 	.word	0x080032d1
 80000dc:	080002db 	.word	0x080002db
 80000e0:	08003831 	.word	0x08003831
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080036b1 	.word	0x080036b1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	08003481 	.word	0x08003481
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	08003681 	.word	0x08003681
 8000124:	08003651 	.word	0x08003651
 8000128:	08003621 	.word	0x08003621
 800012c:	080035f1 	.word	0x080035f1
 8000130:	080035c1 	.word	0x080035c1
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	08003591 	.word	0x08003591
 8000154:	08003561 	.word	0x08003561
 8000158:	08003531 	.word	0x08003531
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f003 fd04 	bl	8003c30 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f002 ff7a 	bl	8003120 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f003 fc96 	bl	8003ba0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f003 fcd4 	bl	8003c20 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f002 f8f2 	bl	8002470 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f003 bcb8 	b.w	8003c10 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	08004160 	.word	0x08004160
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002c0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002c4:	20000e98 	.word	0x20000e98
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:
        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:

         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f002 fec8 	bl	8003090 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f002 feed 	bl	80030e0 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr

08000440 <strlen>:
 8000440:	f890 f000 	pld	[r0]
 8000444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000448:	f020 0107 	bic.w	r1, r0, #7
 800044c:	f06f 0c00 	mvn.w	ip, #0
 8000450:	f010 0407 	ands.w	r4, r0, #7
 8000454:	f891 f020 	pld	[r1, #32]
 8000458:	f040 8049 	bne.w	80004ee <strlen+0xae>
 800045c:	f04f 0400 	mov.w	r4, #0
 8000460:	f06f 0007 	mvn.w	r0, #7
 8000464:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000468:	f891 f040 	pld	[r1, #64]	; 0x40
 800046c:	f100 0008 	add.w	r0, r0, #8
 8000470:	fa82 f24c 	uadd8	r2, r2, ip
 8000474:	faa4 f28c 	sel	r2, r4, ip
 8000478:	fa83 f34c 	uadd8	r3, r3, ip
 800047c:	faa2 f38c 	sel	r3, r2, ip
 8000480:	bb4b      	cbnz	r3, 80004d6 <strlen+0x96>
 8000482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000486:	fa82 f24c 	uadd8	r2, r2, ip
 800048a:	f100 0008 	add.w	r0, r0, #8
 800048e:	faa4 f28c 	sel	r2, r4, ip
 8000492:	fa83 f34c 	uadd8	r3, r3, ip
 8000496:	faa2 f38c 	sel	r3, r2, ip
 800049a:	b9e3      	cbnz	r3, 80004d6 <strlen+0x96>
 800049c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80004a0:	fa82 f24c 	uadd8	r2, r2, ip
 80004a4:	f100 0008 	add.w	r0, r0, #8
 80004a8:	faa4 f28c 	sel	r2, r4, ip
 80004ac:	fa83 f34c 	uadd8	r3, r3, ip
 80004b0:	faa2 f38c 	sel	r3, r2, ip
 80004b4:	b97b      	cbnz	r3, 80004d6 <strlen+0x96>
 80004b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80004ba:	f101 0120 	add.w	r1, r1, #32
 80004be:	fa82 f24c 	uadd8	r2, r2, ip
 80004c2:	f100 0008 	add.w	r0, r0, #8
 80004c6:	faa4 f28c 	sel	r2, r4, ip
 80004ca:	fa83 f34c 	uadd8	r3, r3, ip
 80004ce:	faa2 f38c 	sel	r3, r2, ip
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0c6      	beq.n	8000464 <strlen+0x24>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	bf04      	itt	eq
 80004da:	3004      	addeq	r0, #4
 80004dc:	461a      	moveq	r2, r3
 80004de:	ba12      	rev	r2, r2
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80004e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80004ec:	4770      	bx	lr
 80004ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80004f2:	f004 0503 	and.w	r5, r4, #3
 80004f6:	f1c4 0000 	rsb	r0, r4, #0
 80004fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004fe:	f014 0f04 	tst.w	r4, #4
 8000502:	f891 f040 	pld	[r1, #64]	; 0x40
 8000506:	fa0c f505 	lsl.w	r5, ip, r5
 800050a:	ea62 0205 	orn	r2, r2, r5
 800050e:	bf1c      	itt	ne
 8000510:	ea63 0305 	ornne	r3, r3, r5
 8000514:	4662      	movne	r2, ip
 8000516:	f04f 0400 	mov.w	r4, #0
 800051a:	e7a9      	b.n	8000470 <strlen+0x30>
 800051c:	0000      	movs	r0, r0
	...

08000520 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000520:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000522:	4c26      	ldr	r4, [pc, #152]	; (80005bc <dmaStreamAllocI.part.0.constprop.0+0x9c>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000524:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000526:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000528:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800052a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800052c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800052e:	bf18      	it	ne
 8000530:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000532:	d001      	beq.n	8000538 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 8000534:	bcf0      	pop	{r4, r5, r6, r7}
 8000536:	4770      	bx	lr
        rccEnableDMA1(true);
 8000538:	4d21      	ldr	r5, [pc, #132]	; (80005c0 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
      dma.allocated_mask  |= mask;
 800053a:	4302      	orrs	r2, r0
 800053c:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 800053e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
      dma.streams[i].param = param;
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
        rccEnableDMA1(true);
 8000542:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dma.streams[i].func  = func;
 8000546:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
      dma.streams[i].param = param;
 800054a:	e9c4 1001 	strd	r1, r0, [r4, #4]
        rccEnableDMA1(true);
 800054e:	632a      	str	r2, [r5, #48]	; 0x30
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000550:	200c      	movs	r0, #12
        rccEnableDMA1(true);
 8000552:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000554:	491c      	ldr	r1, [pc, #112]	; (80005c8 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
 8000556:	fb00 f003 	mul.w	r0, r0, r3
        rccEnableDMA1(true);
 800055a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dmaStreamDisable(dmastp);
 800055e:	580e      	ldr	r6, [r1, r0]
        rccEnableDMA1(true);
 8000560:	652a      	str	r2, [r5, #80]	; 0x50
 8000562:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8000564:	6832      	ldr	r2, [r6, #0]
 8000566:	f022 021f 	bic.w	r2, r2, #31
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800056a:	4408      	add	r0, r1
      dmaStreamDisable(dmastp);
 800056c:	6032      	str	r2, [r6, #0]
 800056e:	6832      	ldr	r2, [r6, #0]
 8000570:	f012 0201 	ands.w	r2, r2, #1
 8000574:	d1fb      	bne.n	800056e <dmaStreamAllocI.part.0.constprop.0+0x4e>
 8000576:	240c      	movs	r4, #12
 8000578:	fb04 1303 	mla	r3, r4, r3, r1
 800057c:	243d      	movs	r4, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 800057e:	7ad9      	ldrb	r1, [r3, #11]
      dmaStreamDisable(dmastp);
 8000580:	7a5d      	ldrb	r5, [r3, #9]
 8000582:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000584:	094b      	lsrs	r3, r1, #5
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	40ac      	lsls	r4, r5
 800058a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800058e:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8000592:	603c      	str	r4, [r7, #0]
 8000594:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000598:	2401      	movs	r4, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800059a:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800059e:	f001 011f 	and.w	r1, r1, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80005a2:	6032      	str	r2, [r6, #0]
 80005a4:	fa04 f101 	lsl.w	r1, r4, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80005a8:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80005aa:	2421      	movs	r4, #33	; 0x21
 80005ac:	6174      	str	r4, [r6, #20]
 80005ae:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005b2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80005b6:	6019      	str	r1, [r3, #0]
 80005b8:	e7bc      	b.n	8000534 <dmaStreamAllocI.part.0.constprop.0+0x14>
 80005ba:	bf00      	nop
 80005bc:	20000b70 	.word	0x20000b70
 80005c0:	40023800 	.word	0x40023800
 80005c4:	2000087c 	.word	0x2000087c
 80005c8:	08003ecc 	.word	0x08003ecc
 80005cc:	00000000 	.word	0x00000000

080005d0 <_pal_lld_enablepadevent.constprop.0>:
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
#if STM32_EXTI_TYPE == 0
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 80005d0:	490c      	ldr	r1, [pc, #48]	; (8000604 <_pal_lld_enablepadevent.constprop.0+0x34>)

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR1 |= padmask;
  else
    EXTI->RTSR1 &= ~padmask;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <_pal_lld_enablepadevent.constprop.0+0x38>)
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 80005d4:	694a      	ldr	r2, [r1, #20]
 80005d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80005da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005de:	614a      	str	r2, [r1, #20]
    EXTI->RTSR1 &= ~padmask;
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80005e6:	609a      	str	r2, [r3, #8]
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR1 |= padmask;
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005ee:	60da      	str	r2, [r3, #12]
  /* Programming interrupt and event registers.*/
#if defined(STM32_EXTI_ENHANCED)
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  EXTI->IMR1 |= padmask;
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005f6:	601a      	str	r2, [r3, #0]
  EXTI->EMR1 &= ~padmask;
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80005fe:	605a      	str	r2, [r3, #4]
#endif
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40013800 	.word	0x40013800
 8000608:	40013c00 	.word	0x40013c00
 800060c:	00000000 	.word	0x00000000

08000610 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
	...

08000620 <isr>:
	gstrHifCxt.u8Interrupt++;
 8000620:	4a02      	ldr	r2, [pc, #8]	; (800062c <isr+0xc>)
 8000622:	78d3      	ldrb	r3, [r2, #3]
 8000624:	3301      	adds	r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	70d3      	strb	r3, [r2, #3]
}
 800062a:	4770      	bx	lr
 800062c:	20000bf8 	.word	0x20000bf8

08000630 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000630:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000632:	2320      	movs	r3, #32
 8000634:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000638:	4c0b      	ldr	r4, [pc, #44]	; (8000668 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800063a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800063e:	4249      	negs	r1, r1
 8000640:	1a28      	subs	r0, r5, r0
 8000642:	4008      	ands	r0, r1
  prev = p - offset;
 8000644:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000646:	429a      	cmp	r2, r3
 8000648:	d307      	bcc.n	800065a <chCoreAllocFromTop+0x2a>
 800064a:	4295      	cmp	r5, r2
 800064c:	d305      	bcc.n	800065a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800064e:	6062      	str	r2, [r4, #4]
 8000650:	2300      	movs	r3, #0
 8000652:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000656:	bc30      	pop	{r4, r5}
 8000658:	4770      	bx	lr
    return NULL;
 800065a:	2000      	movs	r0, #0
 800065c:	2300      	movs	r3, #0
 800065e:	f383 8811 	msr	BASEPRI, r3
}
 8000662:	bc30      	pop	{r4, r5}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000b48 	.word	0x20000b48
 800066c:	00000000 	.word	0x00000000

08000670 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000670:	4a02      	ldr	r2, [pc, #8]	; (800067c <notify2+0xc>)
 8000672:	68d3      	ldr	r3, [r2, #12]
 8000674:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000678:	60d3      	str	r3, [r2, #12]
}
 800067a:	4770      	bx	lr
 800067c:	40004400 	.word	0x40004400

08000680 <nm_bsp_interrupt_ctrl.part.0>:
 *	@fn		nm_bsp_interrupt_ctrl
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
 8000680:	b508      	push	{r3, lr}
 8000682:	2020      	movs	r0, #32
 8000684:	f380 8811 	msr	BASEPRI, r0
{
	if (1 == u8Enable)
	{
	  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 8000688:	f7ff ffa2 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 800068c:	2300      	movs	r3, #0
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f380 8811 	msr	BASEPRI, r0
 */
void palSetPadCallbackI(ioportid_t port, iopadid_t pad,
                        palcallback_t cb, void *arg) {

  palevent_t *pep = pal_lld_get_pad_event(port, pad);
  pep->cb = cb;
 8000696:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <nm_bsp_interrupt_ctrl.part.0+0x24>)
 8000698:	4903      	ldr	r1, [pc, #12]	; (80006a8 <nm_bsp_interrupt_ctrl.part.0+0x28>)
 800069a:	e9c2 133e 	strd	r1, r3, [r2, #248]	; 0xf8
 800069e:	f383 8811 	msr	BASEPRI, r3
	}
	else
	{
	  palClearPad(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN);
	}
}
 80006a2:	bd08      	pop	{r3, pc}
 80006a4:	200008ac 	.word	0x200008ac
 80006a8:	08000621 	.word	0x08000621
 80006ac:	00000000 	.word	0x00000000

080006b0 <_port_irq_epilogue>:
 80006b0:	2320      	movs	r3, #32
 80006b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <_port_irq_epilogue+0x3c>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80006be:	d102      	bne.n	80006c6 <_port_irq_epilogue+0x16>
 80006c0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80006c4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80006c6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 80006ca:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80006cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006d0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80006d2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <_port_irq_epilogue+0x40>)
 80006d8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80006da:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80006dc:	6889      	ldr	r1, [r1, #8]
 80006de:	6892      	ldr	r2, [r2, #8]
 80006e0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80006e2:	bf8c      	ite	hi
 80006e4:	4a03      	ldrhi	r2, [pc, #12]	; (80006f4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80006e6:	4a04      	ldrls	r2, [pc, #16]	; (80006f8 <_port_irq_epilogue+0x48>)
 80006e8:	619a      	str	r2, [r3, #24]
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	200009ac 	.word	0x200009ac
 80006f4:	08000303 	.word	0x08000303
 80006f8:	08000306 	.word	0x08000306
 80006fc:	00000000 	.word	0x00000000

08000700 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000700:	4a08      	ldr	r2, [pc, #32]	; (8000724 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000702:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000704:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000708:	4249      	negs	r1, r1
 800070a:	1a20      	subs	r0, r4, r0
 800070c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800070e:	4298      	cmp	r0, r3
 8000710:	d304      	bcc.n	800071c <chCoreAllocAlignedI+0x1c>
 8000712:	4284      	cmp	r4, r0
 8000714:	d302      	bcc.n	800071c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000716:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000718:	6050      	str	r0, [r2, #4]
 800071a:	4770      	bx	lr
    return NULL;
 800071c:	2000      	movs	r0, #0
 800071e:	bc10      	pop	{r4}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000b48 	.word	0x20000b48
	...

08000730 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <chTMStopMeasurementX+0x40>)
 8000734:	6852      	ldr	r2, [r2, #4]
 8000736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 8000738:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800073a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800073c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 800073e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000742:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000744:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000746:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000748:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800074a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800074c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 800074e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000750:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000752:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000756:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000758:	bf88      	it	hi
 800075a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800075c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800075e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000762:	bf38      	it	cc
 8000764:	6003      	strcc	r3, [r0, #0]
}
 8000766:	bc30      	pop	{r4, r5}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e0001000 	.word	0xe0001000
 8000770:	200009ac 	.word	0x200009ac
	...

08000780 <chTMStartMeasurementX>:
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <chTMStartMeasurementX+0x8>)
 8000782:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000784:	6083      	str	r3, [r0, #8]
}
 8000786:	4770      	bx	lr
 8000788:	e0001000 	.word	0xe0001000
 800078c:	00000000 	.word	0x00000000

08000790 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000790:	2320      	movs	r3, #32
 8000792:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000796:	f890 3020 	ldrb.w	r3, [r0, #32]
 800079a:	2b07      	cmp	r3, #7
 800079c:	d80d      	bhi.n	80007ba <wakeup+0x2a>
 800079e:	e8df f003 	tbb	[pc, r3]
 80007a2:	0c27      	.short	0x0c27
 80007a4:	0408230c 	.word	0x0408230c
 80007a8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80007aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	3301      	adds	r3, #1
 80007b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 80007b2:	e9d0 3200 	ldrd	r3, r2, [r0]
 80007b6:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 80007b8:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 80007ba:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 80007bc:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 80007be:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80007c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80007c6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80007c8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80007cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	428a      	cmp	r2, r1
 80007d2:	d2fb      	bcs.n	80007cc <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80007d4:	685a      	ldr	r2, [r3, #4]
 80007d6:	2100      	movs	r1, #0
 80007d8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80007dc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80007de:	6058      	str	r0, [r3, #4]
 80007e0:	f381 8811 	msr	BASEPRI, r1
}
 80007e4:	bc10      	pop	{r4}
 80007e6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80007e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
    break;
 80007ee:	e7e4      	b.n	80007ba <wakeup+0x2a>
 80007f0:	2300      	movs	r3, #0
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	4770      	bx	lr
 80007f8:	200009ac 	.word	0x200009ac
 80007fc:	00000000 	.word	0x00000000

08000800 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000800:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 8000802:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 8000806:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800080a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	428a      	cmp	r2, r1
 8000810:	d2fb      	bcs.n	800080a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000812:	685a      	ldr	r2, [r3, #4]
 8000814:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000818:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800081a:	6058      	str	r0, [r3, #4]
}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200009ac 	.word	0x200009ac
	...

08000830 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000832:	4f16      	ldr	r7, [pc, #88]	; (800088c <chEvtBroadcastFlagsI.constprop.0+0x5c>)
 8000834:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000838:	42bc      	cmp	r4, r7
 800083a:	d020      	beq.n	800087e <chEvtBroadcastFlagsI.constprop.0+0x4e>
 800083c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800083e:	2600      	movs	r6, #0
 8000840:	e004      	b.n	800084c <chEvtBroadcastFlagsI.constprop.0+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000842:	2a0b      	cmp	r2, #11
 8000844:	d01c      	beq.n	8000880 <chEvtBroadcastFlagsI.constprop.0+0x50>
    elp = elp->next;
 8000846:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000848:	42bc      	cmp	r4, r7
 800084a:	d018      	beq.n	800087e <chEvtBroadcastFlagsI.constprop.0+0x4e>
    elp->flags |= flags;
 800084c:	68e3      	ldr	r3, [r4, #12]
 800084e:	432b      	orrs	r3, r5
 8000850:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000852:	b115      	cbz	r5, 800085a <chEvtBroadcastFlagsI.constprop.0+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000854:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000856:	421d      	tst	r5, r3
 8000858:	d0f5      	beq.n	8000846 <chEvtBroadcastFlagsI.constprop.0+0x16>
  tp->epending |= events;
 800085a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800085e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000860:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000864:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000866:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000868:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800086a:	d1ea      	bne.n	8000842 <chEvtBroadcastFlagsI.constprop.0+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800086c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800086e:	4213      	tst	r3, r2
 8000870:	d0e9      	beq.n	8000846 <chEvtBroadcastFlagsI.constprop.0+0x16>
    tp->u.rdymsg = MSG_OK;
 8000872:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000874:	f7ff ffc4 	bl	8000800 <chSchReadyI>
    elp = elp->next;
 8000878:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800087a:	42bc      	cmp	r4, r7
 800087c:	d1e6      	bne.n	800084c <chEvtBroadcastFlagsI.constprop.0+0x1c>
}
 800087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000880:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000882:	ea32 0303 	bics.w	r3, r2, r3
 8000886:	d1de      	bne.n	8000846 <chEvtBroadcastFlagsI.constprop.0+0x16>
 8000888:	e7f3      	b.n	8000872 <chEvtBroadcastFlagsI.constprop.0+0x42>
 800088a:	bf00      	nop
 800088c:	20000800 	.word	0x20000800

08000890 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000890:	b538      	push	{r3, r4, r5, lr}
 8000892:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000894:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000896:	4284      	cmp	r4, r0
 8000898:	d009      	beq.n	80008ae <chThdDequeueAllI.constprop.0+0x1e>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800089a:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
 800089c:	6803      	ldr	r3, [r0, #0]
 800089e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80008a0:	605c      	str	r4, [r3, #4]
 80008a2:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80008a4:	f7ff ffac 	bl	8000800 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 80008a8:	6820      	ldr	r0, [r4, #0]
 80008aa:	42a0      	cmp	r0, r4
 80008ac:	d1f6      	bne.n	800089c <chThdDequeueAllI.constprop.0+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80008ae:	bd38      	pop	{r3, r4, r5, pc}

080008b0 <_idle_thread>:
}
 80008b0:	e7fe      	b.n	80008b0 <_idle_thread>
 80008b2:	bf00      	nop
	...

080008c0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008c0:	f011 0f0c 	tst.w	r1, #12
 80008c4:	d100      	bne.n	80008c8 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80008c6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <spi_lld_serve_tx_interrupt+0x14>)
 80008cc:	4a02      	ldr	r2, [pc, #8]	; (80008d8 <spi_lld_serve_tx_interrupt+0x18>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d0:	e7fe      	b.n	80008d0 <spi_lld_serve_tx_interrupt+0x10>
 80008d2:	bf00      	nop
 80008d4:	200009ac 	.word	0x200009ac
 80008d8:	08003cd4 	.word	0x08003cd4
 80008dc:	00000000 	.word	0x00000000

080008e0 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008e0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80008e4:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008e6:	d14f      	bne.n	8000988 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 80008e8:	460d      	mov	r5, r1
 80008ea:	6841      	ldr	r1, [r0, #4]
 80008ec:	780b      	ldrb	r3, [r1, #0]
 80008ee:	4604      	mov	r4, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d133      	bne.n	800095c <spi_lld_serve_rx_interrupt+0x7c>
    dmaStreamDisable(spip->dmatx);
 80008f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80008f6:	682a      	ldr	r2, [r5, #0]
 80008f8:	6813      	ldr	r3, [r2, #0]
 80008fa:	f023 031f 	bic.w	r3, r3, #31
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	07d8      	lsls	r0, r3, #31
 8000904:	d4fc      	bmi.n	8000900 <spi_lld_serve_rx_interrupt+0x20>
 8000906:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 8000908:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 800090a:	686d      	ldr	r5, [r5, #4]
 800090c:	233d      	movs	r3, #61	; 0x3d
 800090e:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 8000910:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 8000912:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f023 031f 	bic.w	r3, r3, #31
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	07db      	lsls	r3, r3, #31
 8000920:	d4fc      	bmi.n	800091c <spi_lld_serve_rx_interrupt+0x3c>
 8000922:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8000924:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8000926:	6841      	ldr	r1, [r0, #4]
 8000928:	233d      	movs	r3, #61	; 0x3d
 800092a:	40ab      	lsls	r3, r5
 800092c:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 800092e:	2a00      	cmp	r2, #0
 8000930:	d02f      	beq.n	8000992 <spi_lld_serve_rx_interrupt+0xb2>
 8000932:	2304      	movs	r3, #4
 8000934:	7023      	strb	r3, [r4, #0]
 8000936:	4620      	mov	r0, r4
 8000938:	4790      	blx	r2
 800093a:	7823      	ldrb	r3, [r4, #0]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d028      	beq.n	8000992 <spi_lld_serve_rx_interrupt+0xb2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000940:	2320      	movs	r3, #32
 8000942:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000946:	68a0      	ldr	r0, [r4, #8]
 8000948:	b120      	cbz	r0, 8000954 <spi_lld_serve_rx_interrupt+0x74>
    *trp = NULL;
 800094a:	2300      	movs	r3, #0
 800094c:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 800094e:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000950:	f7ff ff56 	bl	8000800 <chSchReadyI>
 8000954:	2300      	movs	r3, #0
 8000956:	f383 8811 	msr	BASEPRI, r3
}
 800095a:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800095c:	06eb      	lsls	r3, r5, #27
 800095e:	d503      	bpl.n	8000968 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 8000960:	684b      	ldr	r3, [r1, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <spi_lld_serve_rx_interrupt+0x7a>
 8000966:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8000968:	06ad      	lsls	r5, r5, #26
 800096a:	d5f6      	bpl.n	800095a <spi_lld_serve_rx_interrupt+0x7a>
      _spi_isr_full_code(spip);
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f2      	beq.n	800095a <spi_lld_serve_rx_interrupt+0x7a>
 8000974:	2204      	movs	r2, #4
 8000976:	7022      	strb	r2, [r4, #0]
 8000978:	4620      	mov	r0, r4
 800097a:	4798      	blx	r3
 800097c:	7823      	ldrb	r3, [r4, #0]
 800097e:	2b04      	cmp	r3, #4
 8000980:	d1eb      	bne.n	800095a <spi_lld_serve_rx_interrupt+0x7a>
 8000982:	2303      	movs	r3, #3
 8000984:	7023      	strb	r3, [r4, #0]
}
 8000986:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <spi_lld_serve_rx_interrupt+0xc4>)
 800098c:	4a06      	ldr	r2, [pc, #24]	; (80009a8 <spi_lld_serve_rx_interrupt+0xc8>)
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000990:	e7fe      	b.n	8000990 <spi_lld_serve_rx_interrupt+0xb0>
    _spi_isr_code(spip);
 8000992:	2302      	movs	r3, #2
 8000994:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000996:	2320      	movs	r3, #32
 8000998:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800099c:	68a0      	ldr	r0, [r4, #8]
 800099e:	2800      	cmp	r0, #0
 80009a0:	d1d3      	bne.n	800094a <spi_lld_serve_rx_interrupt+0x6a>
 80009a2:	e7d7      	b.n	8000954 <spi_lld_serve_rx_interrupt+0x74>
 80009a4:	200009ac 	.word	0x200009ac
 80009a8:	08003cd4 	.word	0x08003cd4
 80009ac:	00000000 	.word	0x00000000

080009b0 <_pal_lld_setgroupmode>:
                           iomode_t mode) {
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80009b4:	f002 0803 	and.w	r8, r2, #3
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80009b8:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80009bc:	4647      	mov	r7, r8
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80009be:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80009c2:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  uint32_t bit     = 0;
 80009c6:	2400      	movs	r4, #0
      m4 = 15 << ((bit & 7) * 4);
 80009c8:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 80009cc:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
 80009d0:	46ae      	mov	lr, r5
 80009d2:	e013      	b.n	80009fc <_pal_lld_setgroupmode+0x4c>
        port->MODER   = (port->MODER & ~m2) | moder;
 80009d4:	f8d0 9000 	ldr.w	r9, [r0]
 80009d8:	ea03 0309 	and.w	r3, r3, r9
 80009dc:	433b      	orrs	r3, r7
        if (bit < 8)
 80009de:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80009e0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80009e2:	d83e      	bhi.n	8000a62 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80009e4:	6a03      	ldr	r3, [r0, #32]
 80009e6:	ea23 0202 	bic.w	r2, r3, r2
 80009ea:	4315      	orrs	r5, r2
 80009ec:	6205      	str	r5, [r0, #32]
    if (!mask)
 80009ee:	0849      	lsrs	r1, r1, #1
 80009f0:	d035      	beq.n	8000a5e <_pal_lld_setgroupmode+0xae>
    ospeedr <<= 2;
 80009f2:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 80009f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 80009f8:	00bf      	lsls	r7, r7, #2
    bit++;
 80009fa:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80009fc:	07cb      	lsls	r3, r1, #31
 80009fe:	d5f6      	bpl.n	80009ee <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000a00:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8000a02:	fa0a f204 	lsl.w	r2, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000a06:	ea23 0302 	bic.w	r3, r3, r2
 8000a0a:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a0c:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 8000a0e:	2503      	movs	r5, #3
 8000a10:	0063      	lsls	r3, r4, #1
 8000a12:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a16:	ea22 0203 	bic.w	r2, r2, r3
 8000a1a:	4332      	orrs	r2, r6
 8000a1c:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a1e:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000a20:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a24:	ea25 0503 	bic.w	r5, r5, r3
 8000a28:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8000a2c:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a2e:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a32:	60c5      	str	r5, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a34:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000a38:	fa0c f502 	lsl.w	r5, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000a3c:	fa0b f202 	lsl.w	r2, fp, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a40:	d1c8      	bne.n	80009d4 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 8000a42:	2c07      	cmp	r4, #7
 8000a44:	d813      	bhi.n	8000a6e <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000a46:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8000a4a:	ea29 0202 	bic.w	r2, r9, r2
 8000a4e:	4315      	orrs	r5, r2
 8000a50:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a52:	6802      	ldr	r2, [r0, #0]
 8000a54:	4013      	ands	r3, r2
 8000a56:	433b      	orrs	r3, r7
    if (!mask)
 8000a58:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a5a:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000a5c:	d1c9      	bne.n	80009f2 <_pal_lld_setgroupmode+0x42>
}
 8000a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a64:	ea23 0202 	bic.w	r2, r3, r2
 8000a68:	4315      	orrs	r5, r2
 8000a6a:	6245      	str	r5, [r0, #36]	; 0x24
 8000a6c:	e7bf      	b.n	80009ee <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a6e:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8000a72:	ea29 0202 	bic.w	r2, r9, r2
 8000a76:	4315      	orrs	r5, r2
 8000a78:	6245      	str	r5, [r0, #36]	; 0x24
 8000a7a:	e7ea      	b.n	8000a52 <_pal_lld_setgroupmode+0xa2>
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <dmaStreamFreeI>:
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.allocated_mask & (1U << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8000a80:	7ac2      	ldrb	r2, [r0, #11]
void dmaStreamFreeI(const stm32_dma_stream_t *dmastp) {
 8000a82:	b470      	push	{r4, r5, r6}
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000a84:	0953      	lsrs	r3, r2, #5
 8000a86:	4e18      	ldr	r6, [pc, #96]	; (8000ae8 <dmaStreamFreeI+0x68>)

  /* Marks the stream as not allocated.*/
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8000a88:	4d18      	ldr	r5, [pc, #96]	; (8000aec <dmaStreamFreeI+0x6c>)
 8000a8a:	3320      	adds	r3, #32
 8000a8c:	f002 041f 	and.w	r4, r2, #31
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f404 	lsl.w	r4, r1, r4
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8000a96:	4432      	add	r2, r6
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000a98:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
  NVIC->IP[n] = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 8000aa2:	7a82      	ldrb	r2, [r0, #10]
 8000aa4:	682b      	ldr	r3, [r5, #0]
 8000aa6:	4091      	lsls	r1, r2
 8000aa8:	ea23 0301 	bic.w	r3, r3, r1

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000aac:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma.allocated_mask &= ~(1U << dmastp->selfindex);
 8000ab0:	602b      	str	r3, [r5, #0]
  if ((dma.allocated_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8000ab2:	d109      	bne.n	8000ac8 <dmaStreamFreeI+0x48>
    rccDisableDMA1();
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <dmaStreamFreeI+0x70>)
 8000ab6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000ab8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000abc:	6311      	str	r1, [r2, #48]	; 0x30
 8000abe:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000ac0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000ac4:	6511      	str	r1, [r2, #80]	; 0x50
 8000ac6:	6d12      	ldr	r2, [r2, #80]	; 0x50
  }
  if ((dma.allocated_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8000ac8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000acc:	d109      	bne.n	8000ae2 <dmaStreamFreeI+0x62>
    rccDisableDMA2();
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <dmaStreamFreeI+0x70>)
 8000ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ad2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ada:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000ade:	651a      	str	r2, [r3, #80]	; 0x50
 8000ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  /* Shutting down DMAMUX if present.*/
  if (dma.allocated_mask == 0U) {
    rccDisableDMAMUX();
  }
#endif
}
 8000ae2:	bc70      	pop	{r4, r5, r6}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	20000b70 	.word	0x20000b70
 8000af0:	40023800 	.word	0x40023800
	...

08000b00 <spi_lld_stop.constprop.0>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {
 8000b00:	b538      	push	{r3, r4, r5, lr}

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 8000b02:	4c10      	ldr	r4, [pc, #64]	; (8000b44 <spi_lld_stop.constprop.0+0x44>)
 8000b04:	7823      	ldrb	r3, [r4, #0]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d000      	beq.n	8000b0c <spi_lld_stop.constprop.0+0xc>
#if STM32_SPI_USE_SPI6
    if (&SPID6 == spip)
      rccDisableSPI6();
#endif
  }
}
 8000b0a:	bd38      	pop	{r3, r4, r5, pc}
    dmaStreamFreeI(spip->dmarx);
 8000b0c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8000b10:	681a      	ldr	r2, [r3, #0]
    spip->spi->CR1  = 0;
 8000b12:	2500      	movs	r5, #0
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8000b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b18:	601a      	str	r2, [r3, #0]
    spip->spi->CR1  = 0;
 8000b1a:	601d      	str	r5, [r3, #0]
    spip->spi->CR2  = 0;
 8000b1c:	605d      	str	r5, [r3, #4]
    dmaStreamFreeI(spip->dmarx);
 8000b1e:	f7ff ffaf 	bl	8000a80 <dmaStreamFreeI>
    dmaStreamFreeI(spip->dmatx);
 8000b22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000b24:	f7ff ffac 	bl	8000a80 <dmaStreamFreeI>
      rccDisableSPI2();
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <spi_lld_stop.constprop.0+0x48>)
    spip->dmarx = NULL;
 8000b2a:	6225      	str	r5, [r4, #32]
      rccDisableSPI2();
 8000b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    spip->dmatx = NULL;
 8000b2e:	6265      	str	r5, [r4, #36]	; 0x24
      rccDisableSPI2();
 8000b30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b34:	641a      	str	r2, [r3, #64]	; 0x40
 8000b36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60
 8000b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8000b40:	bd38      	pop	{r3, r4, r5, pc}
 8000b42:	bf00      	nop
 8000b44:	2000087c 	.word	0x2000087c
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	00000000 	.word	0x00000000

08000b50 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000b50:	2000      	movs	r0, #0
 8000b52:	4770      	bx	lr
	...

08000b60 <chSchWakeupS.constprop.0>:
  thread_t *otp = currp;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <chSchWakeupS.constprop.0+0x54>)
 8000b62:	6999      	ldr	r1, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000b64:	b430      	push	{r4, r5}
  if (ntp->prio <= otp->prio) {
 8000b66:	688d      	ldr	r5, [r1, #8]
 8000b68:	6884      	ldr	r4, [r0, #8]
  ntp->u.rdymsg = msg;
 8000b6a:	2200      	movs	r2, #0
  if (ntp->prio <= otp->prio) {
 8000b6c:	42ac      	cmp	r4, r5
  ntp->u.rdymsg = msg;
 8000b6e:	6242      	str	r2, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 8000b70:	d80c      	bhi.n	8000b8c <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 8000b72:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 8000b76:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	4294      	cmp	r4, r2
 8000b7c:	d9fb      	bls.n	8000b76 <chSchWakeupS.constprop.0+0x16>
  tp->queue.prev             = cp->queue.prev;
 8000b7e:	685a      	ldr	r2, [r3, #4]
}
 8000b80:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8000b82:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000b86:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000b88:	6058      	str	r0, [r3, #4]
}
 8000b8a:	4770      	bx	lr
  tp->state = CH_STATE_READY;
 8000b8c:	f881 2020 	strb.w	r2, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8000b90:	461a      	mov	r2, r3
    cp = cp->queue.next;
 8000b92:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8000b94:	6894      	ldr	r4, [r2, #8]
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d3fb      	bcc.n	8000b92 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 8000b9a:	6854      	ldr	r4, [r2, #4]
 8000b9c:	604c      	str	r4, [r1, #4]
    ntp->state = CH_STATE_CURRENT;
 8000b9e:	2501      	movs	r5, #1
  tp->queue.next             = cp;
 8000ba0:	600a      	str	r2, [r1, #0]
  tp->queue.prev->queue.next = tp;
 8000ba2:	6021      	str	r1, [r4, #0]
  cp->queue.prev             = tp;
 8000ba4:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8000ba6:	f880 5020 	strb.w	r5, [r0, #32]
}
 8000baa:	bc30      	pop	{r4, r5}
    currp = ntp;
 8000bac:	6198      	str	r0, [r3, #24]
    chSysSwitch(ntp, otp);
 8000bae:	f7ff bb97 	b.w	80002e0 <_port_switch>
 8000bb2:	bf00      	nop
 8000bb4:	200009ac 	.word	0x200009ac
	...

08000bc0 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <chSchGoSleepS+0x24>)
 8000bc2:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000bc4:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000bc6:	b410      	push	{r4}
  otp->state = newstate;
 8000bc8:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8000bcc:	6810      	ldr	r0, [r2, #0]
 8000bce:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000bd0:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000bd2:	6043      	str	r3, [r0, #4]
 8000bd4:	f882 4020 	strb.w	r4, [r2, #32]
}
 8000bd8:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000bda:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000bdc:	4610      	mov	r0, r2
 8000bde:	f7ff bb7f 	b.w	80002e0 <_port_switch>
 8000be2:	bf00      	nop
 8000be4:	200009ac 	.word	0x200009ac
	...

08000bf0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000bf2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000bf4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000bf6:	d048      	beq.n	8000c8a <chSchGoSleepTimeoutS+0x9a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000bf8:	4c3d      	ldr	r4, [pc, #244]	; (8000cf0 <chSchGoSleepTimeoutS+0x100>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000bfa:	4f3e      	ldr	r7, [pc, #248]	; (8000cf4 <chSchGoSleepTimeoutS+0x104>)
  vtp->par = par;
 8000bfc:	69a3      	ldr	r3, [r4, #24]
 8000bfe:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c00:	4626      	mov	r6, r4
 8000c02:	2902      	cmp	r1, #2
 8000c04:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 8000c08:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <chSchGoSleepTimeoutS+0x108>)
 8000c0c:	bf38      	it	cc
 8000c0e:	2102      	movcc	r1, #2
 8000c10:	42b3      	cmp	r3, r6
 8000c12:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8000c14:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c16:	d059      	beq.n	8000ccc <chSchGoSleepTimeoutS+0xdc>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000c18:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000c1a:	1bd2      	subs	r2, r2, r7
 8000c1c:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000c1e:	d32e      	bcc.n	8000c7e <chSchGoSleepTimeoutS+0x8e>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000c20:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8000c26:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000c28:	4291      	cmp	r1, r2
 8000c2a:	d904      	bls.n	8000c36 <chSchGoSleepTimeoutS+0x46>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000c2c:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000c2e:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	428a      	cmp	r2, r1
 8000c34:	d3fa      	bcc.n	8000c2c <chSchGoSleepTimeoutS+0x3c>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000c3a:	af01      	add	r7, sp, #4
  vtp->next = p;
 8000c3c:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000c3e:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8000c40:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8000c42:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8000c4c:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000c4e:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000c50:	4628      	mov	r0, r5
 8000c52:	f7ff ffb5 	bl	8000bc0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000c56:	9b04      	ldr	r3, [sp, #16]
 8000c58:	b16b      	cbz	r3, 8000c76 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000c5a:	69e3      	ldr	r3, [r4, #28]
 8000c5c:	42bb      	cmp	r3, r7
 8000c5e:	d01b      	beq.n	8000c98 <chSchGoSleepTimeoutS+0xa8>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000c60:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000c64:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000c66:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000c68:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8000c6a:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000c6c:	d003      	beq.n	8000c76 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	9903      	ldr	r1, [sp, #12]
 8000c72:	440a      	add	r2, r1
 8000c74:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000c76:	69a3      	ldr	r3, [r4, #24]
}
 8000c78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c7a:	b007      	add	sp, #28
 8000c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	4291      	cmp	r1, r2
 8000c82:	d2d1      	bcs.n	8000c28 <chSchGoSleepTimeoutS+0x38>
  return systime + (systime_t)interval;
 8000c84:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000c86:	6347      	str	r7, [r0, #52]	; 0x34
 8000c88:	e7ce      	b.n	8000c28 <chSchGoSleepTimeoutS+0x38>
    chSchGoSleepS(newstate);
 8000c8a:	4c19      	ldr	r4, [pc, #100]	; (8000cf0 <chSchGoSleepTimeoutS+0x100>)
 8000c8c:	f7ff ff98 	bl	8000bc0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000c90:	69a3      	ldr	r3, [r4, #24]
}
 8000c92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c94:	b007      	add	sp, #28
 8000c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000c98:	9b01      	ldr	r3, [sp, #4]
 8000c9a:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000c9c:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000c9e:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000ca0:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8000ca2:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000ca4:	d020      	beq.n	8000ce8 <chSchGoSleepTimeoutS+0xf8>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	9d03      	ldr	r5, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <chSchGoSleepTimeoutS+0x108>)
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000cac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000cae:	442a      	add	r2, r5
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000cb4:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	d9dd      	bls.n	8000c76 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000cba:	1acb      	subs	r3, r1, r3
 8000cbc:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000cbe:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000cc0:	bf98      	it	ls
 8000cc2:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <chSchGoSleepTimeoutS+0x108>)
  return systime + (systime_t)interval;
 8000cc6:	440a      	add	r2, r1
 8000cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000cca:	e7d4      	b.n	8000c76 <chSchGoSleepTimeoutS+0x86>
 8000ccc:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8000cce:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8000cd0:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000cd2:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8000cd6:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 8000cda:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8000cdc:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000cde:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000ce0:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8000ce2:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000ce4:	60c3      	str	r3, [r0, #12]
 8000ce6:	e7b3      	b.n	8000c50 <chSchGoSleepTimeoutS+0x60>
  STM32_ST_TIM->DIER = 0U;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <chSchGoSleepTimeoutS+0x108>)
 8000cea:	60da      	str	r2, [r3, #12]
    return;
 8000cec:	e7c3      	b.n	8000c76 <chSchGoSleepTimeoutS+0x86>
 8000cee:	bf00      	nop
 8000cf0:	200009ac 	.word	0x200009ac
 8000cf4:	08000791 	.word	0x08000791
 8000cf8:	40000c00 	.word	0x40000c00
 8000cfc:	00000000 	.word	0x00000000

08000d00 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000d00:	b161      	cbz	r1, 8000d1c <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000d04:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000d06:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8000d08:	6844      	ldr	r4, [r0, #4]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d10:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8000d12:	6022      	str	r2, [r4, #0]
}
 8000d14:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8000d16:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000d18:	f7ff bf6a 	b.w	8000bf0 <chSchGoSleepTimeoutS>
}
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	200009ac 	.word	0x200009ac
	...

08000d30 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	4604      	mov	r4, r0
 8000d34:	460f      	mov	r7, r1
 8000d36:	4616      	mov	r6, r2
 8000d38:	2320      	movs	r3, #32
 8000d3a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8000d3e:	e003      	b.n	8000d48 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000d40:	f7ff ffde 	bl	8000d00 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000d44:	2800      	cmp	r0, #0
 8000d46:	db18      	blt.n	8000d7a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8000d48:	68a5      	ldr	r5, [r4, #8]
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d0f6      	beq.n	8000d40 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000d52:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000d54:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000d56:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000d58:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000d5a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000d5c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000d5e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000d60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000d64:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000d66:	bf24      	itt	cs
 8000d68:	68e3      	ldrcs	r3, [r4, #12]
 8000d6a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000d6c:	69e3      	ldr	r3, [r4, #28]
 8000d6e:	b103      	cbz	r3, 8000d72 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8000d70:	4798      	blx	r3
 8000d72:	2000      	movs	r0, #0
 8000d74:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d7a:	f385 8811 	msr	BASEPRI, r5
 8000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000d80 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000d80:	3030      	adds	r0, #48	; 0x30
 8000d82:	f7ff bfd5 	b.w	8000d30 <oqPutTimeout>
 8000d86:	bf00      	nop
	...

08000d90 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000d90:	3030      	adds	r0, #48	; 0x30
 8000d92:	f04f 32ff 	mov.w	r2, #4294967295
 8000d96:	f7ff bfcb 	b.w	8000d30 <oqPutTimeout>
 8000d9a:	bf00      	nop
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	2320      	movs	r3, #32
 8000da4:	4605      	mov	r5, r0
 8000da6:	460e      	mov	r6, r1
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	e003      	b.n	8000db6 <iqGetTimeout+0x16>
 8000dae:	f7ff ffa7 	bl	8000d00 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000db2:	2800      	cmp	r0, #0
 8000db4:	db1a      	blt.n	8000dec <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000db6:	68ac      	ldr	r4, [r5, #8]
 8000db8:	4631      	mov	r1, r6
 8000dba:	4628      	mov	r0, r5
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8000dc0:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8000dc2:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000dc4:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8000dc6:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000dc8:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000dca:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8000dcc:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8000dce:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000dd0:	bf28      	it	cs
 8000dd2:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8000dd4:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000dd6:	bf28      	it	cs
 8000dd8:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8000dda:	69eb      	ldr	r3, [r5, #28]
 8000ddc:	b10b      	cbz	r3, 8000de2 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8000dde:	4628      	mov	r0, r5
 8000de0:	4798      	blx	r3
 8000de2:	2300      	movs	r3, #0
 8000de4:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000de8:	4620      	mov	r0, r4
}
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	f384 8811 	msr	BASEPRI, r4
 8000df0:	bd70      	pop	{r4, r5, r6, pc}
 8000df2:	bf00      	nop
	...

08000e00 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000e00:	300c      	adds	r0, #12
 8000e02:	f7ff bfcd 	b.w	8000da0 <iqGetTimeout>
 8000e06:	bf00      	nop
	...

08000e10 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000e10:	300c      	adds	r0, #12
 8000e12:	f04f 31ff 	mov.w	r1, #4294967295
 8000e16:	f7ff bfc3 	b.w	8000da0 <iqGetTimeout>
 8000e1a:	bf00      	nop
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8000e20:	b508      	push	{r3, lr}
 8000e22:	4601      	mov	r1, r0
 8000e24:	2320      	movs	r3, #32
 8000e26:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8000e2a:	2008      	movs	r0, #8
 8000e2c:	f7ff fee0 	bl	8000bf0 <chSchGoSleepTimeoutS>
 8000e30:	2300      	movs	r3, #0
 8000e32:	f383 8811 	msr	BASEPRI, r3
}
 8000e36:	bd08      	pop	{r3, pc}
	...

08000e40 <Thread1>:
    }
    }
}

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8000e40:	b508      	push	{r3, lr}
  (void)arg;
  while (true) {
    palSetPad(GPIOA, 5);       /* Built-in Nucleo64 STM32F410RB.  */
 8000e42:	2520      	movs	r5, #32
 8000e44:	4c06      	ldr	r4, [pc, #24]	; (8000e60 <Thread1+0x20>)
 8000e46:	462e      	mov	r6, r5
 8000e48:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(250);
 8000e4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000e4e:	f7ff ffe7 	bl	8000e20 <chThdSleep>
    palClearPad(GPIOA, 5);
 8000e52:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(250);
 8000e54:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000e58:	f7ff ffe2 	bl	8000e20 <chThdSleep>
  while (true) {
 8000e5c:	e7f4      	b.n	8000e48 <Thread1+0x8>
 8000e5e:	bf00      	nop
 8000e60:	40020000 	.word	0x40020000
	...

08000e70 <spiExchange.constprop.0>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	4606      	mov	r6, r0
 8000e74:	2320      	movs	r3, #32
 8000e76:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <spiExchange.constprop.0+0x58>)
  return ch.rlist.current;
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <spiExchange.constprop.0+0x5c>)
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000e7e:	6a1d      	ldr	r5, [r3, #32]
 8000e80:	6987      	ldr	r7, [r0, #24]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000e82:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e84:	2003      	movs	r0, #3
 8000e86:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000e88:	682d      	ldr	r5, [r5, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000e8a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000e8c:	60ea      	str	r2, [r5, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000e8e:	e9d3 c20a 	ldrd	ip, r2, [r3, #40]	; 0x28
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8000e92:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8000e9a:	606e      	str	r6, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8000e9c:	f8c5 c000 	str.w	ip, [r5]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000ea0:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8000ea2:	6066      	str	r6, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000ea4:	6022      	str	r2, [r4, #0]

  dmaStreamEnable(spip->dmarx);
 8000ea6:	682a      	ldr	r2, [r5, #0]
 8000ea8:	f042 0201 	orr.w	r2, r2, #1
 8000eac:	602a      	str	r2, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	f042 0201 	orr.w	r2, r2, #1
 8000eb4:	6022      	str	r2, [r4, #0]
  *trp = tp;
 8000eb6:	f843 7f08 	str.w	r7, [r3, #8]!
  tp->u.wttrp = trp;
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000ebc:	f7ff fe80 	bl	8000bc0 <chSchGoSleepS>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8000ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec8:	2000087c 	.word	0x2000087c
 8000ecc:	200009ac 	.word	0x200009ac

08000ed0 <nm_bus_ioctl.constprop.0>:
*	@param[IN]	pvParameter
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	2320      	movs	r3, #32
	sint8 s8Ret = 0;
	switch(u8Cmd)
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8000ed4:	e9d0 1500 	ldrd	r1, r5, [r0]
 8000ed8:	8906      	ldrh	r6, [r0, #8]
 8000eda:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000ede:	4c17      	ldr	r4, [pc, #92]	; (8000f3c <nm_bus_ioctl.constprop.0+0x6c>)
 8000ee0:	6862      	ldr	r2, [r4, #4]
 8000ee2:	e9d2 2002 	ldrd	r2, r0, [r2, #8]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	4083      	lsls	r3, r0
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	8353      	strh	r3, [r2, #26]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f383 8811 	msr	BASEPRI, r3
  if (pu8Mosi == NULL)
 8000ef4:	b1e1      	cbz	r1, 8000f30 <nm_bus_ioctl.constprop.0+0x60>
  else if(pu8Miso == NULL)
 8000ef6:	b18d      	cbz	r5, 8000f1c <nm_bus_ioctl.constprop.0+0x4c>
    spiExchange(&SPID2,u16Sz,pu8Mosi,pu8Miso);
 8000ef8:	462a      	mov	r2, r5
 8000efa:	4630      	mov	r0, r6
 8000efc:	f7ff ffb8 	bl	8000e70 <spiExchange.constprop.0>
 8000f00:	2320      	movs	r3, #32
 8000f02:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000f06:	6862      	ldr	r2, [r4, #4]
 8000f08:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	8313      	strh	r3, [r2, #24]
 8000f14:	2000      	movs	r0, #0
 8000f16:	f380 8811 	msr	BASEPRI, r0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
    spiExchange(&SPID2,u16Sz,pu8Mosi,spiDummyBuf);
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	4a08      	ldr	r2, [pc, #32]	; (8000f40 <nm_bus_ioctl.constprop.0+0x70>)
 8000f20:	f7ff ffa6 	bl	8000e70 <spiExchange.constprop.0>
    memset(spiDummyBuf,0, u16Sz);
 8000f24:	4632      	mov	r2, r6
 8000f26:	4629      	mov	r1, r5
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <nm_bus_ioctl.constprop.0+0x70>)
 8000f2a:	f002 fe83 	bl	8003c34 <memset>
 8000f2e:	e7e7      	b.n	8000f00 <nm_bus_ioctl.constprop.0+0x30>
    spiExchange(&SPID2,u16Sz,spiDummyBuf,pu8Miso);
 8000f30:	4903      	ldr	r1, [pc, #12]	; (8000f40 <nm_bus_ioctl.constprop.0+0x70>)
 8000f32:	462a      	mov	r2, r5
 8000f34:	4630      	mov	r0, r6
 8000f36:	f7ff ff9b 	bl	8000e70 <spiExchange.constprop.0>
 8000f3a:	e7e1      	b.n	8000f00 <nm_bus_ioctl.constprop.0+0x30>
 8000f3c:	2000087c 	.word	0x2000087c
 8000f40:	20000c24 	.word	0x20000c24
	...

08000f50 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 8000f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f54:	b089      	sub	sp, #36	; 0x24
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 8000f56:	f04f 0800 	mov.w	r8, #0
{
 8000f5a:	4682      	mov	sl, r0
 8000f5c:	460f      	mov	r7, r1
 8000f5e:	9201      	str	r2, [sp, #4]
	spi.pu8InBuf = NULL;
 8000f60:	4646      	mov	r6, r8
 8000f62:	f10d 050f 	add.w	r5, sp, #15
	do {
		if (sz <= DATA_PKT_SZ)
 8000f66:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8000f6a:	46b9      	mov	r9, r7
			nbytes = DATA_PKT_SZ;

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 8000f6c:	f04f 0b0a 	mov.w	fp, #10
 8000f70:	bf28      	it	cs
 8000f72:	f44f 5900 	movcs.w	r9, #8192	; 0x2000
	spi.u16Sz = sz;
 8000f76:	2401      	movs	r4, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f78:	a805      	add	r0, sp, #20
	spi.pu8OutBuf = b;
 8000f7a:	e9cd 6505 	strd	r6, r5, [sp, #20]
	spi.u16Sz = sz;
 8000f7e:	f8ad 401c 	strh.w	r4, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f82:	f7ff ffa5 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);
 8000f86:	f10b 3cff 	add.w	ip, fp, #4294967295
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b948      	cbnz	r0, 8000fa2 <spi_data_read+0x52>
			if (((rsp >> 4) & 0xf) == 0xf)
 8000f8e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000f92:	0912      	lsrs	r2, r2, #4
 8000f94:	2a0f      	cmp	r2, #15
 8000f96:	d008      	beq.n	8000faa <spi_data_read+0x5a>
 8000f98:	fa0f fb8c 	sxth.w	fp, ip
		} while (retry--);
 8000f9c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8000fa0:	d1ea      	bne.n	8000f78 <spi_data_read+0x28>
		retry = SPI_RESP_RETRY_COUNT;
 8000fa2:	2000      	movs	r0, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
 8000fa4:	b009      	add	sp, #36	; 0x24
 8000fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
 8000faa:	f1bb 0f00 	cmp.w	fp, #0
 8000fae:	d0f8      	beq.n	8000fa2 <spi_data_read+0x52>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8000fb0:	eb0a 0208 	add.w	r2, sl, r8
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000fb4:	a805      	add	r0, sp, #20
	spi.pu8InBuf = NULL;
 8000fb6:	9305      	str	r3, [sp, #20]
	spi.u16Sz = sz;
 8000fb8:	f8ad 901c 	strh.w	r9, [sp, #28]
	spi.pu8OutBuf = b;
 8000fbc:	9206      	str	r2, [sp, #24]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000fbe:	f7ff ff87 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	d1ed      	bne.n	8000fa2 <spi_data_read+0x52>
			if (!gu8Crc_off) {
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <spi_data_read+0xb0>)
 8000fc8:	9a01      	ldr	r2, [sp, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	d00b      	beq.n	8000fe8 <spi_data_read+0x98>
		sz -= nbytes;
 8000fd0:	eba7 0709 	sub.w	r7, r7, r9
		ix += nbytes;
 8000fd4:	44c8      	add	r8, r9
		sz -= nbytes;
 8000fd6:	b2bf      	uxth	r7, r7
		ix += nbytes;
 8000fd8:	fa0f f888 	sxth.w	r8, r8
	} while (sz);
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	d1c2      	bne.n	8000f66 <spi_data_read+0x16>
 8000fe0:	2001      	movs	r0, #1
}
 8000fe2:	b009      	add	sp, #36	; 0x24
 8000fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi.pu8OutBuf = b;
 8000fe8:	aa04      	add	r2, sp, #16
	spi.pu8InBuf = NULL;
 8000fea:	9305      	str	r3, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000fec:	a805      	add	r0, sp, #20
	spi.u16Sz = sz;
 8000fee:	2302      	movs	r3, #2
	spi.pu8OutBuf = b;
 8000ff0:	9206      	str	r2, [sp, #24]
	spi.u16Sz = sz;
 8000ff2:	f8ad 301c 	strh.w	r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000ff6:	f7ff ff6b 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d0e8      	beq.n	8000fd0 <spi_data_read+0x80>
 8000ffe:	e7d0      	b.n	8000fa2 <spi_data_read+0x52>
 8001000:	20000c21 	.word	0x20000c21
	...

08001010 <spi_cmd_rsp>:
{
 8001010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((cmd == CMD_RESET) ||
 8001014:	28cf      	cmp	r0, #207	; 0xcf
{
 8001016:	b085      	sub	sp, #20
 8001018:	4607      	mov	r7, r0
	if ((cmd == CMD_RESET) ||
 800101a:	d033      	beq.n	8001084 <spi_cmd_rsp+0x74>
 800101c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d92e      	bls.n	8001084 <spi_cmd_rsp+0x74>
 8001026:	f10d 0503 	add.w	r5, sp, #3
 800102a:	ae01      	add	r6, sp, #4
{
 800102c:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
 800102e:	f04f 0900 	mov.w	r9, #0
	spi.u16Sz = sz;
 8001032:	f04f 0801 	mov.w	r8, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001036:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8001038:	e9cd 9501 	strd	r9, r5, [sp, #4]
	spi.u16Sz = sz;
 800103c:	f8ad 800c 	strh.w	r8, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001040:	f7ff ff46 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8001044:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8001046:	bb58      	cbnz	r0, 80010a0 <spi_cmd_rsp+0x90>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8001048:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800104c:	42ba      	cmp	r2, r7
 800104e:	d002      	beq.n	8001056 <spi_cmd_rsp+0x46>
 8001050:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001054:	d1ef      	bne.n	8001036 <spi_cmd_rsp+0x26>
 8001056:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
 8001058:	f04f 0800 	mov.w	r8, #0
	spi.u16Sz = sz;
 800105c:	2701      	movs	r7, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800105e:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8001060:	e9cd 8501 	strd	r8, r5, [sp, #4]
	spi.u16Sz = sz;
 8001064:	f8ad 700c 	strh.w	r7, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001068:	f7ff ff32 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 800106c:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800106e:	b9b8      	cbnz	r0, 80010a0 <spi_cmd_rsp+0x90>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8001070:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001074:	b112      	cbz	r2, 800107c <spi_cmd_rsp+0x6c>
 8001076:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800107a:	d1f0      	bne.n	800105e <spi_cmd_rsp+0x4e>
	sint8 result = N_OK;
 800107c:	2001      	movs	r0, #1
}
 800107e:	b005      	add	sp, #20
 8001080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001084:	ae01      	add	r6, sp, #4
	spi.pu8InBuf = NULL;
 8001086:	2200      	movs	r2, #0
	spi.pu8OutBuf = b;
 8001088:	f10d 0503 	add.w	r5, sp, #3
	spi.u16Sz = sz;
 800108c:	2301      	movs	r3, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800108e:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8001090:	e9cd 2501 	strd	r2, r5, [sp, #4]
	spi.u16Sz = sz;
 8001094:	f8ad 300c 	strh.w	r3, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001098:	f7ff ff1a 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 800109c:	2800      	cmp	r0, #0
 800109e:	d0c5      	beq.n	800102c <spi_cmd_rsp+0x1c>
			result = N_FAIL;
 80010a0:	2000      	movs	r0, #0
}
 80010a2:	b005      	add	sp, #20
 80010a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080010b0 <spi_cmd>:
{
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b087      	sub	sp, #28
 80010b4:	f1a0 04c3 	sub.w	r4, r0, #195	; 0xc3
 80010b8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	bc[0] = cmd;
 80010bc:	f88d 0000 	strb.w	r0, [sp]
	switch (cmd) {
 80010c0:	2c0c      	cmp	r4, #12
 80010c2:	d834      	bhi.n	800112e <spi_cmd+0x7e>
 80010c4:	e8df f004 	tbb	[pc, r4]
 80010c8:	07074d76 	.word	0x07074d76
 80010cc:	655b3636 	.word	0x655b3636
 80010d0:	33333333 	.word	0x33333333
 80010d4:	6d          	.byte	0x6d
 80010d5:	00          	.byte	0x00
		bc[1] = 0x00;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = 0x00;
 80010dc:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 5;
 80010e0:	2605      	movs	r6, #5
		if (!gu8Crc_off)
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <spi_cmd+0x130>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d137      	bne.n	800115a <spi_cmd+0xaa>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 80010ea:	f1ad 0302 	sub.w	r3, sp, #2
 80010ee:	466d      	mov	r5, sp
 80010f0:	1999      	adds	r1, r3, r6
 80010f2:	4c3c      	ldr	r4, [pc, #240]	; (80011e4 <spi_cmd+0x134>)
 80010f4:	462a      	mov	r2, r5
 80010f6:	1e77      	subs	r7, r6, #1
 80010f8:	237f      	movs	r3, #127	; 0x7f
 80010fa:	e001      	b.n	8001100 <spi_cmd+0x50>
 80010fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	return crc7_syndrome_table[(crc << 1) ^ data];
 8001100:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
	while (len--)
 8001104:	4291      	cmp	r1, r2
	return crc7_syndrome_table[(crc << 1) ^ data];
 8001106:	5ce3      	ldrb	r3, [r4, r3]
	while (len--)
 8001108:	d1f8      	bne.n	80010fc <spi_cmd+0x4c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 800110a:	aa06      	add	r2, sp, #24
 800110c:	443a      	add	r2, r7
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	f802 3c18 	strb.w	r3, [r2, #-24]
	spi.pu8OutBuf = NULL;
 8001114:	2300      	movs	r3, #0
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001116:	a803      	add	r0, sp, #12
	spi.pu8InBuf = b;
 8001118:	9503      	str	r5, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 800111a:	f8ad 6014 	strh.w	r6, [sp, #20]
	spi.pu8OutBuf = NULL;
 800111e:	9304      	str	r3, [sp, #16]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001120:	f7ff fed6 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
		result = N_FAIL;
 8001124:	fab0 f080 	clz	r0, r0
 8001128:	0940      	lsrs	r0, r0, #5
}
 800112a:	b007      	add	sp, #28
 800112c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bc[0] = cmd;
 800112e:	2000      	movs	r0, #0
}
 8001130:	b007      	add	sp, #28
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc[5] = (uint8)(sz >> 8);
 8001134:	0a1d      	lsrs	r5, r3, #8
		bc[6] = (uint8)(sz);
 8001136:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!gu8Crc_off)
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <spi_cmd+0x130>)
		bc[5] = (uint8)(sz >> 8);
 800113c:	f88d 5005 	strb.w	r5, [sp, #5]
		if (!gu8Crc_off)
 8001140:	781b      	ldrb	r3, [r3, #0]
		bc[1] = (uint8)(adr >> 16);
 8001142:	0c0c      	lsrs	r4, r1, #16
		bc[4] = (uint8)(sz >> 16);
 8001144:	2200      	movs	r2, #0
		bc[2] = (uint8)(adr >> 8);
 8001146:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
 8001148:	f88d 4001 	strb.w	r4, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 800114c:	f8ad 1002 	strh.w	r1, [sp, #2]
		bc[4] = (uint8)(sz >> 16);
 8001150:	f88d 2004 	strb.w	r2, [sp, #4]
		len = 8;
 8001154:	2608      	movs	r6, #8
		if (!gu8Crc_off)
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0c7      	beq.n	80010ea <spi_cmd+0x3a>
			len-=1;
 800115a:	3e01      	subs	r6, #1
 800115c:	b2f6      	uxtb	r6, r6
 800115e:	466d      	mov	r5, sp
 8001160:	e7d8      	b.n	8001114 <spi_cmd+0x64>
		bc[1] = (uint8)(adr >> 8);
 8001162:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
 8001166:	b10d      	cbz	r5, 800116c <spi_cmd+0xbc>
 8001168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800116c:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = 0x00;
 8001170:	2300      	movs	r3, #0
		bc[2] = (uint8)adr;
 8001172:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[3] = 0x00;
 8001176:	f88d 3003 	strb.w	r3, [sp, #3]
		len = 5;
 800117a:	2605      	movs	r6, #5
 800117c:	e7b1      	b.n	80010e2 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 16);
 800117e:	ba12      	rev	r2, r2
 8001180:	0c0c      	lsrs	r4, r1, #16
		bc[2] = (uint8)(adr >> 8);
 8001182:	ba4b      	rev16	r3, r1
		bc[4] = (uint8)(u32data >> 24);
 8001184:	9201      	str	r2, [sp, #4]
		bc[1] = (uint8)(adr >> 16);
 8001186:	f88d 4001 	strb.w	r4, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 800118a:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 9;
 800118e:	2609      	movs	r6, #9
 8001190:	e7a7      	b.n	80010e2 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 16);
 8001192:	0c0b      	lsrs	r3, r1, #16
		bc[2] = (uint8)(adr >> 8);
 8001194:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
 8001196:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 800119a:	f8ad 1002 	strh.w	r1, [sp, #2]
		len = 5;
 800119e:	2605      	movs	r6, #5
 80011a0:	e79f      	b.n	80010e2 <spi_cmd+0x32>
		bc[1] = 0xff;
 80011a2:	22ff      	movs	r2, #255	; 0xff
		bc[2] = 0xff;
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		bc[1] = 0xff;
 80011a8:	f88d 2001 	strb.w	r2, [sp, #1]
		bc[2] = 0xff;
 80011ac:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 5;
 80011b0:	2605      	movs	r6, #5
 80011b2:	e796      	b.n	80010e2 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 8);
 80011b4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
 80011b8:	b10d      	cbz	r5, 80011be <spi_cmd+0x10e>
 80011ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011be:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = (uint8)(u32data >> 24);
 80011c2:	0e15      	lsrs	r5, r2, #24
		bc[4] = (uint8)(u32data >> 16);
 80011c4:	0c14      	lsrs	r4, r2, #16
		bc[5] = (uint8)(u32data >> 8);
 80011c6:	0a13      	lsrs	r3, r2, #8
		bc[2] = (uint8)(adr);
 80011c8:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[6] = (uint8)(u32data);
 80011cc:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
 80011d0:	f88d 5003 	strb.w	r5, [sp, #3]
		bc[4] = (uint8)(u32data >> 16);
 80011d4:	f88d 4004 	strb.w	r4, [sp, #4]
		bc[5] = (uint8)(u32data >> 8);
 80011d8:	f88d 3005 	strb.w	r3, [sp, #5]
		len = 8;
 80011dc:	2608      	movs	r6, #8
 80011de:	e780      	b.n	80010e2 <spi_cmd+0x32>
 80011e0:	20000c21 	.word	0x20000c21
 80011e4:	08003fa4 	.word	0x08003fa4
	...

080011f0 <nm_spi_read>:

	return result;
}

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 80011f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 80011f4:	f04f 0900 	mov.w	r9, #0
{
 80011f8:	b084      	sub	sp, #16
 80011fa:	4680      	mov	r8, r0
 80011fc:	468a      	mov	sl, r1
 80011fe:	4616      	mov	r6, r2
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8001200:	464f      	mov	r7, r9
{
 8001202:	250a      	movs	r5, #10
 8001204:	e013      	b.n	800122e <nm_spi_read+0x3e>
  chThdSleepMilliseconds(u32TimeMsec);
 8001206:	200a      	movs	r0, #10
 8001208:	f7ff fe0a 	bl	8000e20 <chThdSleep>

_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800120c:	2300      	movs	r3, #0
 800120e:	461a      	mov	r2, r3
 8001210:	4619      	mov	r1, r3
 8001212:	9700      	str	r7, [sp, #0]
 8001214:	20cf      	movs	r0, #207	; 0xcf
 8001216:	f7ff ff4b 	bl	80010b0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800121a:	20cf      	movs	r0, #207	; 0xcf
 800121c:	f7ff fef8 	bl	8001010 <spi_cmd_rsp>
 8001220:	3d01      	subs	r5, #1
 8001222:	200a      	movs	r0, #10
 8001224:	f7ff fdfc 	bl	8000e20 <chThdSleep>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
		retry--;
		if(retry) goto _RETRY_;
 8001228:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800122c:	d026      	beq.n	800127c <nm_spi_read+0x8c>
	if (size == 1)
 800122e:	2e01      	cmp	r6, #1
 8001230:	bf0c      	ite	eq
 8001232:	2302      	moveq	r3, #2
 8001234:	4633      	movne	r3, r6
	result = spi_cmd(cmd, addr, 0, size,0);
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 800123e:	9700      	str	r7, [sp, #0]
 8001240:	4641      	mov	r1, r8
		single_byte_workaround = 1;
 8001242:	bf04      	itt	eq
 8001244:	46b1      	moveq	r9, r6
		size = 2;
 8001246:	461e      	moveq	r6, r3
	result = spi_cmd(cmd, addr, 0, size,0);
 8001248:	f7ff ff32 	bl	80010b0 <spi_cmd>
	if (result != N_OK) {
 800124c:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, size,0);
 800124e:	4604      	mov	r4, r0
	if (result != N_OK) {
 8001250:	d1d9      	bne.n	8001206 <nm_spi_read+0x16>
	result = spi_cmd_rsp(cmd);
 8001252:	20c8      	movs	r0, #200	; 0xc8
 8001254:	f7ff fedc 	bl	8001010 <spi_cmd_rsp>
	if (result != N_OK) {
 8001258:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 800125a:	4604      	mov	r4, r0
	if (result != N_OK) {
 800125c:	d1d3      	bne.n	8001206 <nm_spi_read+0x16>
		result = spi_data_read(tmp, size,0);
 800125e:	2200      	movs	r2, #0
 8001260:	4631      	mov	r1, r6
 8001262:	a803      	add	r0, sp, #12
	if (single_byte_workaround)
 8001264:	f1b9 0f00 	cmp.w	r9, #0
 8001268:	d00c      	beq.n	8001284 <nm_spi_read+0x94>
		result = spi_data_read(tmp, size,0);
 800126a:	f7ff fe71 	bl	8000f50 <spi_data_read>
		buf[0] = tmp[0];
 800126e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001272:	f88a 3000 	strb.w	r3, [sl]
		result = spi_data_read(tmp, size,0);
 8001276:	4604      	mov	r4, r0
	if(result != N_OK)
 8001278:	2c01      	cmp	r4, #1
 800127a:	d1c4      	bne.n	8001206 <nm_spi_read+0x16>
	}

	return result;
}
 800127c:	4620      	mov	r0, r4
 800127e:	b004      	add	sp, #16
 8001280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		result = spi_data_read(buf, size,0);
 8001284:	464a      	mov	r2, r9
 8001286:	4650      	mov	r0, sl
 8001288:	f7ff fe62 	bl	8000f50 <spi_data_read>
 800128c:	4604      	mov	r4, r0
 800128e:	e7f3      	b.n	8001278 <nm_spi_read+0x88>

08001290 <nm_read_block>:
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8001290:	2af8      	cmp	r2, #248	; 0xf8
{
 8001292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001296:	4616      	mov	r6, r2
 8001298:	4605      	mov	r5, r0
 800129a:	4688      	mov	r8, r1
		if(u32Sz <= u16MaxTrxSz)
 800129c:	4614      	mov	r4, r2
 800129e:	bf88      	it	hi
 80012a0:	188f      	addhi	r7, r1, r2
 80012a2:	d90e      	bls.n	80012c2 <nm_read_block+0x32>
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 80012a4:	1b39      	subs	r1, r7, r4
 80012a6:	4628      	mov	r0, r5
 80012a8:	22f8      	movs	r2, #248	; 0xf8
 80012aa:	f7ff ffa1 	bl	80011f0 <nm_spi_read>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
 80012ae:	3cf8      	subs	r4, #248	; 0xf8

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80012b0:	2801      	cmp	r0, #1
 80012b2:	eba6 0304 	sub.w	r3, r6, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
 80012b6:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
 80012ba:	d10d      	bne.n	80012d8 <nm_read_block+0x48>
		if(u32Sz <= u16MaxTrxSz)
 80012bc:	2cf8      	cmp	r4, #248	; 0xf8
 80012be:	d8f1      	bhi.n	80012a4 <nm_read_block+0x14>
 80012c0:	4498      	add	r8, r3
	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 80012c2:	b2a2      	uxth	r2, r4
 80012c4:	4641      	mov	r1, r8
 80012c6:	4628      	mov	r0, r5
 80012c8:	f7ff ff92 	bl	80011f0 <nm_spi_read>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80012cc:	2801      	cmp	r0, #1
 80012ce:	bf08      	it	eq
 80012d0:	2000      	moveq	r0, #0
 80012d2:	d101      	bne.n	80012d8 <nm_read_block+0x48>
		}
	}

	return s8Ret;
}
 80012d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 80012d8:	f06f 0005 	mvn.w	r0, #5
 80012dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080012e0 <spi_read_reg>:
{
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	28ff      	cmp	r0, #255	; 0xff
 80012e6:	b084      	sub	sp, #16
 80012e8:	4605      	mov	r5, r0
 80012ea:	4689      	mov	r9, r1
 80012ec:	bf95      	itete	ls
 80012ee:	26c4      	movls	r6, #196	; 0xc4
 80012f0:	26ca      	movhi	r6, #202	; 0xca
 80012f2:	2701      	movls	r7, #1
 80012f4:	2700      	movhi	r7, #0
 80012f6:	f04f 0a0a 	mov.w	sl, #10
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 80012fa:	f04f 0800 	mov.w	r8, #0
 80012fe:	e015      	b.n	800132c <spi_read_reg+0x4c>
 8001300:	200a      	movs	r0, #10
 8001302:	f7ff fd8d 	bl	8000e20 <chThdSleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8001306:	2300      	movs	r3, #0
 8001308:	461a      	mov	r2, r3
 800130a:	4619      	mov	r1, r3
 800130c:	f8cd 8000 	str.w	r8, [sp]
 8001310:	20cf      	movs	r0, #207	; 0xcf
 8001312:	f7ff fecd 	bl	80010b0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8001316:	20cf      	movs	r0, #207	; 0xcf
 8001318:	f7ff fe7a 	bl	8001010 <spi_cmd_rsp>
 800131c:	200a      	movs	r0, #10
 800131e:	f7ff fd7f 	bl	8000e20 <chThdSleep>
		if(retry) goto _RETRY_;
 8001322:	f10a 33ff 	add.w	r3, sl, #4294967295
 8001326:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
 800132a:	d01a      	beq.n	8001362 <spi_read_reg+0x82>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800132c:	9700      	str	r7, [sp, #0]
 800132e:	2304      	movs	r3, #4
 8001330:	2200      	movs	r2, #0
 8001332:	4629      	mov	r1, r5
 8001334:	4630      	mov	r0, r6
 8001336:	f7ff febb 	bl	80010b0 <spi_cmd>
	if (result != N_OK) {
 800133a:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800133c:	4604      	mov	r4, r0
	if (result != N_OK) {
 800133e:	d1df      	bne.n	8001300 <spi_read_reg+0x20>
	result = spi_cmd_rsp(cmd);
 8001340:	4630      	mov	r0, r6
 8001342:	f7ff fe65 	bl	8001010 <spi_cmd_rsp>
	if (result != N_OK) {
 8001346:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 8001348:	4604      	mov	r4, r0
	if (result != N_OK) {
 800134a:	d1d9      	bne.n	8001300 <spi_read_reg+0x20>
	result = spi_data_read(&tmp[0], 4, clockless);
 800134c:	463a      	mov	r2, r7
 800134e:	2104      	movs	r1, #4
 8001350:	a803      	add	r0, sp, #12
 8001352:	f7ff fdfd 	bl	8000f50 <spi_data_read>
	if (result != N_OK) {
 8001356:	2801      	cmp	r0, #1
	result = spi_data_read(&tmp[0], 4, clockless);
 8001358:	4604      	mov	r4, r0
	if (result != N_OK) {
 800135a:	d1d1      	bne.n	8001300 <spi_read_reg+0x20>
	*u32data = tmp[0] |
 800135c:	9b03      	ldr	r3, [sp, #12]
 800135e:	f8c9 3000 	str.w	r3, [r9]
}
 8001362:	4620      	mov	r0, r4
 8001364:	b004      	add	sp, #16
 8001366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800136a:	bf00      	nop
 800136c:	0000      	movs	r0, r0
	...

08001370 <nm_spi_read_reg_with_ret>:
{
 8001370:	b508      	push	{r3, lr}
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 8001372:	f7ff ffb5 	bl	80012e0 <spi_read_reg>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8001376:	2801      	cmp	r0, #1
}
 8001378:	bf14      	ite	ne
 800137a:	f06f 0005 	mvnne.w	r0, #5
 800137e:	2000      	moveq	r0, #0
 8001380:	bd08      	pop	{r3, pc}
 8001382:	bf00      	nop
	...

08001390 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 8001390:	b530      	push	{r4, r5, lr}
	static uint32 chipid = 0;

	if (chipid == 0) {
 8001392:	4d1f      	ldr	r5, [pc, #124]	; (8001410 <nmi_get_chipid+0x80>)
 8001394:	682c      	ldr	r4, [r5, #0]
{
 8001396:	b083      	sub	sp, #12
	if (chipid == 0) {
 8001398:	b114      	cbz	r4, 80013a0 <nmi_get_chipid+0x10>
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
}
 800139a:	4620      	mov	r0, r4
 800139c:	b003      	add	sp, #12
 800139e:	bd30      	pop	{r4, r5, pc}
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80013a0:	4629      	mov	r1, r5
 80013a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013a6:	f7ff ffe3 	bl	8001370 <nm_spi_read_reg_with_ret>
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 80013aa:	b110      	cbz	r0, 80013b2 <nmi_get_chipid+0x22>
			chipid = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	602b      	str	r3, [r5, #0]
			return 0;
 80013b0:	e7f3      	b.n	800139a <nmi_get_chipid+0xa>
 80013b2:	a901      	add	r1, sp, #4
 80013b4:	f241 30f4 	movw	r0, #5108	; 0x13f4
 80013b8:	f7ff ffda 	bl	8001370 <nm_spi_read_reg_with_ret>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 80013bc:	2800      	cmp	r0, #0
 80013be:	d1f5      	bne.n	80013ac <nmi_get_chipid+0x1c>
		if (chipid == 0x1002a0)  {
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <nmi_get_chipid+0x84>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d015      	beq.n	80013f4 <nmi_get_chipid+0x64>
		} else if(chipid == 0x1002b0) {
 80013c8:	4a13      	ldr	r2, [pc, #76]	; (8001418 <nmi_get_chipid+0x88>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d009      	beq.n	80013e2 <nmi_get_chipid+0x52>
		}else if(chipid == 0x1000F0) {
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <nmi_get_chipid+0x8c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d015      	beq.n	8001400 <nmi_get_chipid+0x70>
		chipid &= ~(0x0f0000);
 80013d4:	682c      	ldr	r4, [r5, #0]
 80013d6:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
		chipid |= 0x050000;
 80013da:	f444 24a0 	orr.w	r4, r4, #327680	; 0x50000
 80013de:	602c      	str	r4, [r5, #0]
	return chipid;
 80013e0:	e7db      	b.n	800139a <nmi_get_chipid+0xa>
			if(rfrevid == 3) { /* 1002B0 */
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d0f5      	beq.n	80013d4 <nmi_get_chipid+0x44>
			} else if(rfrevid == 4) { /* 1002B1 */
 80013e8:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
 80013ea:	bf0c      	ite	eq
 80013ec:	4b0c      	ldreq	r3, [pc, #48]	; (8001420 <nmi_get_chipid+0x90>)
				chipid = 0x1002b2;
 80013ee:	4b0d      	ldrne	r3, [pc, #52]	; (8001424 <nmi_get_chipid+0x94>)
 80013f0:	602b      	str	r3, [r5, #0]
 80013f2:	e7ef      	b.n	80013d4 <nmi_get_chipid+0x44>
			if (rfrevid == 0x1) { /* 1002A0 */
 80013f4:	9b01      	ldr	r3, [sp, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d0ec      	beq.n	80013d4 <nmi_get_chipid+0x44>
				chipid = 0x1002a1;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <nmi_get_chipid+0x98>)
 80013fc:	602b      	str	r3, [r5, #0]
 80013fe:	e7e9      	b.n	80013d4 <nmi_get_chipid+0x44>
 8001400:	4629      	mov	r1, r5
 8001402:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 8001406:	f7ff ffb3 	bl	8001370 <nm_spi_read_reg_with_ret>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800140a:	2800      	cmp	r0, #0
 800140c:	d0e2      	beq.n	80013d4 <nmi_get_chipid+0x44>
 800140e:	e7cd      	b.n	80013ac <nmi_get_chipid+0x1c>
 8001410:	20000b50 	.word	0x20000b50
 8001414:	001002a0 	.word	0x001002a0
 8001418:	001002b0 	.word	0x001002b0
 800141c:	001000f0 	.word	0x001000f0
 8001420:	001002b1 	.word	0x001002b1
 8001424:	001002b2 	.word	0x001002b2
 8001428:	001002a1 	.word	0x001002a1
 800142c:	00000000 	.word	0x00000000

08001430 <nm_spi_write>:
{
 8001430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001434:	b08b      	sub	sp, #44	; 0x2c
		if (!gu8Crc_off) {
 8001436:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8001574 <nm_spi_write+0x144>
{
 800143a:	9102      	str	r1, [sp, #8]
 800143c:	4683      	mov	fp, r0
 800143e:	4690      	mov	r8, r2
 8001440:	270a      	movs	r7, #10
 8001442:	e013      	b.n	800146c <nm_spi_write+0x3c>
 8001444:	200a      	movs	r0, #10
 8001446:	f7ff fceb 	bl	8000e20 <chThdSleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4619      	mov	r1, r3
 8001452:	20cf      	movs	r0, #207	; 0xcf
 8001454:	f7ff fe2c 	bl	80010b0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8001458:	20cf      	movs	r0, #207	; 0xcf
 800145a:	f7ff fdd9 	bl	8001010 <spi_cmd_rsp>
 800145e:	3f01      	subs	r7, #1
 8001460:	200a      	movs	r0, #10
 8001462:	f7ff fcdd 	bl	8000e20 <chThdSleep>
		if(retry) goto _RETRY_;
 8001466:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800146a:	d07c      	beq.n	8001566 <nm_spi_write+0x136>
	if (size == 1)
 800146c:	f1b8 0f01 	cmp.w	r8, #1
 8001470:	bf08      	it	eq
 8001472:	f04f 0802 	moveq.w	r8, #2
	result = spi_cmd(cmd, addr, 0, size,0);
 8001476:	2500      	movs	r5, #0
		size = 2;
 8001478:	4643      	mov	r3, r8
	result = spi_cmd(cmd, addr, 0, size,0);
 800147a:	9500      	str	r5, [sp, #0]
 800147c:	462a      	mov	r2, r5
 800147e:	4659      	mov	r1, fp
 8001480:	20c7      	movs	r0, #199	; 0xc7
 8001482:	f7ff fe15 	bl	80010b0 <spi_cmd>
	if (result != N_OK) {
 8001486:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, size,0);
 8001488:	4606      	mov	r6, r0
	if (result != N_OK) {
 800148a:	d1db      	bne.n	8001444 <nm_spi_write+0x14>
	result = spi_cmd_rsp(cmd);
 800148c:	20c7      	movs	r0, #199	; 0xc7
 800148e:	f7ff fdbf 	bl	8001010 <spi_cmd_rsp>
	if (result != N_OK) {
 8001492:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 8001494:	4606      	mov	r6, r0
	if (result != N_OK) {
 8001496:	d1d5      	bne.n	8001444 <nm_spi_write+0x14>
	spi.u16Sz = sz;
 8001498:	f8dd a008 	ldr.w	sl, [sp, #8]
	uint8 cmd, order, crc[2] = {0};
 800149c:	f8ad 5018 	strh.w	r5, [sp, #24]
	ix = 0;
 80014a0:	462c      	mov	r4, r5
	spi.u16Sz = sz;
 80014a2:	9003      	str	r0, [sp, #12]
 80014a4:	4646      	mov	r6, r8
 80014a6:	e026      	b.n	80014f6 <nm_spi_write+0xc6>
			if (sz <= DATA_PKT_SZ)
 80014a8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80014ac:	bf94      	ite	ls
 80014ae:	22f3      	movls	r2, #243	; 0xf3
 80014b0:	22f1      	movhi	r2, #241	; 0xf1
	spi.pu8InBuf = b;
 80014b2:	f10d 0317 	add.w	r3, sp, #23
 80014b6:	9307      	str	r3, [sp, #28]
	spi.pu8OutBuf = NULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	9308      	str	r3, [sp, #32]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80014bc:	a807      	add	r0, sp, #28
	spi.u16Sz = sz;
 80014be:	f04f 0301 	mov.w	r3, #1
		cmd |= order;
 80014c2:	f88d 2017 	strb.w	r2, [sp, #23]
	spi.u16Sz = sz;
 80014c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80014ca:	f7ff fd01 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
 80014ce:	4602      	mov	r2, r0
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 80014d0:	eb0a 0104 	add.w	r1, sl, r4
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80014d4:	a807      	add	r0, sp, #28
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 80014d6:	bb4a      	cbnz	r2, 800152c <nm_spi_write+0xfc>
	spi.pu8OutBuf = NULL;
 80014d8:	e9cd 1207 	strd	r1, r2, [sp, #28]
	spi.u16Sz = sz;
 80014dc:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80014e0:	f7ff fcf6 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 80014e4:	bb10      	cbnz	r0, 800152c <nm_spi_write+0xfc>
		if (!gu8Crc_off) {
 80014e6:	f899 2000 	ldrb.w	r2, [r9]
 80014ea:	b19a      	cbz	r2, 8001514 <nm_spi_write+0xe4>
		sz -= nbytes;
 80014ec:	1b73      	subs	r3, r6, r5
		ix += nbytes;
 80014ee:	442c      	add	r4, r5
		sz -= nbytes;
 80014f0:	b29e      	uxth	r6, r3
		ix += nbytes;
 80014f2:	b224      	sxth	r4, r4
	} while (sz);
 80014f4:	b1e6      	cbz	r6, 8001530 <nm_spi_write+0x100>
			if (sz <= DATA_PKT_SZ)
 80014f6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80014fa:	4635      	mov	r5, r6
 80014fc:	bf28      	it	cs
 80014fe:	f44f 5500 	movcs.w	r5, #8192	; 0x2000
 8001502:	b2ad      	uxth	r5, r5
		if (ix == 0)  {
 8001504:	2c00      	cmp	r4, #0
 8001506:	d0cf      	beq.n	80014a8 <nm_spi_write+0x78>
			if (sz <= DATA_PKT_SZ)
 8001508:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800150c:	bf94      	ite	ls
 800150e:	22f3      	movls	r2, #243	; 0xf3
 8001510:	22f2      	movhi	r2, #242	; 0xf2
 8001512:	e7ce      	b.n	80014b2 <nm_spi_write+0x82>
	spi.pu8InBuf = b;
 8001514:	a906      	add	r1, sp, #24
	spi.u16Sz = sz;
 8001516:	f04f 0302 	mov.w	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800151a:	a807      	add	r0, sp, #28
	spi.pu8OutBuf = NULL;
 800151c:	9208      	str	r2, [sp, #32]
	spi.u16Sz = sz;
 800151e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	spi.pu8InBuf = b;
 8001522:	9107      	str	r1, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001524:	f7ff fcd4 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 8001528:	2800      	cmp	r0, #0
 800152a:	d0df      	beq.n	80014ec <nm_spi_write+0xbc>
	if (result != N_OK) {
 800152c:	2600      	movs	r6, #0
 800152e:	e789      	b.n	8001444 <nm_spi_write+0x14>
    if (!gu8Crc_off)
 8001530:	f899 3000 	ldrb.w	r3, [r9]
 8001534:	9e03      	ldr	r6, [sp, #12]
 8001536:	b1d3      	cbz	r3, 800156e <nm_spi_write+0x13e>
 8001538:	2303      	movs	r3, #3
		len = 3;
 800153a:	461c      	mov	r4, r3
	spi.pu8InBuf = NULL;
 800153c:	2200      	movs	r2, #0
	spi.u16Sz = sz;
 800153e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001542:	a807      	add	r0, sp, #28
	spi.pu8OutBuf = b;
 8001544:	ab06      	add	r3, sp, #24
 8001546:	e9cd 2307 	strd	r2, r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800154a:	f7ff fcc1 	bl	8000ed0 <nm_bus_ioctl.constprop.0>
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 800154e:	2800      	cmp	r0, #0
 8001550:	d1ec      	bne.n	800152c <nm_spi_write+0xfc>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 8001552:	ab0a      	add	r3, sp, #40	; 0x28
 8001554:	4423      	add	r3, r4
 8001556:	f813 2c11 	ldrb.w	r2, [r3, #-17]
 800155a:	2a00      	cmp	r2, #0
 800155c:	d1e6      	bne.n	800152c <nm_spi_write+0xfc>
 800155e:	f813 3c12 	ldrb.w	r3, [r3, #-18]
 8001562:	2bc3      	cmp	r3, #195	; 0xc3
 8001564:	d1e2      	bne.n	800152c <nm_spi_write+0xfc>
}
 8001566:	4630      	mov	r0, r6
 8001568:	b00b      	add	sp, #44	; 0x2c
 800156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!gu8Crc_off)
 800156e:	2302      	movs	r3, #2
		len = 2;
 8001570:	461c      	mov	r4, r3
 8001572:	e7e3      	b.n	800153c <nm_spi_write+0x10c>
 8001574:	20000c21 	.word	0x20000c21
	...

08001580 <nm_write_block>:
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8001580:	2af8      	cmp	r2, #248	; 0xf8
{
 8001582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001586:	4616      	mov	r6, r2
 8001588:	4605      	mov	r5, r0
 800158a:	4688      	mov	r8, r1
		if(u32Sz <= u16MaxTrxSz)
 800158c:	4614      	mov	r4, r2
 800158e:	bf88      	it	hi
 8001590:	188f      	addhi	r7, r1, r2
 8001592:	d90e      	bls.n	80015b2 <nm_write_block+0x32>
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 8001594:	1b39      	subs	r1, r7, r4
 8001596:	4628      	mov	r0, r5
 8001598:	22f8      	movs	r2, #248	; 0xf8
 800159a:	f7ff ff49 	bl	8001430 <nm_spi_write>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
 800159e:	3cf8      	subs	r4, #248	; 0xf8

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80015a0:	2801      	cmp	r0, #1
 80015a2:	eba6 0304 	sub.w	r3, r6, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
 80015a6:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
 80015aa:	d10d      	bne.n	80015c8 <nm_write_block+0x48>
		if(u32Sz <= u16MaxTrxSz)
 80015ac:	2cf8      	cmp	r4, #248	; 0xf8
 80015ae:	d8f1      	bhi.n	8001594 <nm_write_block+0x14>
 80015b0:	4498      	add	r8, r3
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 80015b2:	b2a2      	uxth	r2, r4
 80015b4:	4641      	mov	r1, r8
 80015b6:	4628      	mov	r0, r5
 80015b8:	f7ff ff3a 	bl	8001430 <nm_spi_write>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80015bc:	2801      	cmp	r0, #1
 80015be:	bf08      	it	eq
 80015c0:	2000      	moveq	r0, #0
 80015c2:	d101      	bne.n	80015c8 <nm_write_block+0x48>
		}
	}

	return s8Ret;
}
 80015c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 80015c8:	f06f 0005 	mvn.w	r0, #5
 80015cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015d0 <spi_write_reg>:
{
 80015d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015d4:	2830      	cmp	r0, #48	; 0x30
 80015d6:	b082      	sub	sp, #8
 80015d8:	4606      	mov	r6, r0
 80015da:	4688      	mov	r8, r1
 80015dc:	bf95      	itete	ls
 80015de:	27c3      	movls	r7, #195	; 0xc3
 80015e0:	27c9      	movhi	r7, #201	; 0xc9
 80015e2:	f04f 0901 	movls.w	r9, #1
 80015e6:	f04f 0900 	movhi.w	r9, #0
 80015ea:	250a      	movs	r5, #10
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 80015ec:	f04f 0a00 	mov.w	sl, #0
 80015f0:	e014      	b.n	800161c <spi_write_reg+0x4c>
 80015f2:	200a      	movs	r0, #10
 80015f4:	f7ff fc14 	bl	8000e20 <chThdSleep>
 80015f8:	2300      	movs	r3, #0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	f8cd a000 	str.w	sl, [sp]
 8001602:	20cf      	movs	r0, #207	; 0xcf
 8001604:	f7ff fd54 	bl	80010b0 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8001608:	20cf      	movs	r0, #207	; 0xcf
 800160a:	f7ff fd01 	bl	8001010 <spi_cmd_rsp>
 800160e:	3d01      	subs	r5, #1
 8001610:	200a      	movs	r0, #10
 8001612:	f7ff fc05 	bl	8000e20 <chThdSleep>
		if(retry) goto _RETRY_;
 8001616:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800161a:	d010      	beq.n	800163e <spi_write_reg+0x6e>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800161c:	f8cd 9000 	str.w	r9, [sp]
 8001620:	2304      	movs	r3, #4
 8001622:	4642      	mov	r2, r8
 8001624:	4631      	mov	r1, r6
 8001626:	4638      	mov	r0, r7
 8001628:	f7ff fd42 	bl	80010b0 <spi_cmd>
	if (result != N_OK) {
 800162c:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800162e:	4604      	mov	r4, r0
	if (result != N_OK) {
 8001630:	d1df      	bne.n	80015f2 <spi_write_reg+0x22>
	result = spi_cmd_rsp(cmd);
 8001632:	4638      	mov	r0, r7
 8001634:	f7ff fcec 	bl	8001010 <spi_cmd_rsp>
	if(result != N_OK)
 8001638:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 800163a:	4604      	mov	r4, r0
	if(result != N_OK)
 800163c:	d1d9      	bne.n	80015f2 <spi_write_reg+0x22>
}
 800163e:	4620      	mov	r0, r4
 8001640:	b002      	add	sp, #8
 8001642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001646:	bf00      	nop
	...

08001650 <nm_spi_write_reg>:
{
 8001650:	b508      	push	{r3, lr}
	s8Ret = spi_write_reg(u32Addr, u32Val);
 8001652:	f7ff ffbd 	bl	80015d0 <spi_write_reg>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8001656:	2801      	cmp	r0, #1
}
 8001658:	bf14      	ite	ne
 800165a:	f06f 0005 	mvnne.w	r0, #5
 800165e:	2000      	moveq	r0, #0
 8001660:	bd08      	pop	{r3, pc}
 8001662:	bf00      	nop
	...

08001670 <nm_write_reg>:
	return nm_spi_write_reg(u32Addr,u32Val);
 8001670:	f7ff bfee 	b.w	8001650 <nm_spi_write_reg>
	...

08001680 <chip_apply_conf>:
{
 8001680:	b530      	push	{r4, r5, lr}
	val32 |= rHAVE_RESERVED1_BIT;
 8001682:	f440 7480 	orr.w	r4, r0, #256	; 0x100
{
 8001686:	b083      	sub	sp, #12
			uint32 reg = 0;
 8001688:	2500      	movs	r5, #0
		nm_write_reg(rNMI_GP_REG_1, val32);
 800168a:	4621      	mov	r1, r4
 800168c:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8001690:	f7ff ffee 	bl	8001670 <nm_write_reg>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8001694:	a901      	add	r1, sp, #4
 8001696:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
			uint32 reg = 0;
 800169a:	9501      	str	r5, [sp, #4]
 800169c:	f7ff fe68 	bl	8001370 <nm_spi_read_reg_with_ret>
			if(ret == M2M_SUCCESS) {
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d1f2      	bne.n	800168a <chip_apply_conf+0xa>
				if(reg == val32)
 80016a4:	9b01      	ldr	r3, [sp, #4]
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	d1ef      	bne.n	800168a <chip_apply_conf+0xa>
}
 80016aa:	b003      	add	sp, #12
 80016ac:	bd30      	pop	{r4, r5, pc}
 80016ae:	bf00      	nop

080016b0 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <hif_chip_sleep+0x84>)
 80016b2:	785a      	ldrb	r2, [r3, #1]
 80016b4:	b11a      	cbz	r2, 80016be <hif_chip_sleep+0xe>
	{
		gstrHifCxt.u8ChipSleep--;
 80016b6:	785a      	ldrb	r2, [r3, #1]
 80016b8:	3a01      	subs	r2, #1
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 80016be:	785a      	ldrb	r2, [r3, #1]
 80016c0:	b922      	cbnz	r2, 80016cc <hif_chip_sleep+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80016c8:	b913      	cbnz	r3, 80016d0 <hif_chip_sleep+0x20>
		{
		}
	}
ERR1:
	return ret;
}
 80016ca:	4770      	bx	lr
	sint8 ret = M2M_SUCCESS;
 80016cc:	2000      	movs	r0, #0
 80016ce:	4770      	bx	lr
{
 80016d0:	b500      	push	{lr}
 80016d2:	b083      	sub	sp, #12
 80016d4:	e002      	b.n	80016dc <hif_chip_sleep+0x2c>

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	07d9      	lsls	r1, r3, #31
 80016da:	d508      	bpl.n	80016ee <hif_chip_sleep+0x3e>
 80016dc:	a901      	add	r1, sp, #4
 80016de:	2010      	movs	r0, #16
 80016e0:	f7ff fe46 	bl	8001370 <nm_spi_read_reg_with_ret>
		if(ret != M2M_SUCCESS) goto ERR1;
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d0f6      	beq.n	80016d6 <hif_chip_sleep+0x26>
}
 80016e8:	b003      	add	sp, #12
 80016ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ee:	a901      	add	r1, sp, #4
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff fe3d 	bl	8001370 <nm_spi_read_reg_with_ret>
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d1f6      	bne.n	80016e8 <hif_chip_sleep+0x38>
	if(reg & NBIT1)
 80016fa:	9901      	ldr	r1, [sp, #4]
 80016fc:	078a      	lsls	r2, r1, #30
 80016fe:	d40f      	bmi.n	8001720 <hif_chip_sleep+0x70>
 8001700:	a901      	add	r1, sp, #4
 8001702:	200b      	movs	r0, #11
 8001704:	f7ff fe34 	bl	8001370 <nm_spi_read_reg_with_ret>
		ret = nm_write_reg(WAKE_CLK_REG, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
 8001708:	2800      	cmp	r0, #0
 800170a:	d1ed      	bne.n	80016e8 <hif_chip_sleep+0x38>
	if(reg & NBIT0)
 800170c:	9901      	ldr	r1, [sp, #4]
 800170e:	07cb      	lsls	r3, r1, #31
 8001710:	d5ea      	bpl.n	80016e8 <hif_chip_sleep+0x38>
	{
		reg &= ~NBIT0;
 8001712:	f021 0101 	bic.w	r1, r1, #1
	return nm_spi_write_reg(u32Addr,u32Val);
 8001716:	200b      	movs	r0, #11
 8001718:	9101      	str	r1, [sp, #4]
 800171a:	f7ff ff99 	bl	8001650 <nm_spi_write_reg>
	return ret;
 800171e:	e7e3      	b.n	80016e8 <hif_chip_sleep+0x38>
		reg &=~NBIT1;
 8001720:	f021 0102 	bic.w	r1, r1, #2
 8001724:	2001      	movs	r0, #1
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	f7ff ff92 	bl	8001650 <nm_spi_write_reg>
		if(ret != M2M_SUCCESS)goto ERR1;
 800172c:	2800      	cmp	r0, #0
 800172e:	d0e7      	beq.n	8001700 <hif_chip_sleep+0x50>
 8001730:	e7da      	b.n	80016e8 <hif_chip_sleep+0x38>
 8001732:	bf00      	nop
 8001734:	20000bf8 	.word	0x20000bf8
	...

08001740 <hif_send.constprop.0>:
*				Packet buffer Allocated by the caller.
*	@param [in]	u16DataSize
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 8001740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001744:	b088      	sub	sp, #32
 8001746:	4604      	mov	r4, r0
	sint8	ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
	strHif.u8Gid		= u8Gid;
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8001748:	2308      	movs	r3, #8
	strHif.u8Gid		= u8Gid;
 800174a:	2001      	movs	r0, #1
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 800174c:	f88d 4011 	strb.w	r4, [sp, #17]
	strHif.u8Gid		= u8Gid;
 8001750:	f88d 0010 	strb.w	r0, [sp, #16]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 8001754:	f8ad 3012 	strh.w	r3, [sp, #18]
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 8001758:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	if(gstrHifCxt.u8HifRXDone)
 800175c:	4d81      	ldr	r5, [pc, #516]	; (8001964 <hif_send.constprop.0+0x224>)
		strHif.u16Length += u16CtrlBufSize;
 800175e:	fa12 f383 	uxtah	r3, r2, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	f8ad 3012 	strh.w	r3, [sp, #18]
	if(gstrHifCxt.u8HifRXDone)
 8001768:	78ab      	ldrb	r3, [r5, #2]
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 800176a:	4616      	mov	r6, r2
 800176c:	460f      	mov	r7, r1
	if(gstrHifCxt.u8HifRXDone)
 800176e:	b963      	cbnz	r3, 800178a <hif_send.constprop.0+0x4a>
	if(gstrHifCxt.u8ChipSleep == 0)
 8001770:	786b      	ldrb	r3, [r5, #1]
 8001772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001776:	2b00      	cmp	r3, #0
 8001778:	d164      	bne.n	8001844 <hif_send.constprop.0+0x104>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 800177a:	782b      	ldrb	r3, [r5, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 80a0 	bne.w	80018c2 <hif_send.constprop.0+0x182>
	gstrHifCxt.u8ChipSleep++;
 8001782:	786b      	ldrb	r3, [r5, #1]
 8001784:	3301      	adds	r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	706b      	strb	r3, [r5, #1]
	}
	ret = hif_chip_wake();
	if(ret == M2M_SUCCESS)
	{
		volatile uint32 reg, dma_addr = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	9306      	str	r3, [sp, #24]
		volatile uint16 cnt = 0;
 800178e:	f8ad 300e 	strh.w	r3, [sp, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8001792:	9305      	str	r3, [sp, #20]
        temp = (uint16)strHif.u16Length;
 8001794:	f8bd 1012 	ldrh.w	r1, [sp, #18]
		reg |= (uint32)u8Gid;
 8001798:	9a05      	ldr	r2, [sp, #20]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	9205      	str	r2, [sp, #20]
		reg |= ((uint32)u8Opcode<<8);
 80017a0:	9805      	ldr	r0, [sp, #20]
 80017a2:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 80017a6:	9405      	str	r4, [sp, #20]
		reg |= ((uint32)temp<<16);
 80017a8:	9b05      	ldr	r3, [sp, #20]
 80017aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80017ae:	9305      	str	r3, [sp, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 80017b0:	9905      	ldr	r1, [sp, #20]
 80017b2:	f241 008c 	movw	r0, #4236	; 0x108c
 80017b6:	f7ff ff4b 	bl	8001650 <nm_spi_write_reg>
 80017ba:	4603      	mov	r3, r0
		if(M2M_SUCCESS != ret) goto ERR1;
 80017bc:	b148      	cbz	r0, 80017d2 <hif_send.constprop.0+0x92>
	if(gstrHifCxt.u8ChipSleep >= 1)
 80017be:	786a      	ldrb	r2, [r5, #1]
 80017c0:	b11a      	cbz	r2, 80017ca <hif_send.constprop.0+0x8a>
		gstrHifCxt.u8ChipSleep--;
 80017c2:	786a      	ldrb	r2, [r5, #1]
 80017c4:	3a01      	subs	r2, #1
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	706a      	strb	r2, [r5, #1]
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	b008      	add	sp, #32
 80017ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reg = 0UL;
 80017d2:	9005      	str	r0, [sp, #20]
		reg |= NBIT1;
 80017d4:	9b05      	ldr	r3, [sp, #20]
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	9305      	str	r3, [sp, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 80017dc:	9905      	ldr	r1, [sp, #20]
 80017de:	f241 0078 	movw	r0, #4216	; 0x1078
 80017e2:	f7ff ff35 	bl	8001650 <nm_spi_write_reg>
 80017e6:	4603      	mov	r3, r0
		if(M2M_SUCCESS != ret) goto ERR1;
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d1e8      	bne.n	80017be <hif_send.constprop.0+0x7e>
		dma_addr = 0;
 80017ec:	9006      	str	r0, [sp, #24]
		for(cnt = 0; cnt < 1000; cnt ++)
 80017ee:	f8ad 000e 	strh.w	r0, [sp, #14]
 80017f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fc:	d310      	bcc.n	8001820 <hif_send.constprop.0+0xe0>
 80017fe:	e02d      	b.n	800185c <hif_send.constprop.0+0x11c>
			if (!(reg & NBIT1))
 8001800:	9c05      	ldr	r4, [sp, #20]
 8001802:	f014 0402 	ands.w	r4, r4, #2
 8001806:	d022      	beq.n	800184e <hif_send.constprop.0+0x10e>
		for(cnt = 0; cnt < 1000; cnt ++)
 8001808:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800180c:	3301      	adds	r3, #1
 800180e:	b29b      	uxth	r3, r3
 8001810:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001814:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181e:	d21d      	bcs.n	800185c <hif_send.constprop.0+0x11c>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8001820:	a905      	add	r1, sp, #20
 8001822:	f241 0078 	movw	r0, #4216	; 0x1078
 8001826:	f7ff fda3 	bl	8001370 <nm_spi_read_reg_with_ret>
			if(ret != M2M_SUCCESS) break;
 800182a:	b9b8      	cbnz	r0, 800185c <hif_send.constprop.0+0x11c>
			if(cnt >= 500) {
 800182c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001830:	b29b      	uxth	r3, r3
 8001832:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001836:	d3e3      	bcc.n	8001800 <hif_send.constprop.0+0xc0>
 8001838:	200a      	movs	r0, #10
				if(cnt < 501) {
 800183a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800183e:	f7ff faef 	bl	8000e20 <chThdSleep>
 8001842:	e7dd      	b.n	8001800 <hif_send.constprop.0+0xc0>
	gstrHifCxt.u8ChipSleep++;
 8001844:	786b      	ldrb	r3, [r5, #1]
 8001846:	4403      	add	r3, r0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	706b      	strb	r3, [r5, #1]
 800184c:	e79d      	b.n	800178a <hif_send.constprop.0+0x4a>
 800184e:	4846      	ldr	r0, [pc, #280]	; (8001968 <hif_send.constprop.0+0x228>)
 8001850:	a906      	add	r1, sp, #24
 8001852:	f7ff fd8d 	bl	8001370 <nm_spi_read_reg_with_ret>
				if(ret != M2M_SUCCESS) {
 8001856:	4603      	mov	r3, r0
 8001858:	2800      	cmp	r0, #0
 800185a:	d169      	bne.n	8001930 <hif_send.constprop.0+0x1f0>
		if (dma_addr != 0)
 800185c:	9b06      	ldr	r3, [sp, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d07b      	beq.n	800195a <hif_send.constprop.0+0x21a>
			u32CurrAddr = dma_addr;
 8001862:	9b06      	ldr	r3, [sp, #24]
 8001864:	9307      	str	r3, [sp, #28]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8001866:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800186a:	b29b      	uxth	r3, r3
 800186c:	f8ad 3012 	strh.w	r3, [sp, #18]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 8001870:	9807      	ldr	r0, [sp, #28]
 8001872:	2208      	movs	r2, #8
 8001874:	a904      	add	r1, sp, #16
 8001876:	f7ff fe83 	bl	8001580 <nm_write_block>
			if(M2M_SUCCESS != ret) goto ERR1;
 800187a:	4603      	mov	r3, r0
 800187c:	2800      	cmp	r0, #0
 800187e:	d19e      	bne.n	80017be <hif_send.constprop.0+0x7e>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8001880:	9b07      	ldr	r3, [sp, #28]
 8001882:	3308      	adds	r3, #8
 8001884:	9307      	str	r3, [sp, #28]
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8001886:	9807      	ldr	r0, [sp, #28]
 8001888:	4639      	mov	r1, r7
 800188a:	4632      	mov	r2, r6
 800188c:	f7ff fe78 	bl	8001580 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
 8001890:	4603      	mov	r3, r0
 8001892:	2800      	cmp	r0, #0
 8001894:	d193      	bne.n	80017be <hif_send.constprop.0+0x7e>
				u32CurrAddr += u16CtrlBufSize;
 8001896:	9b07      	ldr	r3, [sp, #28]
 8001898:	441e      	add	r6, r3
 800189a:	9607      	str	r6, [sp, #28]
			reg = dma_addr << 2;
 800189c:	9b06      	ldr	r3, [sp, #24]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	9305      	str	r3, [sp, #20]
			reg |= NBIT1;
 80018a2:	9b05      	ldr	r3, [sp, #20]
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	9305      	str	r3, [sp, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 80018aa:	9905      	ldr	r1, [sp, #20]
	return nm_spi_write_reg(u32Addr,u32Val);
 80018ac:	f241 006c 	movw	r0, #4204	; 0x106c
 80018b0:	f7ff fece 	bl	8001650 <nm_spi_write_reg>
			if(M2M_SUCCESS != ret) goto ERR1;
 80018b4:	4603      	mov	r3, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d181      	bne.n	80017be <hif_send.constprop.0+0x7e>
 	ret = hif_chip_sleep();
 80018ba:	f7ff fef9 	bl	80016b0 <hif_chip_sleep>
 80018be:	4603      	mov	r3, r0
 80018c0:	e783      	b.n	80017ca <hif_send.constprop.0+0x8a>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80018c2:	a906      	add	r1, sp, #24
 80018c4:	200b      	movs	r0, #11
	return ret;
}
sint8 chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 80018c6:	e9cd 2206 	strd	r2, r2, [sp, #24]
 80018ca:	f7ff fd51 	bl	8001370 <nm_spi_read_reg_with_ret>

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 80018ce:	4603      	mov	r3, r0
 80018d0:	2800      	cmp	r0, #0
 80018d2:	f47f af7a 	bne.w	80017ca <hif_send.constprop.0+0x8a>

	if(!(reg & NBIT0))
 80018d6:	9906      	ldr	r1, [sp, #24]
 80018d8:	07cb      	lsls	r3, r1, #31
 80018da:	d408      	bmi.n	80018ee <hif_send.constprop.0+0x1ae>
	return nm_spi_write_reg(u32Addr,u32Val);
 80018dc:	f041 0101 	orr.w	r1, r1, #1
 80018e0:	200b      	movs	r0, #11
 80018e2:	f7ff feb5 	bl	8001650 <nm_spi_write_reg>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 80018e6:	4603      	mov	r3, r0
 80018e8:	2800      	cmp	r0, #0
 80018ea:	f47f af6e 	bne.w	80017ca <hif_send.constprop.0+0x8a>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80018ee:	a906      	add	r1, sp, #24
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff fd3d 	bl	8001370 <nm_spi_read_reg_with_ret>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 80018f6:	4603      	mov	r3, r0
 80018f8:	2800      	cmp	r0, #0
 80018fa:	f47f af66 	bne.w	80017ca <hif_send.constprop.0+0x8a>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 80018fe:	9906      	ldr	r1, [sp, #24]
 8001900:	0788      	lsls	r0, r1, #30
 8001902:	d521      	bpl.n	8001948 <hif_send.constprop.0+0x208>
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 8001904:	f04f 0805 	mov.w	r8, #5
 8001908:	a907      	add	r1, sp, #28
 800190a:	200f      	movs	r0, #15
 800190c:	f7ff fd30 	bl	8001370 <nm_spi_read_reg_with_ret>
 8001910:	4603      	mov	r3, r0
 8001912:	2014      	movs	r0, #20
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
		if(ret != M2M_SUCCESS) {
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f af58 	bne.w	80017ca <hif_send.constprop.0+0x8a>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800191a:	9a07      	ldr	r2, [sp, #28]
 800191c:	0752      	lsls	r2, r2, #29
 800191e:	d409      	bmi.n	8001934 <hif_send.constprop.0+0x1f4>
 8001920:	f7ff fa7e 	bl	8000e20 <chThdSleep>
			break;
		}
		nm_bsp_sleep(2);
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
 8001924:	f1b8 0801 	subs.w	r8, r8, #1
 8001928:	d1ee      	bne.n	8001908 <hif_send.constprop.0+0x1c8>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 800192a:	f06f 0303 	mvn.w	r3, #3
 800192e:	e74c      	b.n	80017ca <hif_send.constprop.0+0x8a>
					dma_addr = 0;
 8001930:	9406      	str	r4, [sp, #24]
 8001932:	e744      	b.n	80017be <hif_send.constprop.0+0x7e>
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4619      	mov	r1, r3
 800193a:	20cf      	movs	r0, #207	; 0xcf
 800193c:	f7ff fbb8 	bl	80010b0 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 8001940:	20cf      	movs	r0, #207	; 0xcf
 8001942:	f7ff fb65 	bl	8001010 <spi_cmd_rsp>
 8001946:	e71c      	b.n	8001782 <hif_send.constprop.0+0x42>
	return nm_spi_write_reg(u32Addr,u32Val);
 8001948:	f041 0102 	orr.w	r1, r1, #2
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fe7f 	bl	8001650 <nm_spi_write_reg>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 8001952:	4603      	mov	r3, r0
 8001954:	2800      	cmp	r0, #0
 8001956:	d0d5      	beq.n	8001904 <hif_send.constprop.0+0x1c4>
 8001958:	e737      	b.n	80017ca <hif_send.constprop.0+0x8a>
			ret = hif_chip_sleep();
 800195a:	f7ff fea9 	bl	80016b0 <hif_chip_sleep>
			ret = M2M_ERR_MEM_ALLOC;
 800195e:	f06f 0302 	mvn.w	r3, #2
 8001962:	e732      	b.n	80017ca <hif_send.constprop.0+0x8a>
 8001964:	20000bf8 	.word	0x20000bf8
 8001968:	00150400 	.word	0x00150400
 800196c:	00000000 	.word	0x00000000

08001970 <m2m_wifi_request_scan.constprop.0>:
	tstrM2MScanRegion strScanRegion;
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
 8001970:	b510      	push	{r4, lr}
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
 8001972:	4c0a      	ldr	r4, [pc, #40]	; (800199c <m2m_wifi_request_scan.constprop.0+0x2c>)
 8001974:	7823      	ldrb	r3, [r4, #0]
sint8 m2m_wifi_request_scan(uint8 ch)
 8001976:	b082      	sub	sp, #8
	if(!gu8scanInProgress)
 8001978:	b96b      	cbnz	r3, 8001996 <m2m_wifi_request_scan.constprop.0+0x26>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 800197a:	2204      	movs	r2, #4
			strtmp.u8ChNum = ch;
 800197c:	23ff      	movs	r3, #255	; 0xff
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 800197e:	eb0d 0102 	add.w	r1, sp, r2
 8001982:	2010      	movs	r0, #16
			strtmp.u8ChNum = ch;
 8001984:	f88d 3004 	strb.w	r3, [sp, #4]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 8001988:	f7ff feda 	bl	8001740 <hif_send.constprop.0>
			if(s8Ret == M2M_SUCCESS)
 800198c:	b908      	cbnz	r0, 8001992 <m2m_wifi_request_scan.constprop.0+0x22>
			{
				gu8scanInProgress = 1;
 800198e:	2301      	movs	r3, #1
 8001990:	7023      	strb	r3, [r4, #0]
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
 8001992:	b002      	add	sp, #8
 8001994:	bd10      	pop	{r4, pc}
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 8001996:	f06f 000d 	mvn.w	r0, #13
 800199a:	e7fa      	b.n	8001992 <m2m_wifi_request_scan.constprop.0+0x22>
 800199c:	20000c22 	.word	0x20000c22

080019a0 <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request,
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 80019a0:	b500      	push	{lr}
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 80019a2:	2204      	movs	r2, #4
{
 80019a4:	b083      	sub	sp, #12
 80019a6:	4603      	mov	r3, r0
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 80019a8:	eb0d 0102 	add.w	r1, sp, r2
 80019ac:	2012      	movs	r0, #18
	strReqScanRlt.u8Index = index;
 80019ae:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 80019b2:	f7ff fec5 	bl	8001740 <hif_send.constprop.0>
	return ret;
}
 80019b6:	b003      	add	sp, #12
 80019b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019bc:	0000      	movs	r0, r0
	...

080019c0 <hif_set_rx_done>:
{
 80019c0:	b500      	push	{lr}
	gstrHifCxt.u8HifRXDone = 0;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <hif_set_rx_done+0x30>)
{
 80019c4:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
 80019c6:	2200      	movs	r2, #0
 80019c8:	709a      	strb	r2, [r3, #2]
	if (1 == u8Enable)
 80019ca:	f7fe fe59 	bl	8000680 <nm_bsp_interrupt_ctrl.part.0>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80019ce:	a901      	add	r1, sp, #4
 80019d0:	f241 0070 	movw	r0, #4208	; 0x1070
 80019d4:	f7ff fccc 	bl	8001370 <nm_spi_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
 80019d8:	b938      	cbnz	r0, 80019ea <hif_set_rx_done+0x2a>
	reg |= NBIT1;
 80019da:	9901      	ldr	r1, [sp, #4]
	return nm_spi_write_reg(u32Addr,u32Val);
 80019dc:	f241 0070 	movw	r0, #4208	; 0x1070
 80019e0:	f041 0102 	orr.w	r1, r1, #2
 80019e4:	9101      	str	r1, [sp, #4]
 80019e6:	f7ff fe33 	bl	8001650 <nm_spi_write_reg>
}
 80019ea:	b003      	add	sp, #12
 80019ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f0:	20000bf8 	.word	0x20000bf8
	...

08001a00 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	461e      	mov	r6, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 8001a04:	b1e8      	cbz	r0, 8001a42 <hif_receive+0x42>
 8001a06:	b1e1      	cbz	r1, 8001a42 <hif_receive+0x42>
 8001a08:	b1da      	cbz	r2, 8001a42 <hif_receive+0x42>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 8001a0a:	4f10      	ldr	r7, [pc, #64]	; (8001a4c <hif_receive+0x4c>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d819      	bhi.n	8001a46 <hif_receive+0x46>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4298      	cmp	r0, r3
 8001a16:	4604      	mov	r4, r0
 8001a18:	d315      	bcc.n	8001a46 <hif_receive+0x46>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001a20:	4414      	add	r4, r2
 8001a22:	4463      	add	r3, ip
 8001a24:	429c      	cmp	r4, r3
 8001a26:	d80e      	bhi.n	8001a46 <hif_receive+0x46>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8001a28:	f7ff fc32 	bl	8001290 <nm_read_block>
	if(ret != M2M_SUCCESS)goto ERR1;
 8001a2c:	b968      	cbnz	r0, 8001a4a <hif_receive+0x4a>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	4413      	add	r3, r2
 8001a34:	429c      	cmp	r4, r3
 8001a36:	d000      	beq.n	8001a3a <hif_receive+0x3a>
 8001a38:	b13e      	cbz	r6, 8001a4a <hif_receive+0x4a>
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
 8001a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = hif_set_rx_done();
 8001a3e:	f7ff bfbf 	b.w	80019c0 <hif_set_rx_done>
		if(isDone)
 8001a42:	2e00      	cmp	r6, #0
 8001a44:	d1f9      	bne.n	8001a3a <hif_receive+0x3a>
			ret = M2M_ERR_FAIL;
 8001a46:	f06f 000b 	mvn.w	r0, #11
}
 8001a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a4c:	20000bf8 	.word	0x20000bf8

08001a50 <m2m_wifi_cb>:
{
 8001a50:	b530      	push	{r4, r5, lr}
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8001a52:	282c      	cmp	r0, #44	; 0x2c
{
 8001a54:	b09b      	sub	sp, #108	; 0x6c
 8001a56:	4604      	mov	r4, r0
 8001a58:	4615      	mov	r5, r2
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8001a5a:	d034      	beq.n	8001ac6 <m2m_wifi_cb+0x76>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 8001a5c:	281b      	cmp	r0, #27
 8001a5e:	d03c      	beq.n	8001ada <m2m_wifi_cb+0x8a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 8001a60:	2806      	cmp	r0, #6
 8001a62:	d043      	beq.n	8001aec <m2m_wifi_cb+0x9c>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 8001a64:	280e      	cmp	r0, #14
 8001a66:	d02c      	beq.n	8001ac2 <m2m_wifi_cb+0x72>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 8001a68:	2832      	cmp	r0, #50	; 0x32
 8001a6a:	d048      	beq.n	8001afe <m2m_wifi_cb+0xae>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 8001a6c:	282f      	cmp	r0, #47	; 0x2f
 8001a6e:	d04f      	beq.n	8001b10 <m2m_wifi_cb+0xc0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 8001a70:	2834      	cmp	r0, #52	; 0x34
 8001a72:	d065      	beq.n	8001b40 <m2m_wifi_cb+0xf0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 8001a74:	2811      	cmp	r0, #17
 8001a76:	d07d      	beq.n	8001b74 <m2m_wifi_cb+0x124>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 8001a78:	2813      	cmp	r0, #19
 8001a7a:	f000 8092 	beq.w	8001ba2 <m2m_wifi_cb+0x152>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 8001a7e:	2804      	cmp	r0, #4
 8001a80:	f000 80a0 	beq.w	8001bc4 <m2m_wifi_cb+0x174>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 8001a84:	2865      	cmp	r0, #101	; 0x65
 8001a86:	d01e      	beq.n	8001ac6 <m2m_wifi_cb+0x76>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 8001a88:	2809      	cmp	r0, #9
 8001a8a:	f000 80ad 	beq.w	8001be8 <m2m_wifi_cb+0x198>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 8001a8e:	282a      	cmp	r0, #42	; 0x2a
 8001a90:	d067      	beq.n	8001b62 <m2m_wifi_cb+0x112>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 8001a92:	2820      	cmp	r0, #32
 8001a94:	d115      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 8001a96:	a901      	add	r1, sp, #4
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff ffaf 	bl	8001a00 <hif_receive>
 8001aa2:	b970      	cbnz	r0, 8001ac2 <m2m_wifi_cb+0x72>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 8001aa4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001aa8:	9901      	ldr	r1, [sp, #4]
 8001aaa:	f105 0008 	add.w	r0, r5, #8
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f7ff ffa6 	bl	8001a00 <hif_receive>
 8001ab4:	b928      	cbnz	r0, 8001ac2 <m2m_wifi_cb+0x72>
				if(gpfAppWifiCb)
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <m2m_wifi_cb+0x1ac>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b113      	cbz	r3, 8001ac2 <m2m_wifi_cb+0x72>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4798      	blx	r3
}
 8001ac2:	b01b      	add	sp, #108	; 0x6c
 8001ac4:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	a901      	add	r1, sp, #4
 8001aca:	2300      	movs	r3, #0
 8001acc:	2204      	movs	r2, #4
 8001ace:	f7ff ff97 	bl	8001a00 <hif_receive>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d0ef      	beq.n	8001ab6 <m2m_wifi_cb+0x66>
}
 8001ad6:	b01b      	add	sp, #108	; 0x6c
 8001ad8:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 8001ada:	4610      	mov	r0, r2
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	f7ff ff8d 	bl	8001a00 <hif_receive>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d1eb      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
 8001aea:	e7e4      	b.n	8001ab6 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 8001aec:	4610      	mov	r0, r2
 8001aee:	a901      	add	r1, sp, #4
 8001af0:	2301      	movs	r3, #1
 8001af2:	2230      	movs	r2, #48	; 0x30
 8001af4:	f7ff ff84 	bl	8001a00 <hif_receive>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d1e2      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
 8001afc:	e7db      	b.n	8001ab6 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 8001afe:	4610      	mov	r0, r2
 8001b00:	a901      	add	r1, sp, #4
 8001b02:	2300      	movs	r3, #0
 8001b04:	2214      	movs	r2, #20
 8001b06:	f7ff ff7b 	bl	8001a00 <hif_receive>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d1d9      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
 8001b0e:	e7d2      	b.n	8001ab6 <m2m_wifi_cb+0x66>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 8001b10:	ac01      	add	r4, sp, #4
 8001b12:	4623      	mov	r3, r4
void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
	do
	{
		*pBuf = val;
 8001b14:	2200      	movs	r2, #0
 8001b16:	f803 2b01 	strb.w	r2, [r3], #1
		pBuf++;
	}while(--sz);
 8001b1a:	a91a      	add	r1, sp, #104	; 0x68
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d1fa      	bne.n	8001b16 <m2m_wifi_cb+0xc6>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8001b20:	4628      	mov	r0, r5
 8001b22:	2300      	movs	r3, #0
 8001b24:	2264      	movs	r2, #100	; 0x64
 8001b26:	4621      	mov	r1, r4
 8001b28:	f7ff ff6a 	bl	8001a00 <hif_receive>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d1c8      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <m2m_wifi_cb+0x1ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0c4      	beq.n	8001ac2 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 8001b38:	4621      	mov	r1, r4
 8001b3a:	202f      	movs	r0, #47	; 0x2f
 8001b3c:	4798      	blx	r3
 8001b3e:	e7c0      	b.n	8001ac2 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 8001b40:	4610      	mov	r0, r2
 8001b42:	2204      	movs	r2, #4
 8001b44:	2300      	movs	r3, #0
 8001b46:	eb0d 0102 	add.w	r1, sp, r2
 8001b4a:	f7ff ff59 	bl	8001a00 <hif_receive>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d1b7      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <m2m_wifi_cb+0x1ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0b3      	beq.n	8001ac2 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4798      	blx	r3
 8001b60:	e7af      	b.n	8001ac2 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 8001b62:	4610      	mov	r0, r2
 8001b64:	a901      	add	r1, sp, #4
 8001b66:	2301      	movs	r3, #1
 8001b68:	2204      	movs	r2, #4
 8001b6a:	f7ff ff49 	bl	8001a00 <hif_receive>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d1a7      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
 8001b72:	e7a0      	b.n	8001ab6 <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
 8001b74:	4a22      	ldr	r2, [pc, #136]	; (8001c00 <m2m_wifi_cb+0x1b0>)
 8001b76:	2300      	movs	r3, #0
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 8001b78:	ac01      	add	r4, sp, #4
		gu8scanInProgress = 0;
 8001b7a:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	4621      	mov	r1, r4
 8001b80:	2204      	movs	r2, #4
 8001b82:	f7ff ff3d 	bl	8001a00 <hif_receive>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d19b      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <m2m_wifi_cb+0x1ac>)
			gu8ChNum = strState.u8NumofCh;
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <m2m_wifi_cb+0x1b4>)
			if (gpfAppWifiCb)
 8001b8e:	681b      	ldr	r3, [r3, #0]
			gu8ChNum = strState.u8NumofCh;
 8001b90:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001b94:	7011      	strb	r1, [r2, #0]
			if (gpfAppWifiCb)
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d093      	beq.n	8001ac2 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	2011      	movs	r0, #17
 8001b9e:	4798      	blx	r3
 8001ba0:	e78f      	b.n	8001ac2 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 8001ba2:	ac01      	add	r4, sp, #4
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	2300      	movs	r3, #0
 8001baa:	222c      	movs	r2, #44	; 0x2c
 8001bac:	f7ff ff28 	bl	8001a00 <hif_receive>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d186      	bne.n	8001ac2 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001bb4:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <m2m_wifi_cb+0x1ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d082      	beq.n	8001ac2 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	2013      	movs	r0, #19
 8001bc0:	4798      	blx	r3
 8001bc2:	e77e      	b.n	8001ac2 <m2m_wifi_cb+0x72>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	a901      	add	r1, sp, #4
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2204      	movs	r2, #4
 8001bcc:	f7ff ff18 	bl	8001a00 <hif_receive>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f47f af76 	bne.w	8001ac2 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <m2m_wifi_cb+0x1ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f43f af71 	beq.w	8001ac2 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 8001be0:	a901      	add	r1, sp, #4
 8001be2:	2004      	movs	r0, #4
 8001be4:	4798      	blx	r3
 8001be6:	e76c      	b.n	8001ac2 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 8001be8:	4610      	mov	r0, r2
 8001bea:	a901      	add	r1, sp, #4
 8001bec:	2301      	movs	r3, #1
 8001bee:	2264      	movs	r2, #100	; 0x64
 8001bf0:	f7ff ff06 	bl	8001a00 <hif_receive>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	f47f af64 	bne.w	8001ac2 <m2m_wifi_cb+0x72>
 8001bfa:	e75c      	b.n	8001ab6 <m2m_wifi_cb+0x66>
 8001bfc:	20000bf4 	.word	0x20000bf4
 8001c00:	20000c22 	.word	0x20000c22
 8001c04:	20000c20 	.word	0x20000c20
	...

08001c10 <myPrintf>:

/**
 * wrapper for chprintf. Doesn't need the BaseSequentialStream implementing object as input
 */
int myPrintf(const char* fmt, ...)
{
 8001c10:	b40f      	push	{r0, r1, r2, r3}
 8001c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	ab10      	add	r3, sp, #64	; 0x40
 8001c1a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001c1e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8001c20:	4622      	mov	r2, r4
 8001c22:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001c26:	2900      	cmp	r1, #0
 8001c28:	f000 823e 	beq.w	80020a8 <myPrintf+0x498>
 8001c2c:	4dc0      	ldr	r5, [pc, #768]	; (8001f30 <myPrintf+0x320>)
 8001c2e:	469a      	mov	sl, r3
  int n = 0;
 8001c30:	f04f 0b00 	mov.w	fp, #0
 8001c34:	e00c      	b.n	8001c50 <myPrintf+0x40>
      streamPut(chp, (uint8_t)c);
 8001c36:	682b      	ldr	r3, [r5, #0]
 8001c38:	48bd      	ldr	r0, [pc, #756]	; (8001f30 <myPrintf+0x320>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
      n++;
 8001c3c:	f10b 0b01 	add.w	fp, fp, #1
 8001c40:	4614      	mov	r4, r2
      streamPut(chp, (uint8_t)c);
 8001c42:	4798      	blx	r3
    c = *fmt++;
 8001c44:	4622      	mov	r2, r4
 8001c46:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	f000 80be 	beq.w	8001dcc <myPrintf+0x1bc>
    if (c != '%') {
 8001c50:	2925      	cmp	r1, #37	; 0x25
 8001c52:	d1f0      	bne.n	8001c36 <myPrintf+0x26>
    if (*fmt == '-') {
 8001c54:	7863      	ldrb	r3, [r4, #1]
 8001c56:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8001c58:	bf04      	itt	eq
 8001c5a:	1ca2      	addeq	r2, r4, #2
      left_align = true;
 8001c5c:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 8001c5e:	7813      	ldrb	r3, [r2, #0]
    left_align = false;
 8001c60:	bf18      	it	ne
 8001c62:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8001c64:	2b2b      	cmp	r3, #43	; 0x2b
 8001c66:	bf03      	ittte	eq
 8001c68:	7853      	ldrbeq	r3, [r2, #1]
      do_sign = true;
 8001c6a:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 8001c6e:	4472      	addeq	r2, lr
    do_sign = false;
 8001c70:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8001c74:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8001c76:	bf05      	ittet	eq
 8001c78:	461f      	moveq	r7, r3
      fmt++;
 8001c7a:	7853      	ldrbeq	r3, [r2, #1]
    filler = ' ';
 8001c7c:	2720      	movne	r7, #32
      fmt++;
 8001c7e:	3201      	addeq	r2, #1
    if ( *fmt == '*') {
 8001c80:	2b2a      	cmp	r3, #42	; 0x2a
 8001c82:	f040 80ac 	bne.w	8001dde <myPrintf+0x1ce>
      width = va_arg(ap, int);
 8001c86:	f85a 1b04 	ldr.w	r1, [sl], #4
      c = *fmt++;
 8001c8a:	7853      	ldrb	r3, [r2, #1]
 8001c8c:	1c94      	adds	r4, r2, #2
    if (c == '.') {
 8001c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c90:	f000 8130 	beq.w	8001ef4 <myPrintf+0x2e4>
    precision = 0;
 8001c94:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8001c96:	f003 06df 	and.w	r6, r3, #223	; 0xdf
 8001c9a:	2e4c      	cmp	r6, #76	; 0x4c
 8001c9c:	f000 80b2 	beq.w	8001e04 <myPrintf+0x1f4>
 8001ca0:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
 8001ca4:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8001ca8:	f200 819b 	bhi.w	8001fe2 <myPrintf+0x3d2>
 8001cac:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8001cb0:	01990161 	.word	0x01990161
 8001cb4:	01990199 	.word	0x01990199
 8001cb8:	01610199 	.word	0x01610199
 8001cbc:	01990199 	.word	0x01990199
 8001cc0:	01990199 	.word	0x01990199
 8001cc4:	019d0199 	.word	0x019d0199
 8001cc8:	01990035 	.word	0x01990035
 8001ccc:	01990199 	.word	0x01990199
 8001cd0:	00940199 	.word	0x00940199
 8001cd4:	01990199 	.word	0x01990199
 8001cd8:	01990035 	.word	0x01990035
 8001cdc:	01990199 	.word	0x01990199
 8001ce0:	01990199 	.word	0x01990199
 8001ce4:	01990199 	.word	0x01990199
 8001ce8:	01990199 	.word	0x01990199
 8001cec:	01500199 	.word	0x01500199
 8001cf0:	01990161 	.word	0x01990161
 8001cf4:	01990199 	.word	0x01990199
 8001cf8:	01610199 	.word	0x01610199
 8001cfc:	01990199 	.word	0x01990199
 8001d00:	01990199 	.word	0x01990199
 8001d04:	019d0199 	.word	0x019d0199
 8001d08:	01990035 	.word	0x01990035
 8001d0c:	012d0199 	.word	0x012d0199
 8001d10:	00940199 	.word	0x00940199
 8001d14:	01990199 	.word	0x01990199
 8001d18:	0035      	.short	0x0035
      if (c == 0) {
 8001d1a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 8001d1e:	f85a 6b04 	ldr.w	r6, [sl], #4
  q = p + MAX_FILLER;
 8001d22:	f10d 0317 	add.w	r3, sp, #23
 8001d26:	e000      	b.n	8001d2a <myPrintf+0x11a>
  } while ((ll /= radix) != 0);
 8001d28:	4663      	mov	r3, ip
    i = (int)(l % radix);
 8001d2a:	46b0      	mov	r8, r6
 8001d2c:	fbb6 f6fe 	udiv	r6, r6, lr
 8001d30:	fb0e 8916 	mls	r9, lr, r6, r8
    i += '0';
 8001d34:	f109 0230 	add.w	r2, r9, #48	; 0x30
    if (i > '9') {
 8001d38:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 8001d3a:	bfc8      	it	gt
 8001d3c:	f109 0237 	addgt.w	r2, r9, #55	; 0x37
    *--q = i;
 8001d40:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8001d42:	45f0      	cmp	r8, lr
    *--q = i;
 8001d44:	f103 3cff 	add.w	ip, r3, #4294967295
 8001d48:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 8001d4c:	d2ec      	bcs.n	8001d28 <myPrintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 8001d4e:	f10d 080c 	add.w	r8, sp, #12
 8001d52:	f10d 0617 	add.w	r6, sp, #23
 8001d56:	eba6 060c 	sub.w	r6, r6, ip
 8001d5a:	46c6      	mov	lr, r8
 8001d5c:	f10d 0c17 	add.w	ip, sp, #23
 8001d60:	e001      	b.n	8001d66 <myPrintf+0x156>
 8001d62:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8001d66:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 8001d6a:	4563      	cmp	r3, ip
 8001d6c:	d1f9      	bne.n	8001d62 <myPrintf+0x152>
 8001d6e:	1b89      	subs	r1, r1, r6
 8001d70:	3e01      	subs	r6, #1
 8001d72:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8001d76:	b920      	cbnz	r0, 8001d82 <myPrintf+0x172>
    if (width < 0) {
 8001d78:	2900      	cmp	r1, #0
      width = -width;
 8001d7a:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8001d7e:	f300 8148 	bgt.w	8002012 <myPrintf+0x402>
    while (--i >= 0) {
 8001d82:	2e00      	cmp	r6, #0
 8001d84:	db0f      	blt.n	8001da6 <myPrintf+0x196>
 8001d86:	1c73      	adds	r3, r6, #1
 8001d88:	4443      	add	r3, r8
 8001d8a:	9401      	str	r4, [sp, #4]
 8001d8c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 8001d8e:	682a      	ldr	r2, [r5, #0]
 8001d90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d94:	68d2      	ldr	r2, [r2, #12]
 8001d96:	4628      	mov	r0, r5
 8001d98:	4790      	blx	r2
    while (--i >= 0) {
 8001d9a:	45a0      	cmp	r8, r4
 8001d9c:	d1f7      	bne.n	8001d8e <myPrintf+0x17e>
 8001d9e:	f10b 0b01 	add.w	fp, fp, #1
 8001da2:	9c01      	ldr	r4, [sp, #4]
 8001da4:	44b3      	add	fp, r6
    while (width) {
 8001da6:	f1b9 0f00 	cmp.w	r9, #0
 8001daa:	f43f af4b 	beq.w	8001c44 <myPrintf+0x34>
 8001dae:	464e      	mov	r6, r9
      streamPut(chp, (uint8_t)filler);
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	4639      	mov	r1, r7
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	4628      	mov	r0, r5
 8001db8:	4798      	blx	r3
    while (width) {
 8001dba:	3e01      	subs	r6, #1
 8001dbc:	d1f8      	bne.n	8001db0 <myPrintf+0x1a0>
    c = *fmt++;
 8001dbe:	4622      	mov	r2, r4
 8001dc0:	44cb      	add	fp, r9
 8001dc2:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001dc6:	2900      	cmp	r1, #0
 8001dc8:	f47f af42 	bne.w	8001c50 <myPrintf+0x40>
  formatted_bytes = chvprintf((BaseSequentialStream*) &myPrintfSD, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001dcc:	4658      	mov	r0, fp
 8001dce:	b007      	add	sp, #28
 8001dd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd4:	b004      	add	sp, #16
 8001dd6:	4770      	bx	lr
      if (c == 0) {
 8001dd8:	f04f 0e0a 	mov.w	lr, #10
 8001ddc:	e79f      	b.n	8001d1e <myPrintf+0x10e>
        c = *fmt++;
 8001dde:	1c54      	adds	r4, r2, #1
        if (c == 0) {
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f3      	beq.n	8001dcc <myPrintf+0x1bc>
      width = 0;
 8001de4:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8001de6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 8001dee:	eb01 0681 	add.w	r6, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8001df2:	f63f af4c 	bhi.w	8001c8e <myPrintf+0x7e>
        c = *fmt++;
 8001df6:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8001dfa:	eb02 0146 	add.w	r1, r2, r6, lsl #1
        if (c == 0) {
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f1      	bne.n	8001de6 <myPrintf+0x1d6>
 8001e02:	e7e3      	b.n	8001dcc <myPrintf+0x1bc>
      c = *fmt++;
 8001e04:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0df      	beq.n	8001dcc <myPrintf+0x1bc>
 8001e0c:	f1a3 0644 	sub.w	r6, r3, #68	; 0x44
 8001e10:	2e34      	cmp	r6, #52	; 0x34
 8001e12:	f200 80e6 	bhi.w	8001fe2 <myPrintf+0x3d2>
 8001e16:	f20f 0c08 	addw	ip, pc, #8
 8001e1a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001f73 	.word	0x08001f73
 8001e24:	08001fe3 	.word	0x08001fe3
 8001e28:	08001fe3 	.word	0x08001fe3
 8001e2c:	08001fe3 	.word	0x08001fe3
 8001e30:	08001fe3 	.word	0x08001fe3
 8001e34:	08001f73 	.word	0x08001f73
 8001e38:	08001fe3 	.word	0x08001fe3
 8001e3c:	08001fe3 	.word	0x08001fe3
 8001e40:	08001fe3 	.word	0x08001fe3
 8001e44:	08001fe3 	.word	0x08001fe3
 8001e48:	08001fe3 	.word	0x08001fe3
 8001e4c:	08001feb 	.word	0x08001feb
 8001e50:	08001d1b 	.word	0x08001d1b
 8001e54:	08001fe3 	.word	0x08001fe3
 8001e58:	08001fe3 	.word	0x08001fe3
 8001e5c:	08001fe3 	.word	0x08001fe3
 8001e60:	08001fe3 	.word	0x08001fe3
 8001e64:	08001dd9 	.word	0x08001dd9
 8001e68:	08001fe3 	.word	0x08001fe3
 8001e6c:	08001fe3 	.word	0x08001fe3
 8001e70:	08001d1b 	.word	0x08001d1b
 8001e74:	08001fe3 	.word	0x08001fe3
 8001e78:	08001fe3 	.word	0x08001fe3
 8001e7c:	08001fe3 	.word	0x08001fe3
 8001e80:	08001fe3 	.word	0x08001fe3
 8001e84:	08001fe3 	.word	0x08001fe3
 8001e88:	08001fe3 	.word	0x08001fe3
 8001e8c:	08001fe3 	.word	0x08001fe3
 8001e90:	08001fe3 	.word	0x08001fe3
 8001e94:	08001fe3 	.word	0x08001fe3
 8001e98:	08001fe3 	.word	0x08001fe3
 8001e9c:	08001f51 	.word	0x08001f51
 8001ea0:	08001f73 	.word	0x08001f73
 8001ea4:	08001fe3 	.word	0x08001fe3
 8001ea8:	08001fe3 	.word	0x08001fe3
 8001eac:	08001fe3 	.word	0x08001fe3
 8001eb0:	08001fe3 	.word	0x08001fe3
 8001eb4:	08001f73 	.word	0x08001f73
 8001eb8:	08001fe3 	.word	0x08001fe3
 8001ebc:	08001fe3 	.word	0x08001fe3
 8001ec0:	08001fe3 	.word	0x08001fe3
 8001ec4:	08001fe3 	.word	0x08001fe3
 8001ec8:	08001fe3 	.word	0x08001fe3
 8001ecc:	08001feb 	.word	0x08001feb
 8001ed0:	08001d1b 	.word	0x08001d1b
 8001ed4:	08001fe3 	.word	0x08001fe3
 8001ed8:	08001fe3 	.word	0x08001fe3
 8001edc:	08001f0b 	.word	0x08001f0b
 8001ee0:	08001fe3 	.word	0x08001fe3
 8001ee4:	08001dd9 	.word	0x08001dd9
 8001ee8:	08001fe3 	.word	0x08001fe3
 8001eec:	08001fe3 	.word	0x08001fe3
 8001ef0:	08001d1b 	.word	0x08001d1b
      c = *fmt++;
 8001ef4:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f43f af68 	beq.w	8001dcc <myPrintf+0x1bc>
      if (c == '*') {
 8001efc:	2b2a      	cmp	r3, #42	; 0x2a
 8001efe:	d177      	bne.n	8001ff0 <myPrintf+0x3e0>
        c = *fmt++;
 8001f00:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8001f02:	f85a 2b04 	ldr.w	r2, [sl], #4
        c = *fmt++;
 8001f06:	3402      	adds	r4, #2
 8001f08:	e6c5      	b.n	8001c96 <myPrintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8001f0a:	f85a 8b04 	ldr.w	r8, [sl], #4
 8001f0e:	f1b8 0f00 	cmp.w	r8, #0
 8001f12:	f000 80bf 	beq.w	8002094 <myPrintf+0x484>
 8001f16:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0) {
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	f040 80ad 	bne.w	800207a <myPrintf+0x46a>
      for (p = s; *p && (--precision >= 0); p++)
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ae 	beq.w	8002082 <myPrintf+0x472>
 8001f26:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001f2a:	4646      	mov	r6, r8
 8001f2c:	e004      	b.n	8001f38 <myPrintf+0x328>
 8001f2e:	bf00      	nop
 8001f30:	20000800 	.word	0x20000800
 8001f34:	42d3      	cmn	r3, r2
 8001f36:	d405      	bmi.n	8001f44 <myPrintf+0x334>
 8001f38:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8001f3c:	eba8 0306 	sub.w	r3, r8, r6
 8001f40:	2f00      	cmp	r7, #0
 8001f42:	d1f7      	bne.n	8001f34 <myPrintf+0x324>
 8001f44:	eba6 0608 	sub.w	r6, r6, r8
 8001f48:	1b89      	subs	r1, r1, r6
      filler = ' ';
 8001f4a:	2720      	movs	r7, #32
 8001f4c:	3e01      	subs	r6, #1
 8001f4e:	e710      	b.n	8001d72 <myPrintf+0x162>
      *p++ = va_arg(ap, int);
 8001f50:	f85a 3b04 	ldr.w	r3, [sl], #4
 8001f54:	f88d 300c 	strb.w	r3, [sp, #12]
 8001f58:	3901      	subs	r1, #1
      filler = ' ';
 8001f5a:	2720      	movs	r7, #32
 8001f5c:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8001f60:	b918      	cbnz	r0, 8001f6a <myPrintf+0x35a>
    if (width < 0) {
 8001f62:	2900      	cmp	r1, #0
      width = -width;
 8001f64:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8001f68:	dc72      	bgt.n	8002050 <myPrintf+0x440>
    if (left_align == false) {
 8001f6a:	2600      	movs	r6, #0
 8001f6c:	f10d 080c 	add.w	r8, sp, #12
 8001f70:	e709      	b.n	8001d86 <myPrintf+0x176>
        l = va_arg(ap, int);
 8001f72:	f85a cb04 	ldr.w	ip, [sl], #4
      if (l < 0) {
 8001f76:	f1bc 0f00 	cmp.w	ip, #0
 8001f7a:	db5f      	blt.n	800203c <myPrintf+0x42c>
        if (do_sign) {
 8001f7c:	f1be 0f00 	cmp.w	lr, #0
 8001f80:	f000 808e 	beq.w	80020a0 <myPrintf+0x490>
          *p++ = '+';
 8001f84:	232b      	movs	r3, #43	; 0x2b
 8001f86:	f88d 300c 	strb.w	r3, [sp, #12]
 8001f8a:	f10d 060d 	add.w	r6, sp, #13
 8001f8e:	f10d 080c 	add.w	r8, sp, #12
  q = p + MAX_FILLER;
 8001f92:	f106 030b 	add.w	r3, r6, #11
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <myPrintf+0x4a8>)
 8001f9c:	fba3 e30c 	umull	lr, r3, r3, ip
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8001fa6:	469e      	mov	lr, r3
 8001fa8:	ebac 0349 	sub.w	r3, ip, r9, lsl #1
    i += '0';
 8001fac:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8001fae:	46e1      	mov	r9, ip
    *--q = i;
 8001fb0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001fb2:	f1b9 0f09 	cmp.w	r9, #9
    *--q = i;
 8001fb6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8001fba:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8001fbc:	dced      	bgt.n	8001f9a <myPrintf+0x38a>
 8001fbe:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8001fc0:	9b01      	ldr	r3, [sp, #4]
 8001fc2:	eba3 0c02 	sub.w	ip, r3, r2
 8001fc6:	44b4      	add	ip, r6
 8001fc8:	4673      	mov	r3, lr
 8001fca:	e001      	b.n	8001fd0 <myPrintf+0x3c0>
 8001fcc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8001fd0:	f806 3b01 	strb.w	r3, [r6], #1
  while (--i);
 8001fd4:	4566      	cmp	r6, ip
 8001fd6:	d1f9      	bne.n	8001fcc <myPrintf+0x3bc>
 8001fd8:	eba6 0608 	sub.w	r6, r6, r8
 8001fdc:	1b89      	subs	r1, r1, r6
 8001fde:	3e01      	subs	r6, #1
 8001fe0:	e6c7      	b.n	8001d72 <myPrintf+0x162>
      *p++ = c;
 8001fe2:	f88d 300c 	strb.w	r3, [sp, #12]
 8001fe6:	3901      	subs	r1, #1
 8001fe8:	e7b8      	b.n	8001f5c <myPrintf+0x34c>
      if (c == 0) {
 8001fea:	f04f 0e08 	mov.w	lr, #8
 8001fee:	e696      	b.n	8001d1e <myPrintf+0x10e>
      c = *fmt++;
 8001ff0:	3401      	adds	r4, #1
    precision = 0;
 8001ff2:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8001ff4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8001ff8:	b2f6      	uxtb	r6, r6
 8001ffa:	2e09      	cmp	r6, #9
          precision = precision * 10 + c;
 8001ffc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8002000:	f63f ae49 	bhi.w	8001c96 <myPrintf+0x86>
          c = *fmt++;
 8002004:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8002008:	eb06 024c 	add.w	r2, r6, ip, lsl #1
          if (c == 0) {
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f1      	bne.n	8001ff4 <myPrintf+0x3e4>
 8002010:	e6dc      	b.n	8001dcc <myPrintf+0x1bc>
      width = -width;
 8002012:	f8cd 9004 	str.w	r9, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002016:	f898 1000 	ldrb.w	r1, [r8]
 800201a:	292d      	cmp	r1, #45	; 0x2d
 800201c:	d021      	beq.n	8002062 <myPrintf+0x452>
        streamPut(chp, (uint8_t)filler);
 800201e:	682b      	ldr	r3, [r5, #0]
 8002020:	4639      	mov	r1, r7
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4628      	mov	r0, r5
 8002026:	4798      	blx	r3
      } while (++width != 0);
 8002028:	f119 0901 	adds.w	r9, r9, #1
 800202c:	d1f7      	bne.n	800201e <myPrintf+0x40e>
 800202e:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8002030:	2e00      	cmp	r6, #0
 8002032:	ebab 0b03 	sub.w	fp, fp, r3
 8002036:	f6bf aea6 	bge.w	8001d86 <myPrintf+0x176>
 800203a:	e603      	b.n	8001c44 <myPrintf+0x34>
        *p++ = '-';
 800203c:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800203e:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8002042:	f88d 300c 	strb.w	r3, [sp, #12]
 8002046:	f10d 060d 	add.w	r6, sp, #13
 800204a:	f10d 080c 	add.w	r8, sp, #12
 800204e:	e7a0      	b.n	8001f92 <myPrintf+0x382>
      if (*s == '-' && filler == '0') {
 8002050:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8002054:	f8cd 9004 	str.w	r9, [sp, #4]
      if (*s == '-' && filler == '0') {
 8002058:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 800205a:	f10d 080c 	add.w	r8, sp, #12
 800205e:	4606      	mov	r6, r0
      if (*s == '-' && filler == '0') {
 8002060:	d1dd      	bne.n	800201e <myPrintf+0x40e>
 8002062:	2f30      	cmp	r7, #48	; 0x30
 8002064:	d1db      	bne.n	800201e <myPrintf+0x40e>
        streamPut(chp, (uint8_t)*s++);
 8002066:	682a      	ldr	r2, [r5, #0]
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <myPrintf+0x4ac>)
 800206a:	68d2      	ldr	r2, [r2, #12]
 800206c:	4790      	blx	r2
 800206e:	f108 0801 	add.w	r8, r8, #1
        n++;
 8002072:	f10b 0b01 	add.w	fp, fp, #1
 8002076:	3e01      	subs	r6, #1
 8002078:	e7d1      	b.n	800201e <myPrintf+0x40e>
      for (p = s; *p && (--precision >= 0); p++)
 800207a:	b113      	cbz	r3, 8002082 <myPrintf+0x472>
 800207c:	3a01      	subs	r2, #1
 800207e:	f57f af54 	bpl.w	8001f2a <myPrintf+0x31a>
 8002082:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8002086:	b918      	cbnz	r0, 8002090 <myPrintf+0x480>
    if (width < 0) {
 8002088:	2900      	cmp	r1, #0
      width = -width;
 800208a:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 800208e:	dc0d      	bgt.n	80020ac <myPrintf+0x49c>
    if (left_align == false) {
 8002090:	2720      	movs	r7, #32
 8002092:	e688      	b.n	8001da6 <myPrintf+0x196>
        s = "(null)";
 8002094:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80020c0 <myPrintf+0x4b0>
      if (precision == 0) {
 8002098:	2a00      	cmp	r2, #0
 800209a:	f43f af44 	beq.w	8001f26 <myPrintf+0x316>
 800209e:	e7ed      	b.n	800207c <myPrintf+0x46c>
    p = tmpbuf;
 80020a0:	f10d 080c 	add.w	r8, sp, #12
 80020a4:	4646      	mov	r6, r8
 80020a6:	e774      	b.n	8001f92 <myPrintf+0x382>
  int n = 0;
 80020a8:	468b      	mov	fp, r1
  return formatted_bytes;
 80020aa:	e68f      	b.n	8001dcc <myPrintf+0x1bc>
      width = -width;
 80020ac:	f8cd 9004 	str.w	r9, [sp, #4]
    if (width < 0) {
 80020b0:	2720      	movs	r7, #32
 80020b2:	f04f 36ff 	mov.w	r6, #4294967295
 80020b6:	e7ae      	b.n	8002016 <myPrintf+0x406>
 80020b8:	cccccccd 	.word	0xcccccccd
 80020bc:	20000800 	.word	0x20000800
 80020c0:	08003ce0 	.word	0x08003ce0
	...

080020d0 <wifi_cb>:
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (u8MsgType) {
 80020d2:	282c      	cmp	r0, #44	; 0x2c
{
 80020d4:	b09f      	sub	sp, #124	; 0x7c
 80020d6:	460c      	mov	r4, r1
    switch (u8MsgType) {
 80020d8:	d02e      	beq.n	8002138 <wifi_cb+0x68>
 80020da:	d81e      	bhi.n	800211a <wifi_cb+0x4a>
 80020dc:	2811      	cmp	r0, #17
 80020de:	d034      	beq.n	800214a <wifi_cb+0x7a>
 80020e0:	2813      	cmp	r0, #19
 80020e2:	d127      	bne.n	8002134 <wifi_cb+0x64>
        uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 80020e4:	f101 060a 	add.w	r6, r1, #10
 80020e8:	4630      	mov	r0, r6
 80020ea:	f7fe f9a9 	bl	8000440 <strlen>
        myPrintf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);  /* display founded AP. */
 80020ee:	4f54      	ldr	r7, [pc, #336]	; (8002240 <wifi_cb+0x170>)
        uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 80020f0:	4605      	mov	r5, r0
        myPrintf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);  /* display founded AP. */
 80020f2:	7839      	ldrb	r1, [r7, #0]
 80020f4:	4853      	ldr	r0, [pc, #332]	; (8002244 <wifi_cb+0x174>)
 80020f6:	4632      	mov	r2, r6
 80020f8:	f7ff fd8a 	bl	8001c10 <myPrintf>
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
 80020fc:	4b52      	ldr	r3, [pc, #328]	; (8002248 <wifi_cb+0x178>)
            (
 80020fe:	b2ad      	uxth	r5, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2d04      	cmp	r5, #4
 8002104:	b2db      	uxtb	r3, r3
 8002106:	d034      	beq.n	8002172 <wifi_cb+0xa2>
        if (scan_request_index < num_founded_ap) {
 8002108:	7838      	ldrb	r0, [r7, #0]
 800210a:	4298      	cmp	r0, r3
 800210c:	d229      	bcs.n	8002162 <wifi_cb+0x92>
            m2m_wifi_req_scan_result(scan_request_index);
 800210e:	f7ff fc47 	bl	80019a0 <m2m_wifi_req_scan_result>
            scan_request_index++;
 8002112:	783b      	ldrb	r3, [r7, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	703b      	strb	r3, [r7, #0]
 8002118:	e00c      	b.n	8002134 <wifi_cb+0x64>
    switch (u8MsgType) {
 800211a:	2832      	cmp	r0, #50	; 0x32
 800211c:	d10a      	bne.n	8002134 <wifi_cb+0x64>
        myPrintf("Wi-Fi connected\r\n");
 800211e:	484b      	ldr	r0, [pc, #300]	; (800224c <wifi_cb+0x17c>)
 8002120:	f7ff fd76 	bl	8001c10 <myPrintf>
        myPrintf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8002124:	78e3      	ldrb	r3, [r4, #3]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	78a3      	ldrb	r3, [r4, #2]
 800212a:	7862      	ldrb	r2, [r4, #1]
 800212c:	7821      	ldrb	r1, [r4, #0]
 800212e:	4848      	ldr	r0, [pc, #288]	; (8002250 <wifi_cb+0x180>)
 8002130:	f7ff fd6e 	bl	8001c10 <myPrintf>
}
 8002134:	b01f      	add	sp, #124	; 0x7c
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8002138:	780b      	ldrb	r3, [r1, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1fa      	bne.n	8002134 <wifi_cb+0x64>
            myPrintf("Wi-Fi disconnected\r\n");
 800213e:	4845      	ldr	r0, [pc, #276]	; (8002254 <wifi_cb+0x184>)
 8002140:	f7ff fd66 	bl	8001c10 <myPrintf>
            m2m_wifi_request_scan(M2M_WIFI_CH_ALL); /* Request scan. */
 8002144:	f7ff fc14 	bl	8001970 <m2m_wifi_request_scan.constprop.0>
 8002148:	e7f4      	b.n	8002134 <wifi_cb+0x64>
        scan_request_index = 0;
 800214a:	4c3d      	ldr	r4, [pc, #244]	; (8002240 <wifi_cb+0x170>)
        if (pstrInfo->u8NumofCh >= 1) {
 800214c:	780b      	ldrb	r3, [r1, #0]
        scan_request_index = 0;
 800214e:	2000      	movs	r0, #0
 8002150:	7020      	strb	r0, [r4, #0]
        if (pstrInfo->u8NumofCh >= 1) {
 8002152:	b153      	cbz	r3, 800216a <wifi_cb+0x9a>
            m2m_wifi_req_scan_result(scan_request_index);
 8002154:	f7ff fc24 	bl	80019a0 <m2m_wifi_req_scan_result>
            scan_request_index++;
 8002158:	7823      	ldrb	r3, [r4, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	7023      	strb	r3, [r4, #0]
}
 800215e:	b01f      	add	sp, #124	; 0x7c
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}
            myPrintf("can not find AP %s\r\n", MAIN_WLAN_SSID);
 8002162:	493d      	ldr	r1, [pc, #244]	; (8002258 <wifi_cb+0x188>)
 8002164:	483d      	ldr	r0, [pc, #244]	; (800225c <wifi_cb+0x18c>)
 8002166:	f7ff fd53 	bl	8001c10 <myPrintf>
            m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 800216a:	f7ff fc01 	bl	8001970 <m2m_wifi_request_scan.constprop.0>
}
 800216e:	b01f      	add	sp, #124	; 0x7c
 8002170:	bdf0      	pop	{r4, r5, r6, r7, pc}
                (!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
 8002172:	7aa2      	ldrb	r2, [r4, #10]
 8002174:	2a44      	cmp	r2, #68	; 0x44
 8002176:	d1c7      	bne.n	8002108 <wifi_cb+0x38>
 8002178:	7ae2      	ldrb	r2, [r4, #11]
 800217a:	2a49      	cmp	r2, #73	; 0x49
 800217c:	d1c4      	bne.n	8002108 <wifi_cb+0x38>
 800217e:	7b22      	ldrb	r2, [r4, #12]
 8002180:	2a41      	cmp	r2, #65	; 0x41
 8002182:	d1c1      	bne.n	8002108 <wifi_cb+0x38>
 8002184:	7b62      	ldrb	r2, [r4, #13]
 8002186:	2a53      	cmp	r2, #83	; 0x53
 8002188:	d1be      	bne.n	8002108 <wifi_cb+0x38>
                myPrintf("Found %s \r\n", MAIN_WLAN_SSID);
 800218a:	4933      	ldr	r1, [pc, #204]	; (8002258 <wifi_cb+0x188>)
 800218c:	4834      	ldr	r0, [pc, #208]	; (8002260 <wifi_cb+0x190>)
 800218e:	f7ff fd3f 	bl	8001c10 <myPrintf>
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
 8002192:	4834      	ldr	r0, [pc, #208]	; (8002264 <wifi_cb+0x194>)
 8002194:	2269      	movs	r2, #105	; 0x69
 8002196:	4601      	mov	r1, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	e001      	b.n	80021a0 <wifi_cb+0xd0>
 800219c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while(*pcStr)
	{
		u16StrLen ++;
 80021a0:	3301      	adds	r3, #1
 80021a2:	b29b      	uxth	r3, r3
	while(*pcStr)
 80021a4:	2a00      	cmp	r2, #0
 80021a6:	d1f9      	bne.n	800219c <wifi_cb+0xcc>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d033      	beq.n	8002214 <wifi_cb+0x144>
 80021ac:	492a      	ldr	r1, [pc, #168]	; (8002258 <wifi_cb+0x188>)
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 80021ae:	2244      	movs	r2, #68	; 0x44
 80021b0:	f10d 0352 	add.w	r3, sp, #82	; 0x52
 80021b4:	f10d 0457 	add.w	r4, sp, #87	; 0x57
 80021b8:	e001      	b.n	80021be <wifi_cb+0xee>
 80021ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		*pDst = *pSrc;
 80021be:	f803 2b01 	strb.w	r2, [r3], #1
	}while(--sz);
 80021c2:	42a3      	cmp	r3, r4
 80021c4:	d1f9      	bne.n	80021ba <wifi_cb+0xea>
	strConnect.au8SSID[u8SsidLen]	= 0;
 80021c6:	2200      	movs	r2, #0
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 80021c8:	21ff      	movs	r1, #255	; 0xff
	pstrAuthInfo->u8SecType		= u8SecType;
 80021ca:	2302      	movs	r3, #2
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 80021cc:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
	strConnect.au8SSID[u8SsidLen]	= 0;
 80021d0:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 80021d4:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
	pstrAuthInfo->u8SecType		= u8SecType;
 80021d8:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 80021dc:	2169      	movs	r1, #105	; 0x69
 80021de:	e002      	b.n	80021e6 <wifi_cb+0x116>
 80021e0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
		u16StrLen ++;
 80021e4:	461a      	mov	r2, r3
 80021e6:	1c53      	adds	r3, r2, #1
 80021e8:	b29b      	uxth	r3, r3
	while(*pcStr)
 80021ea:	2900      	cmp	r1, #0
 80021ec:	d1f8      	bne.n	80021e0 <wifi_cb+0x110>
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 80021ee:	2a3f      	cmp	r2, #63	; 0x3f
 80021f0:	d8a0      	bhi.n	8002134 <wifi_cb+0x64>
	if(sz == 0) return;
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <wifi_cb+0x198>)
 80021f4:	a903      	add	r1, sp, #12
 80021f6:	4413      	add	r3, r2
 80021f8:	2064      	movs	r0, #100	; 0x64
 80021fa:	e001      	b.n	8002200 <wifi_cb+0x130>
 80021fc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
		*pDst = *pSrc;
 8002200:	f801 0b01 	strb.w	r0, [r1], #1
	}while(--sz);
 8002204:	4293      	cmp	r3, r2
 8002206:	d1f9      	bne.n	80021fc <wifi_cb+0x12c>
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 8002208:	a903      	add	r1, sp, #12
 800220a:	226c      	movs	r2, #108	; 0x6c
 800220c:	2028      	movs	r0, #40	; 0x28
 800220e:	f7ff fa97 	bl	8001740 <hif_send.constprop.0>
 8002212:	e78f      	b.n	8002134 <wifi_cb+0x64>
 8002214:	4914      	ldr	r1, [pc, #80]	; (8002268 <wifi_cb+0x198>)
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 8002216:	2364      	movs	r3, #100	; 0x64
 8002218:	f101 053f 	add.w	r5, r1, #63	; 0x3f
 800221c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 8002220:	2a06      	cmp	r2, #6
 8002222:	f1a3 0447 	sub.w	r4, r3, #71	; 0x47
 8002226:	d985      	bls.n	8002134 <wifi_cb+0x64>
 8002228:	2c19      	cmp	r4, #25
 800222a:	d983      	bls.n	8002134 <wifi_cb+0x64>
 800222c:	2b66      	cmp	r3, #102	; 0x66
 800222e:	d881      	bhi.n	8002134 <wifi_cb+0x64>
			while(i < (M2M_MAX_PSK_LEN-1))
 8002230:	428d      	cmp	r5, r1
 8002232:	d0bb      	beq.n	80021ac <wifi_cb+0xdc>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 8002234:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8002238:	2b2f      	cmp	r3, #47	; 0x2f
 800223a:	d8ef      	bhi.n	800221c <wifi_cb+0x14c>
 800223c:	e77a      	b.n	8002134 <wifi_cb+0x64>
 800223e:	bf00      	nop
 8002240:	20000c23 	.word	0x20000c23
 8002244:	08003ce8 	.word	0x08003ce8
 8002248:	20000c20 	.word	0x20000c20
 800224c:	08003d48 	.word	0x08003d48
 8002250:	08003d5c 	.word	0x08003d5c
 8002254:	08003d30 	.word	0x08003d30
 8002258:	08003cf8 	.word	0x08003cf8
 800225c:	08003d18 	.word	0x08003d18
 8002260:	08003d00 	.word	0x08003d00
 8002264:	08003d0d 	.word	0x08003d0d
 8002268:	08003d0c 	.word	0x08003d0c
 800226c:	00000000 	.word	0x00000000

08002270 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8002270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	b085      	sub	sp, #20
 8002276:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 800227a:	69c7      	ldr	r7, [r0, #28]
 800227c:	f04f 0920 	mov.w	r9, #32
 8002280:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002284:	b3a2      	cbz	r2, 80022f0 <oqWriteTimeout+0x80>
 8002286:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800228a:	4604      	mov	r4, r0
 800228c:	460e      	mov	r6, r1
 800228e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002292:	68a2      	ldr	r2, [r4, #8]
 8002294:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002296:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800229a:	bf8c      	ite	hi
 800229c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800229e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80022a0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 80022a4:	45a8      	cmp	r8, r5
 80022a6:	d844      	bhi.n	8002332 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 80022a8:	d229      	bcs.n	80022fe <oqWriteTimeout+0x8e>
    s2 = n - s1;
 80022aa:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80022ae:	4642      	mov	r2, r8
 80022b0:	4631      	mov	r1, r6
    s2 = n - s1;
 80022b2:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80022b4:	f7fe f82a 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80022b8:	eb06 0108 	add.w	r1, r6, r8
 80022bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80022c0:	68e0      	ldr	r0, [r4, #12]
 80022c2:	4642      	mov	r2, r8
 80022c4:	f7fe f822 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 80022c8:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 80022ca:	68e1      	ldr	r1, [r4, #12]
 80022cc:	4643      	mov	r3, r8
 80022ce:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 80022d0:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 80022d2:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 80022d4:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80022d6:	b10f      	cbz	r7, 80022dc <oqWriteTimeout+0x6c>
        nfy(oqp);
 80022d8:	4620      	mov	r0, r4
 80022da:	47b8      	blx	r7
 80022dc:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 80022e0:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80022e4:	442e      	add	r6, r5
 80022e6:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80022ea:	f1bb 0f00 	cmp.w	fp, #0
 80022ee:	d1d0      	bne.n	8002292 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 80022f0:	9803      	ldr	r0, [sp, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 80022f8:	b005      	add	sp, #20
 80022fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80022fe:	462a      	mov	r2, r5
 8002300:	4631      	mov	r1, r6
 8002302:	f7fe f803 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002306:	68e2      	ldr	r2, [r4, #12]
 8002308:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800230a:	68a2      	ldr	r2, [r4, #8]
 800230c:	1b52      	subs	r2, r2, r5
 800230e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002310:	2d00      	cmp	r5, #0
 8002312:	d1e0      	bne.n	80022d6 <oqWriteTimeout+0x66>
 8002314:	9902      	ldr	r1, [sp, #8]
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe fcf2 	bl	8000d00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800231c:	2800      	cmp	r0, #0
 800231e:	d0b8      	beq.n	8002292 <oqWriteTimeout+0x22>
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	eba3 000b 	sub.w	r0, r3, fp
 8002326:	2300      	movs	r3, #0
 8002328:	f383 8811 	msr	BASEPRI, r3
}
 800232c:	b005      	add	sp, #20
 800232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8002332:	462a      	mov	r2, r5
 8002334:	4631      	mov	r1, r6
 8002336:	f7fd ffe9 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 800233a:	6962      	ldr	r2, [r4, #20]
 800233c:	442a      	add	r2, r5
 800233e:	6162      	str	r2, [r4, #20]
 8002340:	e7e3      	b.n	800230a <oqWriteTimeout+0x9a>
 8002342:	bf00      	nop
	...

08002350 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002350:	3030      	adds	r0, #48	; 0x30
 8002352:	f7ff bf8d 	b.w	8002270 <oqWriteTimeout>
 8002356:	bf00      	nop
	...

08002360 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8002360:	3030      	adds	r0, #48	; 0x30
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	f7ff bf83 	b.w	8002270 <oqWriteTimeout>
 800236a:	bf00      	nop
 800236c:	0000      	movs	r0, r0
	...

08002370 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8002370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	b085      	sub	sp, #20
 8002376:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 800237a:	69c7      	ldr	r7, [r0, #28]
 800237c:	f04f 0920 	mov.w	r9, #32
 8002380:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002384:	2a00      	cmp	r2, #0
 8002386:	d034      	beq.n	80023f2 <iqReadTimeout+0x82>
 8002388:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800238c:	4604      	mov	r4, r0
 800238e:	460e      	mov	r6, r1
 8002390:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8002394:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002396:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002398:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800239a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800239c:	bf8c      	ite	hi
 800239e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 80023a0:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80023a2:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80023a6:	45a8      	cmp	r8, r5
 80023a8:	d844      	bhi.n	8002434 <iqReadTimeout+0xc4>
  else if (n > s1) {
 80023aa:	d229      	bcs.n	8002400 <iqReadTimeout+0x90>
    s2 = n - s1;
 80023ac:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80023b0:	4642      	mov	r2, r8
 80023b2:	4630      	mov	r0, r6
    s2 = n - s1;
 80023b4:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80023b6:	f7fd ffa9 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80023ba:	eb06 0008 	add.w	r0, r6, r8
 80023be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80023c2:	68e1      	ldr	r1, [r4, #12]
 80023c4:	4642      	mov	r2, r8
 80023c6:	f7fd ffa1 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 80023ca:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 80023cc:	68e1      	ldr	r1, [r4, #12]
 80023ce:	4643      	mov	r3, r8
 80023d0:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 80023d2:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 80023d4:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 80023d6:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 80023d8:	b10f      	cbz	r7, 80023de <iqReadTimeout+0x6e>
        nfy(iqp);
 80023da:	4620      	mov	r0, r4
 80023dc:	47b8      	blx	r7
 80023de:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 80023e2:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 80023e6:	442e      	add	r6, r5
 80023e8:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80023ec:	f1bb 0f00 	cmp.w	fp, #0
 80023f0:	d1d0      	bne.n	8002394 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 80023f2:	9803      	ldr	r0, [sp, #12]
 80023f4:	2300      	movs	r3, #0
 80023f6:	f383 8811 	msr	BASEPRI, r3
}
 80023fa:	b005      	add	sp, #20
 80023fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002400:	462a      	mov	r2, r5
 8002402:	4630      	mov	r0, r6
 8002404:	f7fd ff82 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002408:	68e2      	ldr	r2, [r4, #12]
 800240a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800240c:	68a2      	ldr	r2, [r4, #8]
 800240e:	1b52      	subs	r2, r2, r5
 8002410:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002412:	2d00      	cmp	r5, #0
 8002414:	d1e0      	bne.n	80023d8 <iqReadTimeout+0x68>
 8002416:	9902      	ldr	r1, [sp, #8]
 8002418:	4620      	mov	r0, r4
 800241a:	f7fe fc71 	bl	8000d00 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800241e:	2800      	cmp	r0, #0
 8002420:	d0b8      	beq.n	8002394 <iqReadTimeout+0x24>
 8002422:	9b03      	ldr	r3, [sp, #12]
 8002424:	eba3 000b 	sub.w	r0, r3, fp
 8002428:	2300      	movs	r3, #0
 800242a:	f383 8811 	msr	BASEPRI, r3
}
 800242e:	b005      	add	sp, #20
 8002430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002434:	462a      	mov	r2, r5
 8002436:	4630      	mov	r0, r6
 8002438:	f7fd ff68 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 800243c:	69a2      	ldr	r2, [r4, #24]
 800243e:	442a      	add	r2, r5
 8002440:	61a2      	str	r2, [r4, #24]
 8002442:	e7e3      	b.n	800240c <iqReadTimeout+0x9c>
	...

08002450 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002450:	300c      	adds	r0, #12
 8002452:	f7ff bf8d 	b.w	8002370 <iqReadTimeout>
 8002456:	bf00      	nop
	...

08002460 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8002460:	300c      	adds	r0, #12
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	f7ff bf83 	b.w	8002370 <iqReadTimeout>
 800246a:	bf00      	nop
 800246c:	0000      	movs	r0, r0
	...

08002470 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8002470:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <main+0x88>)
  PWR->CR |= PWR_CR_DBP;
 8002472:	4922      	ldr	r1, [pc, #136]	; (80024fc <main+0x8c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	f062 0287 	orn	r2, r2, #135	; 0x87
  }
}

int main(void) {
 800247a:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	691a      	ldr	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 8002490:	621a      	str	r2, [r3, #32]
 8002492:	6a1a      	ldr	r2, [r3, #32]
 8002494:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002498:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800249a:	f04f 32ff 	mov.w	r2, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800249e:	6a18      	ldr	r0, [r3, #32]
  rccResetAPB2(~0);
 80024a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
 80024a4:	2000      	movs	r0, #0
 80024a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024a8:	6258      	str	r0, [r3, #36]	; 0x24
 80024aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80024ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
 80024b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024ba:	661a      	str	r2, [r3, #96]	; 0x60
 80024bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 80024be:	680a      	ldr	r2, [r1, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80024c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80024d0:	b099      	sub	sp, #100	; 0x64
 80024d2:	d003      	beq.n	80024dc <main+0x6c>
    RCC->BDCR = RCC_BDCR_BDRST;
 80024d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024d8:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80024da:	6718      	str	r0, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 80024dc:	4c07      	ldr	r4, [pc, #28]	; (80024fc <main+0x8c>)
  dma.allocated_mask = 0U;
 80024de:	4808      	ldr	r0, [pc, #32]	; (8002500 <main+0x90>)
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <main+0x94>)
 80024e4:	4d08      	ldr	r5, [pc, #32]	; (8002508 <main+0x98>)
 80024e6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80024ea:	2200      	movs	r2, #0
 80024ec:	6061      	str	r1, [r4, #4]
 80024ee:	4601      	mov	r1, r0
 80024f0:	6002      	str	r2, [r0, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 80024f2:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 80024f6:	e00b      	b.n	8002510 <main+0xa0>
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40007000 	.word	0x40007000
 8002500:	20000b70 	.word	0x20000b70
 8002504:	08003ed8 	.word	0x08003ed8
 8002508:	40026010 	.word	0x40026010
 800250c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002510:	602a      	str	r2, [r5, #0]
    dma.streams[i].func = NULL;
 8002512:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002514:	4283      	cmp	r3, r0
    dma.streams[i].func = NULL;
 8002516:	604a      	str	r2, [r1, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002518:	f101 0108 	add.w	r1, r1, #8
 800251c:	d1f6      	bne.n	800250c <main+0x9c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 800251e:	4cc6      	ldr	r4, [pc, #792]	; (8002838 <main+0x3c8>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002520:	48c6      	ldr	r0, [pc, #792]	; (800283c <main+0x3cc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002522:	4bc7      	ldr	r3, [pc, #796]	; (8002840 <main+0x3d0>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	60a1      	str	r1, [r4, #8]
 800252a:	2260      	movs	r2, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 800252c:	60e1      	str	r1, [r4, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800252e:	2540      	movs	r5, #64	; 0x40
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002530:	6081      	str	r1, [r0, #8]
 8002532:	2480      	movs	r4, #128	; 0x80
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002534:	60c1      	str	r1, [r0, #12]
 8002536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800253a:	f44f 7100 	mov.w	r1, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800253e:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002542:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002546:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002548:	f883 2307 	strb.w	r2, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800254c:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002550:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002552:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800255a:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800255e:	6018      	str	r0, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002560:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002564:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002568:	6019      	str	r1, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800256a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800256e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002572:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002576:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002578:	f883 2317 	strb.w	r2, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800257c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002580:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002582:	49b0      	ldr	r1, [pc, #704]	; (8002844 <main+0x3d4>)
 8002584:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002588:	180c      	adds	r4, r1, r0
 800258a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    _pal_init_event(i);
 800258e:	2200      	movs	r2, #0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002590:	6058      	str	r0, [r3, #4]
  tqp->prev = (thread_t *)tqp;
 8002592:	e9c1 1100 	strd	r1, r1, [r1]
 8002596:	e9c1 2202 	strd	r2, r2, [r1, #8]
  for (i = 0; i < 16; i++) {
 800259a:	3110      	adds	r1, #16
 800259c:	428c      	cmp	r4, r1
 800259e:	d1f8      	bne.n	8002592 <main+0x122>
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 80025a0:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 800289c <main+0x42c>
 80025a4:	4fa8      	ldr	r7, [pc, #672]	; (8002848 <main+0x3d8>)
  spip->state = SPI_STOP;
 80025a6:	4da9      	ldr	r5, [pc, #676]	; (800284c <main+0x3dc>)
  oqp->q_notify  = onfy;
 80025a8:	4ca9      	ldr	r4, [pc, #676]	; (8002850 <main+0x3e0>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 80025aa:	48aa      	ldr	r0, [pc, #680]	; (8002854 <main+0x3e4>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80025ac:	4baa      	ldr	r3, [pc, #680]	; (8002858 <main+0x3e8>)
  iqp->q_counter = 0;
 80025ae:	f8c8 2014 	str.w	r2, [r8, #20]
 80025b2:	4641      	mov	r1, r8
  oqp->q_counter = size;
 80025b4:	2610      	movs	r6, #16
 80025b6:	f841 7b04 	str.w	r7, [r1], #4
 80025ba:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
  oqp->q_notify  = onfy;
 80025be:	f8c8 404c 	str.w	r4, [r8, #76]	; 0x4c
  oqp->q_top     = bp + size;
 80025c2:	f108 0674 	add.w	r6, r8, #116	; 0x74
  iqp->q_buffer  = bp;
 80025c6:	f108 0454 	add.w	r4, r8, #84	; 0x54
 80025ca:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
  iqp->q_top     = bp + size;
 80025ce:	f108 0064 	add.w	r0, r8, #100	; 0x64
  iqp->q_wrptr   = bp;
 80025d2:	e9c8 4408 	strd	r4, r4, [r8, #32]
  oqp->q_wrptr   = bp;
 80025d6:	e9c8 0011 	strd	r0, r0, [r8, #68]	; 0x44
  SPID2.spi       = SPI2;
 80025da:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 80028a0 <main+0x430>
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80025de:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 80028a4 <main+0x434>
  oqp->q_top     = bp + size;
 80025e2:	f8c8 6040 	str.w	r6, [r8, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 80025e6:	f108 070c 	add.w	r7, r8, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80025ea:	f8c8 1004 	str.w	r1, [r8, #4]
 80025ee:	f108 0630 	add.w	r6, r8, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80025f2:	2101      	movs	r1, #1
  iqp->q_buffer  = bp;
 80025f4:	f8c8 4018 	str.w	r4, [r8, #24]
  iqp->q_top     = bp + size;
 80025f8:	f8c8 001c 	str.w	r0, [r8, #28]
 80025fc:	f105 040c 	add.w	r4, r5, #12
  oqp->q_buffer  = bp;
 8002600:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002604:	4895      	ldr	r0, [pc, #596]	; (800285c <main+0x3ec>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8002606:	616a      	str	r2, [r5, #20]
  iqp->q_link    = link;
 8002608:	e9c8 280a 	strd	r2, r8, [r8, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 800260c:	e9c8 7703 	strd	r7, r7, [r8, #12]
 8002610:	e9c8 660c 	strd	r6, r6, [r8, #48]	; 0x30
  spip->thread = NULL;
 8002614:	e9c5 2201 	strd	r2, r2, [r5, #4]
  SPID2.dmatx     = NULL;
 8002618:	e9c5 2208 	strd	r2, r2, [r5, #32]
 800261c:	e9c5 4403 	strd	r4, r4, [r5, #12]
  SPID2.spi       = SPI2;
 8002620:	f8c5 e01c 	str.w	lr, [r5, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8002624:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
 8002628:	f888 1008 	strb.w	r1, [r8, #8]
  spip->state = SPI_STOP;
 800262c:	7029      	strb	r1, [r5, #0]
  oqp->q_link    = link;
 800262e:	f8c8 8050 	str.w	r8, [r8, #80]	; 0x50
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002632:	62e8      	str	r0, [r5, #44]	; 0x2c
 8002634:	6c18      	ldr	r0, [r3, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 8002636:	4c8a      	ldr	r4, [pc, #552]	; (8002860 <main+0x3f0>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8002638:	f8df e26c 	ldr.w	lr, [pc, #620]	; 80028a8 <main+0x438>
  tqp->prev = (thread_t *)tqp;
 800263c:	6064      	str	r4, [r4, #4]
  ST_ENABLE_CLOCK();
 800263e:	f040 0008 	orr.w	r0, r0, #8
 8002642:	6418      	str	r0, [r3, #64]	; 0x40
 8002644:	6e18      	ldr	r0, [r3, #96]	; 0x60
  ch.rlist.prio = NOPRIO;
 8002646:	60a2      	str	r2, [r4, #8]
 8002648:	f040 0008 	orr.w	r0, r0, #8
 800264c:	6618      	str	r0, [r3, #96]	; 0x60
 800264e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  ST_ENABLE_STOP();
 8002650:	f8de 7008 	ldr.w	r7, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002654:	4b83      	ldr	r3, [pc, #524]	; (8002864 <main+0x3f4>)
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8002656:	6124      	str	r4, [r4, #16]
  ST_ENABLE_STOP();
 8002658:	f047 0708 	orr.w	r7, r7, #8
 800265c:	f8ce 7008 	str.w	r7, [lr, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002660:	4e81      	ldr	r6, [pc, #516]	; (8002868 <main+0x3f8>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002662:	4877      	ldr	r0, [pc, #476]	; (8002840 <main+0x3d0>)
  ch_memcore.basemem = __heap_base__;
 8002664:	f8df c244 	ldr.w	ip, [pc, #580]	; 80028ac <main+0x43c>
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8002668:	f242 770f 	movw	r7, #9999	; 0x270f
 800266c:	629f      	str	r7, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800266e:	f04f 37ff 	mov.w	r7, #4294967295
 8002672:	62df      	str	r7, [r3, #44]	; 0x2c
  ch.rlist.older = (thread_t *)&ch.rlist;
 8002674:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CCMR1  = 0;
 8002676:	619a      	str	r2, [r3, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 8002678:	6267      	str	r7, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
  ch.vtlist.lasttime = (systime_t)0;
 800267c:	62a2      	str	r2, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 800267e:	60da      	str	r2, [r3, #12]
  H_NEXT(&default_heap.header) = NULL;
 8002680:	6072      	str	r2, [r6, #4]
  STM32_ST_TIM->CR2    = 0;
 8002682:	605a      	str	r2, [r3, #4]
  H_PAGES(&default_heap.header) = 0;
 8002684:	60b2      	str	r2, [r6, #8]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8002686:	6159      	str	r1, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8002688:	6019      	str	r1, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	f880 3332 	strb.w	r3, [r0, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002690:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002694:	f104 031c 	add.w	r3, r4, #28
 8002698:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
 800269c:	61e3      	str	r3, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800269e:	6041      	str	r1, [r0, #4]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80026a0:	6223      	str	r3, [r4, #32]
  tqp->next = (thread_t *)tqp;
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <main+0x3fc>)
  default_heap.provider = chCoreAllocAlignedWithOffset;
 80026a4:	4972      	ldr	r1, [pc, #456]	; (8002870 <main+0x400>)
 80026a6:	6031      	str	r1, [r6, #0]
 80026a8:	f106 0e0c 	add.w	lr, r6, #12
 80026ac:	4871      	ldr	r0, [pc, #452]	; (8002874 <main+0x404>)
  ch_memcore.topmem  = __heap_end__;
 80026ae:	4972      	ldr	r1, [pc, #456]	; (8002878 <main+0x408>)
  ch_memcore.basemem = __heap_base__;
 80026b0:	f8cc 0000 	str.w	r0, [ip]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80026b4:	f103 0910 	add.w	r9, r3, #16
  ch_memcore.topmem  = __heap_end__;
 80026b8:	f8cc 1004 	str.w	r1, [ip, #4]
  tmp->cumulative = (rttime_t)0;
 80026bc:	2000      	movs	r0, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	6024      	str	r4, [r4, #0]
 80026c2:	f8c6 e00c 	str.w	lr, [r6, #12]
  tqp->prev = (thread_t *)tqp;
 80026c6:	f8c6 e010 	str.w	lr, [r6, #16]
 80026ca:	f8c3 9010 	str.w	r9, [r3, #16]
 80026ce:	f103 0e3c 	add.w	lr, r3, #60	; 0x3c
 80026d2:	f103 0940 	add.w	r9, r3, #64	; 0x40
 80026d6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80026da:	e9c3 3300 	strd	r3, r3, [r3]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80026de:	2114      	movs	r1, #20
 80026e0:	e9c3 e90f 	strd	lr, r9, [r3, #60]	; 0x3c
 80026e4:	6172      	str	r2, [r6, #20]
  tmp->last       = (rtcnt_t)0;
 80026e6:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
  mp->align = align;
 80026ea:	2604      	movs	r6, #4
  tmp->best       = (rtcnt_t)-1;
 80026ec:	970e      	str	r7, [sp, #56]	; 0x38
 80026ee:	f103 0c24 	add.w	ip, r3, #36	; 0x24
 80026f2:	f103 0728 	add.w	r7, r3, #40	; 0x28
  mp->object_size = size;
 80026f6:	201c      	movs	r0, #28
  ch.tm.offset = (rtcnt_t)0;
 80026f8:	6762      	str	r2, [r4, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 80026fa:	9211      	str	r2, [sp, #68]	; 0x44
 80026fc:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 80026fe:	615a      	str	r2, [r3, #20]
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
  mp->object_size = size;
 8002702:	6199      	str	r1, [r3, #24]
  mp->provider = provider;
 8002704:	4a5d      	ldr	r2, [pc, #372]	; (800287c <main+0x40c>)
 8002706:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
 800270a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800270e:	629f      	str	r7, [r3, #40]	; 0x28
  mp->object_size = size;
 8002710:	6318      	str	r0, [r3, #48]	; 0x30
 8002712:	6459      	str	r1, [r3, #68]	; 0x44
  mp->align = align;
 8002714:	61de      	str	r6, [r3, #28]
 8002716:	635e      	str	r6, [r3, #52]	; 0x34
  mp->provider = provider;
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	639a      	str	r2, [r3, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 800271c:	a80e      	add	r0, sp, #56	; 0x38
 800271e:	f7fe f82f 	bl	8000780 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8002722:	a80e      	add	r0, sp, #56	; 0x38
 8002724:	f7fe f804 	bl	8000730 <chTMStopMeasurementX>
  } while (i > 0U);
 8002728:	3e01      	subs	r6, #1
 800272a:	d1f7      	bne.n	800271c <main+0x2ac>
  REG_INSERT(tp);
 800272c:	4b54      	ldr	r3, [pc, #336]	; (8002880 <main+0x410>)
 800272e:	6960      	ldr	r0, [r4, #20]
  ch.tm.offset = tm.best;
 8002730:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002732:	6761      	str	r1, [r4, #116]	; 0x74
  tp->prio      = prio;
 8002734:	2780      	movs	r7, #128	; 0x80
  tp->refs      = (trefs_t)1;
 8002736:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8002738:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  tp->name      = name;
 800273c:	f8df e170 	ldr.w	lr, [pc, #368]	; 80028b0 <main+0x440>
  tp->prio      = prio;
 8002740:	63a7      	str	r7, [r4, #56]	; 0x38
  tlp->next = (thread_t *)tlp;
 8002742:	f103 0c28 	add.w	ip, r3, #40	; 0x28
  tp->realprio  = prio;
 8002746:	66e7      	str	r7, [r4, #108]	; 0x6c
  tp->epending  = (eventmask_t)0;
 8002748:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  REG_INSERT(tp);
 800274c:	e9c4 4010 	strd	r4, r0, [r4, #64]	; 0x40
  tp->flags     = CH_FLAG_MODE_STATIC;
 8002750:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 8002754:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
  tp->name      = name;
 8002758:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
 800275c:	2720      	movs	r7, #32
  REG_INSERT(tp);
 800275e:	6103      	str	r3, [r0, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8002760:	e9c4 3305 	strd	r3, r3, [r4, #20]
  tqp->next = (thread_t *)tqp;
 8002764:	e9c4 c116 	strd	ip, r1, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 8002768:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
  currp->wabase = NULL;
 800276c:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 800276e:	6621      	str	r1, [r4, #96]	; 0x60
 8002770:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 8002774:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <main+0x414>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002778:	4943      	ldr	r1, [pc, #268]	; (8002888 <main+0x418>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277a:	68d8      	ldr	r0, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277c:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8002780:	ea00 000c 	and.w	r0, r0, ip
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002784:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8002788:	4301      	orrs	r1, r0
 800278a:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800278e:	60d9      	str	r1, [r3, #12]
 8002790:	f8dc 100c 	ldr.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002794:	483d      	ldr	r0, [pc, #244]	; (800288c <main+0x41c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002796:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800279a:	f8cc 100c 	str.w	r1, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800279e:	6801      	ldr	r1, [r0, #0]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	f04f 0c10 	mov.w	ip, #16
 80027a4:	4311      	orrs	r1, r2
 80027a6:	6001      	str	r1, [r0, #0]
 80027a8:	f883 c01f 	strb.w	ip, [r3, #31]
 80027ac:	f883 7022 	strb.w	r7, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027b0:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 80027b4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80027b6:	f387 8811 	msr	BASEPRI, r7
  tp->wabase = tdp->wbase;
 80027ba:	4b35      	ldr	r3, [pc, #212]	; (8002890 <main+0x420>)
  REG_INSERT(tp);
 80027bc:	6961      	ldr	r1, [r4, #20]
  tp->prio      = prio;
 80027be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 80027c2:	e9c3 6232 	strd	r6, r2, [r3, #200]	; 0xc8
  tp->refs      = (trefs_t)1;
 80027c6:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027ca:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80027ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80027d2:	4830      	ldr	r0, [pc, #192]	; (8002894 <main+0x424>)
 80027d4:	66d8      	str	r0, [r3, #108]	; 0x6c
  tp->state     = CH_STATE_WTSTART;
 80027d6:	2202      	movs	r2, #2
  REG_INSERT(tp);
 80027d8:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
 80027dc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
  tp->name      = name;
 80027e0:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 80028b4 <main+0x444>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027e4:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <main+0x428>)
  REG_INSERT(tp);
 80027e6:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80027ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80027ee:	671e      	str	r6, [r3, #112]	; 0x70
  tqp->next = (thread_t *)tqp;
 80027f0:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  tp->epending  = (eventmask_t)0;
 80027f4:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  REG_INSERT(tp);
 80027f8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 80027fc:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->name      = name;
 8002800:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
  REG_INSERT(tp);
 8002804:	6108      	str	r0, [r1, #16]
  tlp->next = (thread_t *)tlp;
 8002806:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
 800280a:	e9c3 122e 	strd	r1, r2, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 800280e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002812:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8002814:	f7fe f9a4 	bl	8000b60 <chSchWakeupS.constprop.0>
 8002818:	f386 8811 	msr	BASEPRI, r6
 800281c:	f387 8811 	msr	BASEPRI, r7
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8002820:	f898 3008 	ldrb.w	r3, [r8, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d152      	bne.n	80028ce <main+0x45e>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <main+0x3e8>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <main+0x3d0>)
 800282c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800282e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002832:	6419      	str	r1, [r3, #64]	; 0x40
 8002834:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002836:	e03f      	b.n	80028b8 <main+0x448>
 8002838:	40026000 	.word	0x40026000
 800283c:	40026400 	.word	0x40026400
 8002840:	e000e100 	.word	0xe000e100
 8002844:	200008ac 	.word	0x200008ac
 8002848:	08004138 	.word	0x08004138
 800284c:	2000087c 	.word	0x2000087c
 8002850:	08000671 	.word	0x08000671
 8002854:	40004400 	.word	0x40004400
 8002858:	40023800 	.word	0x40023800
 800285c:	00010046 	.word	0x00010046
 8002860:	200009ac 	.word	0x200009ac
 8002864:	40000c00 	.word	0x40000c00
 8002868:	20000b54 	.word	0x20000b54
 800286c:	20000a24 	.word	0x20000a24
 8002870:	08000631 	.word	0x08000631
 8002874:	20000e98 	.word	0x20000e98
 8002878:	20008000 	.word	0x20008000
 800287c:	08000701 	.word	0x08000701
 8002880:	200009dc 	.word	0x200009dc
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	05fa0300 	.word	0x05fa0300
 800288c:	e0001000 	.word	0xe0001000
 8002890:	20000a70 	.word	0x20000a70
 8002894:	080008b1 	.word	0x080008b1
 8002898:	080002f1 	.word	0x080002f1
 800289c:	20000800 	.word	0x20000800
 80028a0:	40003800 	.word	0x40003800
 80028a4:	00010016 	.word	0x00010016
 80028a8:	e0042000 	.word	0xe0042000
 80028ac:	20000b48 	.word	0x20000b48
 80028b0:	08003f8c 	.word	0x08003f8c
 80028b4:	08003d78 	.word	0x08003d78
 80028b8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80028bc:	6619      	str	r1, [r3, #96]	; 0x60
 80028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c0:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80028c2:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80028c4:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80028c8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80028cc:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 80028ce:	f8d8 2074 	ldr.w	r2, [r8, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 80028d2:	4bae      	ldr	r3, [pc, #696]	; (8002b8c <main+0x71c>)
 80028d4:	429a      	cmp	r2, r3
 80028d6:	f000 82f4 	beq.w	8002ec2 <main+0xa52>
 80028da:	49ad      	ldr	r1, [pc, #692]	; (8002b90 <main+0x720>)
    fck = STM32_PCLK1 / config->speed;
 80028dc:	428a      	cmp	r2, r1
 80028de:	bf0c      	ite	eq
 80028e0:	f44f 7159 	moveq.w	r1, #868	; 0x364
 80028e4:	f44f 71d9 	movne.w	r1, #434	; 0x1b2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80028e8:	2340      	movs	r3, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80028ea:	f04f 0a01 	mov.w	sl, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80028ee:	f242 102c 	movw	r0, #8492	; 0x212c
  u->SR = 0;
 80028f2:	2700      	movs	r7, #0
  u->BRR = fck;
 80028f4:	6091      	str	r1, [r2, #8]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80028f6:	f04f 0902 	mov.w	r9, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80028fa:	6113      	str	r3, [r2, #16]
    sdp->rxmask = 0xFF;
 80028fc:	21ff      	movs	r1, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80028fe:	f8c2 a014 	str.w	sl, [r2, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002902:	60d0      	str	r0, [r2, #12]
  u->SR = 0;
 8002904:	6017      	str	r7, [r2, #0]
  (void)u->SR;  /* SR reset step 1.*/
 8002906:	6810      	ldr	r0, [r2, #0]
  (void)u->DR;  /* SR reset step 2.*/
 8002908:	6852      	ldr	r2, [r2, #4]
    sdp->rxmask = 0xFF;
 800290a:	f888 1078 	strb.w	r1, [r8, #120]	; 0x78
 800290e:	f888 9008 	strb.w	r9, [r8, #8]
 8002912:	f387 8811 	msr	BASEPRI, r7
  chSysInit();

  sdStart(&SD2, &myserialcfg);
  tstrWifiInitParam param;
  int8_t ret;
  myPrintf("Bismillah\n");
 8002916:	489f      	ldr	r0, [pc, #636]	; (8002b94 <main+0x724>)
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 8002918:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8002bd4 <main+0x764>
 800291c:	f7ff f978 	bl	8001c10 <myPrintf>
  myPrintf("initializing bsp_init\n");
 8002920:	489d      	ldr	r0, [pc, #628]	; (8002b98 <main+0x728>)
 8002922:	f7ff f975 	bl	8001c10 <myPrintf>
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_RESET);
 8002926:	463a      	mov	r2, r7
 8002928:	4649      	mov	r1, r9
 800292a:	489c      	ldr	r0, [pc, #624]	; (8002b9c <main+0x72c>)
 800292c:	f7fe f840 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 8002930:	4640      	mov	r0, r8
 8002932:	463a      	mov	r2, r7
 8002934:	4649      	mov	r1, r9
 8002936:	f7fe f83b 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_RESET);
 800293a:	463a      	mov	r2, r7
 800293c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002940:	f7fe f836 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_RESET);
 8002944:	463a      	mov	r2, r7
 8002946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800294a:	f7fe f831 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 800294e:	4652      	mov	r2, sl
 8002950:	4649      	mov	r1, r9
 8002952:	4892      	ldr	r0, [pc, #584]	; (8002b9c <main+0x72c>)
 8002954:	f7fe f82c 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8002958:	4640      	mov	r0, r8
 800295a:	4652      	mov	r2, sl
 800295c:	4649      	mov	r1, r9
 800295e:	f7fe f827 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8002962:	4652      	mov	r2, sl
 8002964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002968:	f7fe f822 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 800296c:	4652      	mov	r2, sl
 800296e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002972:	f7fe f81d 	bl	80009b0 <_pal_lld_setgroupmode>
  palClearPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 8002976:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
  palSetPadMode(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_MODE_INPUT_PULLUP);
 800297a:	2220      	movs	r2, #32
 800297c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002980:	f7fe f816 	bl	80009b0 <_pal_lld_setgroupmode>
  palClearPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 8002984:	f8a8 901a 	strh.w	r9, [r8, #26]
  chThdSleepMilliseconds(u32TimeMsec);
 8002988:	2064      	movs	r0, #100	; 0x64
  palClearPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 800298a:	f8a8 b01a 	strh.w	fp, [r8, #26]
  chThdSleepMilliseconds(u32TimeMsec);
 800298e:	f7fe fa47 	bl	8000e20 <chThdSleep>
  palSetPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 8002992:	f8a8 9018 	strh.w	r9, [r8, #24]
  chThdSleepMilliseconds(u32TimeMsec);
 8002996:	2064      	movs	r0, #100	; 0x64
 8002998:	f7fe fa42 	bl	8000e20 <chThdSleep>
  palSetPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 800299c:	f8a8 b018 	strh.w	fp, [r8, #24]
  chThdSleepMilliseconds(u32TimeMsec);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f7fe fa3d 	bl	8000e20 <chThdSleep>
 80029a6:	f04f 0b20 	mov.w	fp, #32
 80029aa:	f38b 8811 	msr	BASEPRI, fp
  tp->wabase = (stkalign_t *)wsp;
 80029ae:	4a7c      	ldr	r2, [pc, #496]	; (8002ba0 <main+0x730>)
  REG_INSERT(tp);
 80029b0:	6961      	ldr	r1, [r4, #20]
  tp->state     = CH_STATE_WTSTART;
 80029b2:	f8a2 9120 	strh.w	r9, [r2, #288]	; 0x120
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80029b6:	4b7b      	ldr	r3, [pc, #492]	; (8002ba4 <main+0x734>)
  tp->name      = name;
 80029b8:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8002bd8 <main+0x768>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80029bc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  REG_INSERT(tp);
 80029c0:	f502 7080 	add.w	r0, r2, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80029c4:	f8df c214 	ldr.w	ip, [pc, #532]	; 8002bdc <main+0x76c>
 80029c8:	f8c2 70e0 	str.w	r7, [r2, #224]	; 0xe0
 80029cc:	f102 0edc 	add.w	lr, r2, #220	; 0xdc
  tp->prio      = prio;
 80029d0:	2380      	movs	r3, #128	; 0x80
  REG_INSERT(tp);
 80029d2:	e9c2 1945 	strd	r1, r9, [r2, #276]	; 0x114
  tp->prio      = prio;
 80029d6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  tp->realprio  = prio;
 80029da:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
  tp->epending  = (eventmask_t)0;
 80029de:	e9c2 774d 	strd	r7, r7, [r2, #308]	; 0x134
  tqp->next = (thread_t *)tqp;
 80029e2:	f502 7396 	add.w	r3, r2, #300	; 0x12c
  tp->refs      = (trefs_t)1;
 80029e6:	f882 a122 	strb.w	sl, [r2, #290]	; 0x122
  REG_INSERT(tp);
 80029ea:	f8c2 4110 	str.w	r4, [r2, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 80029ee:	f8c2 211c 	str.w	r2, [r2, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80029f2:	f8c2 e10c 	str.w	lr, [r2, #268]	; 0x10c
 80029f6:	f8c2 c0dc 	str.w	ip, [r2, #220]	; 0xdc
  REG_INSERT(tp);
 80029fa:	6108      	str	r0, [r1, #16]
  tlp->next = (thread_t *)tlp;
 80029fc:	f502 7194 	add.w	r1, r2, #296	; 0x128
  tqp->next = (thread_t *)tqp;
 8002a00:	e9c2 134a 	strd	r1, r3, [r2, #296]	; 0x128
  tqp->prev = (thread_t *)tqp;
 8002a04:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8002a08:	6160      	str	r0, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8002a0a:	f7fe f8a9 	bl	8000b60 <chSchWakeupS.constprop.0>
 8002a0e:	f387 8811 	msr	BASEPRI, r7
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 8002a12:	4c65      	ldr	r4, [pc, #404]	; (8002ba8 <main+0x738>)
  myPrintf("initializing wifi_init\n");
 8002a14:	4865      	ldr	r0, [pc, #404]	; (8002bac <main+0x73c>)
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8002a16:	970d      	str	r7, [sp, #52]	; 0x34
 8002a18:	e9cd 7709 	strd	r7, r7, [sp, #36]	; 0x24
 8002a1c:	e9cd 770b 	strd	r7, r7, [sp, #44]	; 0x2c
  param.pfAppWifiCb = wifi_cb;
 8002a20:	9408      	str	r4, [sp, #32]
  myPrintf("initializing wifi_init\n");
 8002a22:	f7ff f8f5 	bl	8001c10 <myPrintf>
	gu8scanInProgress = 0;
 8002a26:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <main+0x740>)
	gpfAppWifiCb = param->pfAppWifiCb;
 8002a28:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <main+0x744>)
	gu8scanInProgress = 0;
 8002a2a:	7017      	strb	r7, [r2, #0]
  palSetPadMode(SPI_WIFI_MISO_PORT, SPI_WIFI_MISO_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8002a2c:	485b      	ldr	r0, [pc, #364]	; (8002b9c <main+0x72c>)
	gpfAppWifiCb = param->pfAppWifiCb;
 8002a2e:	601c      	str	r4, [r3, #0]
 8002a30:	f240 229a 	movw	r2, #666	; 0x29a
 8002a34:	2104      	movs	r1, #4
 8002a36:	f7fd ffbb 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_MOSI_PORT, SPI_WIFI_MOSI_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8002a3a:	4858      	ldr	r0, [pc, #352]	; (8002b9c <main+0x72c>)
 8002a3c:	f240 229a 	movw	r2, #666	; 0x29a
 8002a40:	2108      	movs	r1, #8
 8002a42:	f7fd ffb5 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_SCK_PORT, SPI_WIFI_SCK_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 8002a46:	4640      	mov	r0, r8
 8002a48:	f240 229a 	movw	r2, #666	; 0x29a
 8002a4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a50:	f7fd ffae 	bl	80009b0 <_pal_lld_setgroupmode>
 8002a54:	f38b 8811 	msr	BASEPRI, fp
  if (spip->state == SPI_STOP) {
 8002a58:	782a      	ldrb	r2, [r5, #0]
  spip->config = config;
 8002a5a:	4b57      	ldr	r3, [pc, #348]	; (8002bb8 <main+0x748>)
 8002a5c:	606b      	str	r3, [r5, #4]
 8002a5e:	4552      	cmp	r2, sl
 8002a60:	f000 8262 	beq.w	8002f28 <main+0xab8>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002a64:	214c      	movs	r1, #76	; 0x4c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002a66:	e9d5 020a 	ldrd	r0, r2, [r5, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002a6a:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002a6e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002a72:	e9c5 020a 	strd	r0, r2, [r5, #40]	; 0x28
  if (spip->config->circular) {
 8002a76:	781a      	ldrb	r2, [r3, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002a78:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  if (spip->config->circular) {
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	f000 8219 	beq.w	8002eb2 <main+0xa42>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002a80:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002a82:	f440 7084 	orr.w	r0, r0, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002a86:	f442 7284 	orr.w	r2, r2, #264	; 0x108
 8002a8a:	e9c5 020a 	strd	r0, r2, [r5, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002a8e:	69ea      	ldr	r2, [r5, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8002a90:	8a5b      	ldrh	r3, [r3, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002a92:	6810      	ldr	r0, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8002a94:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8002a98:	f441 7141 	orr.w	r1, r1, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002a9c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002aa0:	6010      	str	r0, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8002aa2:	6011      	str	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8002aa4:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8002aa6:	6813      	ldr	r3, [r2, #0]
  spip->state = SPI_READY;
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	2700      	movs	r7, #0
 8002ab2:	7029      	strb	r1, [r5, #0]
 8002ab4:	f387 8811 	msr	BASEPRI, r7
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	myPrintf("Chip ID %lx\n", nmi_get_chipid());
 8002ab8:	f7fe fc6a 	bl	8001390 <nmi_get_chipid>
	gu8Crc_off = 0;
 8002abc:	4c3f      	ldr	r4, [pc, #252]	; (8002bbc <main+0x74c>)
 8002abe:	4601      	mov	r1, r0
 8002ac0:	483f      	ldr	r0, [pc, #252]	; (8002bc0 <main+0x750>)
 8002ac2:	f7ff f8a5 	bl	8001c10 <myPrintf>
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 8002ac6:	a90e      	add	r1, sp, #56	; 0x38
 8002ac8:	f64e 0024 	movw	r0, #59428	; 0xe824
	uint32 reg = 0;
 8002acc:	970e      	str	r7, [sp, #56]	; 0x38
	gu8Crc_off = 0;
 8002ace:	7027      	strb	r7, [r4, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 8002ad0:	f7fe fc06 	bl	80012e0 <spi_read_reg>
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	f000 825a 	beq.w	8002f8e <main+0xb1e>
	if(gu8Crc_off == 0)
 8002ada:	7823      	ldrb	r3, [r4, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 81f3 	beq.w	8002ec8 <main+0xa58>
	if (!spi_read_reg(0x1000, &chipid)) {
 8002ae2:	af06      	add	r7, sp, #24
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002aea:	f7fe fbf9 	bl	80012e0 <spi_read_reg>
 8002aee:	e001      	b.n	8002af4 <main+0x684>
 8002af0:	f7fe f996 	bl	8000e20 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002af4:	a90e      	add	r1, sp, #56	; 0x38
 8002af6:	f241 0014 	movw	r0, #4116	; 0x1014
 8002afa:	f7fe fbf1 	bl	80012e0 <spi_read_reg>
	return u32Val;
 8002afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f04f 000a 	mov.w	r0, #10
 8002b06:	daf3      	bge.n	8002af0 <main+0x680>
	spi_read_reg(u32Addr, &u32Val);
 8002b08:	482e      	ldr	r0, [pc, #184]	; (8002bc4 <main+0x754>)
 8002b0a:	a90e      	add	r1, sp, #56	; 0x38
 8002b0c:	f7fe fbe8 	bl	80012e0 <spi_read_reg>
	return u32Val;
 8002b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 8002b12:	07da      	lsls	r2, r3, #31
 8002b14:	d41c      	bmi.n	8002b50 <main+0x6e0>
 8002b16:	200a      	movs	r0, #10
 8002b18:	f7fe f982 	bl	8000e20 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002b1c:	a90e      	add	r1, sp, #56	; 0x38
 8002b1e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8002b22:	f7fe fbdd 	bl	80012e0 <spi_read_reg>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
 8002b26:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002be0 <main+0x770>
	return u32Val;
 8002b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		{
			nm_bsp_sleep(1);
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > (uint32)TIMEOUT)
 8002b2c:	f644 6420 	movw	r4, #20000	; 0x4e20
 8002b30:	e00a      	b.n	8002b48 <main+0x6d8>
 8002b32:	f7fe f975 	bl	8000e20 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002b36:	a90e      	add	r1, sp, #56	; 0x38
 8002b38:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8002b3c:	f7fe fbd0 	bl	80012e0 <spi_read_reg>
 8002b40:	3c01      	subs	r4, #1
	return u32Val;
 8002b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b44:	f000 822f 	beq.w	8002fa6 <main+0xb36>
		while(reg != M2M_FINISH_BOOT_ROM)
 8002b48:	4543      	cmp	r3, r8
 8002b4a:	f04f 000a 	mov.w	r0, #10
 8002b4e:	d1f0      	bne.n	8002b32 <main+0x6c2>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 8002b50:	491d      	ldr	r1, [pc, #116]	; (8002bc8 <main+0x758>)
 8002b52:	f241 008c 	movw	r0, #4236	; 0x108c
 8002b56:	f7fe fd8b 	bl	8001670 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 8002b5a:	f7fe fc19 	bl	8001390 <nmi_get_chipid>
 8002b5e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002b62:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 8002b66:	f0c0 820e 	bcc.w	8002f86 <main+0xb16>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe fd88 	bl	8001680 <chip_apply_conf>
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <main+0x75c>)
 8002b72:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8002b76:	f7fe fd7b 	bl	8001670 <nm_write_reg>
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <main+0x760>)
	volatile uint32 regAddress = NMI_STATE_REG;
 8002b7c:	f241 028c 	movw	r2, #4236	; 0x108c
 8002b80:	9203      	str	r2, [sp, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 8002b82:	f644 6420 	movw	r4, #20000	; 0x4e20
 8002b86:	9304      	str	r3, [sp, #16]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 8002b88:	e036      	b.n	8002bf8 <main+0x788>
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40011400 	.word	0x40011400
 8002b94:	08003d80 	.word	0x08003d80
 8002b98:	08003d8c 	.word	0x08003d8c
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	20000d50 	.word	0x20000d50
 8002ba4:	080002f1 	.word	0x080002f1
 8002ba8:	080020d1 	.word	0x080020d1
 8002bac:	08003dac 	.word	0x08003dac
 8002bb0:	20000c22 	.word	0x20000c22
 8002bb4:	20000bf4 	.word	0x20000bf4
 8002bb8:	08004124 	.word	0x08004124
 8002bbc:	20000c21 	.word	0x20000c21
 8002bc0:	08003dc4 	.word	0x08003dc4
 8002bc4:	000207bc 	.word	0x000207bc
 8002bc8:	13541354 	.word	0x13541354
 8002bcc:	ef522f61 	.word	0xef522f61
 8002bd0:	02532636 	.word	0x02532636
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	08003da4 	.word	0x08003da4
 8002bdc:	08000e41 	.word	0x08000e41
 8002be0:	10add09e 	.word	0x10add09e
 8002be4:	f7fe f91c 	bl	8000e20 <chThdSleep>

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 8002be8:	9803      	ldr	r0, [sp, #12]
	spi_read_reg(u32Addr, &u32Val);
 8002bea:	a90e      	add	r1, sp, #56	; 0x38
 8002bec:	f7fe fb78 	bl	80012e0 <spi_read_reg>
		if(++cnt >= u32Timeout)
 8002bf0:	3c01      	subs	r4, #1
	return u32Val;
 8002bf2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002bf4:	f000 81d7 	beq.w	8002fa6 <main+0xb36>
	while (checkValue != reg)
 8002bf8:	9b04      	ldr	r3, [sp, #16]
 8002bfa:	42b3      	cmp	r3, r6
 8002bfc:	f04f 0014 	mov.w	r0, #20
 8002c00:	d1f0      	bne.n	8002be4 <main+0x774>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 8002c02:	9a04      	ldr	r2, [sp, #16]
 8002c04:	4bb8      	ldr	r3, [pc, #736]	; (8002ee8 <main+0xa78>)
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f000 81df 	beq.w	8002fca <main+0xb5a>
	uint32 reg = 0;
 8002c0c:	2300      	movs	r3, #0
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002c0e:	a90e      	add	r1, sp, #56	; 0x38
 8002c10:	f241 4008 	movw	r0, #5128	; 0x1408
 8002c14:	930e      	str	r3, [sp, #56]	; 0x38
 8002c16:	f7fe fbab 	bl	8001370 <nm_spi_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	f040 81c4 	bne.w	8002faa <main+0xb3a>
	reg |= ((uint32) 1 << 8);
 8002c22:	990e      	ldr	r1, [sp, #56]	; 0x38
	return nm_spi_write_reg(u32Addr,u32Val);
 8002c24:	f241 4008 	movw	r0, #5128	; 0x1408
 8002c28:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c2c:	910e      	str	r1, [sp, #56]	; 0x38
 8002c2e:	f7fe fd0f 	bl	8001650 <nm_spi_write_reg>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002c32:	4606      	mov	r6, r0
 8002c34:	2800      	cmp	r0, #0
 8002c36:	f040 81b8 	bne.w	8002faa <main+0xb3a>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002c3a:	a90e      	add	r1, sp, #56	; 0x38
 8002c3c:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002c40:	f7fe fb96 	bl	8001370 <nm_spi_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002c44:	4606      	mov	r6, r0
 8002c46:	2800      	cmp	r0, #0
 8002c48:	f040 81af 	bne.w	8002faa <main+0xb3a>
	reg |= ((uint32) 1 << 16);
 8002c4c:	990e      	ldr	r1, [sp, #56]	; 0x38
	return nm_spi_write_reg(u32Addr,u32Val);
 8002c4e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002c52:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002c56:	910e      	str	r1, [sp, #56]	; 0x38
 8002c58:	f7fe fcfa 	bl	8001650 <nm_spi_write_reg>
	} else {
		/*continue running*/
	}

	ret = enable_interrupts();
	if (M2M_SUCCESS != ret) {
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	f040 81a3 	bne.w	8002faa <main+0xb3a>
 8002c64:	4ca1      	ldr	r4, [pc, #644]	; (8002eec <main+0xa7c>)
 8002c66:	4623      	mov	r3, r4
 8002c68:	f104 0228 	add.w	r2, r4, #40	; 0x28
		*pBuf = val;
 8002c6c:	f803 6b01 	strb.w	r6, [r3], #1
	}while(--sz);
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d1fb      	bne.n	8002c6c <main+0x7fc>
 8002c74:	2020      	movs	r0, #32
 8002c76:	f380 8811 	msr	BASEPRI, r0
  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 8002c7a:	f7fd fca9 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 8002c7e:	f386 8811 	msr	BASEPRI, r6
 8002c82:	f380 8811 	msr	BASEPRI, r0
 8002c86:	4b9a      	ldr	r3, [pc, #616]	; (8002ef0 <main+0xa80>)
  pep->arg = arg;
 8002c88:	4a9a      	ldr	r2, [pc, #616]	; (8002ef4 <main+0xa84>)
  pep->cb = cb;
 8002c8a:	e9c2 363e 	strd	r3, r6, [r2, #248]	; 0xf8
 8002c8e:	f386 8811 	msr	BASEPRI, r6
	tstrGpRegs strgp = {0};
 8002c92:	e9cd 6605 	strd	r6, r6, [sp, #20]
			break;
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 8002c96:	4b98      	ldr	r3, [pc, #608]	; (8002ef8 <main+0xa88>)
			gstrHifCxt.pfWifiCb = fn;
 8002c98:	4a98      	ldr	r2, [pc, #608]	; (8002efc <main+0xa8c>)
			gstrHifCxt.pfHifCb = fn;
 8002c9a:	61e3      	str	r3, [r4, #28]
 8002c9c:	607e      	str	r6, [r7, #4]
			gstrHifCxt.pfWifiCb = fn;
 8002c9e:	60e2      	str	r2, [r4, #12]
 8002ca0:	ab0e      	add	r3, sp, #56	; 0x38
		*pBuf = val;
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f803 2b01 	strb.w	r2, [r3], #1
	}while(--sz);
 8002ca8:	a918      	add	r1, sp, #96	; 0x60
 8002caa:	428b      	cmp	r3, r1
 8002cac:	d1fa      	bne.n	8002ca4 <main+0x834>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002cae:	4894      	ldr	r0, [pc, #592]	; (8002f00 <main+0xa90>)
 8002cb0:	a905      	add	r1, sp, #20
 8002cb2:	f7fe fb5d 	bl	8001370 <nm_spi_read_reg_with_ret>
		if(ret == M2M_SUCCESS)
 8002cb6:	4606      	mov	r6, r0
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	f040 81c8 	bne.w	800304e <main+0xbde>
			if(reg != 0)
 8002cbe:	9805      	ldr	r0, [sp, #20]
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	f000 81bb 	beq.w	800303c <main+0xbcc>
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 8002cc6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8002cca:	2208      	movs	r2, #8
 8002ccc:	4639      	mov	r1, r7
 8002cce:	f7fe fadf 	bl	8001290 <nm_read_block>
				if(ret == M2M_SUCCESS)
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	f040 81ba 	bne.w	800304e <main+0xbde>
					reg &= 0x0000ffff;
 8002cda:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8002cde:	9005      	str	r0, [sp, #20]
					if(reg != 0)
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f000 81ab 	beq.w	800303c <main+0xbcc>
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 8002ce6:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8002cea:	2228      	movs	r2, #40	; 0x28
 8002cec:	a90e      	add	r1, sp, #56	; 0x38
 8002cee:	f7fe facf 	bl	8001290 <nm_read_block>
						if(ret == M2M_SUCCESS)
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	f040 81aa 	bne.w	800304e <main+0xbde>
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002cfa:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
 8002cfe:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002d02:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002d06:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002d0a:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002d0e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002d12:	f000 000f 	and.w	r0, r0, #15
 8002d16:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002d1a:	f003 050f 	and.w	r5, r3, #15
 8002d1e:	ea4f 1e02 	mov.w	lr, r2, lsl #4
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002d22:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002d26:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
 8002d2a:	fa5f fe8e 	uxtb.w	lr, lr
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002d2e:	fa5f fc8c 	uxtb.w	ip, ip
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 8002d32:	ea55 050e 	orrs.w	r5, r5, lr
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002d36:	ea40 000c 	orr.w	r0, r0, ip
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 8002d3a:	f000 8185 	beq.w	8003048 <main+0xbd8>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	f000 8182 	beq.w	8003048 <main+0xbd8>
							if(curr_drv_ver <  min_req_drv_ver) {
 8002d44:	f241 3c54 	movw	ip, #4948	; 0x1354
 8002d48:	4560      	cmp	r0, ip
 8002d4a:	f200 8174 	bhi.w	8003036 <main+0xbc6>
							if(curr_drv_ver >  curr_firm_ver) {
 8002d4e:	f241 3053 	movw	r0, #4947	; 0x1353
								ret = M2M_ERR_FW_VER_MISMATCH;
 8002d52:	4285      	cmp	r5, r0
 8002d54:	bf98      	it	ls
 8002d56:	f06f 060c 	mvnls.w	r6, #12
	myPrintf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 8002d5a:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8002d5e:	9000      	str	r0, [sp, #0]
 8002d60:	4868      	ldr	r0, [pc, #416]	; (8002f04 <main+0xa94>)
 8002d62:	f7fe ff55 	bl	8001c10 <myPrintf>
	myPrintf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 8002d66:	f10d 024e 	add.w	r2, sp, #78	; 0x4e
 8002d6a:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8002d6e:	4866      	ldr	r0, [pc, #408]	; (8002f08 <main+0xa98>)
 8002d70:	f7fe ff4e 	bl	8001c10 <myPrintf>
	myPrintf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 8002d74:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8002d78:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8002d7c:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8002d80:	4862      	ldr	r0, [pc, #392]	; (8002f0c <main+0xa9c>)
 8002d82:	f7fe ff45 	bl	8001c10 <myPrintf>
	myPrintf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 8002d86:	2205      	movs	r2, #5
 8002d88:	2113      	movs	r1, #19
 8002d8a:	4861      	ldr	r0, [pc, #388]	; (8002f10 <main+0xaa0>)
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	f7fe ff3f 	bl	8001c10 <myPrintf>
	myPrintf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 8002d92:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <main+0xaa4>)
 8002d94:	4960      	ldr	r1, [pc, #384]	; (8002f18 <main+0xaa8>)
 8002d96:	4861      	ldr	r0, [pc, #388]	; (8002f1c <main+0xaac>)
 8002d98:	f7fe ff3a 	bl	8001c10 <myPrintf>
  ret = m2m_wifi_init(&param);

  if (M2M_SUCCESS != ret) {
 8002d9c:	2e00      	cmp	r6, #0
 8002d9e:	f040 810f 	bne.w	8002fc0 <main+0xb50>
      myPrintf("main: m2m_wifi_init call error!(%d)\r\n", ret);
      while (1) {
      }
  }
  myPrintf("initializing wifi_request_scan\n");
 8002da2:	485f      	ldr	r0, [pc, #380]	; (8002f20 <main+0xab0>)
	  palClearPad(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN);
 8002da4:	4e5f      	ldr	r6, [pc, #380]	; (8002f24 <main+0xab4>)
 8002da6:	f7fe ff33 	bl	8001c10 <myPrintf>
  m2m_wifi_request_scan(M2M_WIFI_CH_ALL);   /* Request scan. */
 8002daa:	f7fe fde1 	bl	8001970 <m2m_wifi_request_scan.constprop.0>
	while (gstrHifCxt.u8Interrupt) {
 8002dae:	78e3      	ldrb	r3, [r4, #3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d079      	beq.n	8002ea8 <main+0xa38>
		gstrHifCxt.u8Interrupt--;
 8002db4:	78e3      	ldrb	r3, [r4, #3]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	70e3      	strb	r3, [r4, #3]
 8002dbc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8002dc0:	a905      	add	r1, sp, #20
 8002dc2:	f241 0070 	movw	r0, #4208	; 0x1070
 8002dc6:	f7fe fad3 	bl	8001370 <nm_spi_read_reg_with_ret>
	if(M2M_SUCCESS == ret)
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d1f8      	bne.n	8002dc0 <main+0x950>
		if(reg & 0x1)	/* New interrupt has been received */
 8002dce:	9905      	ldr	r1, [sp, #20]
 8002dd0:	07cb      	lsls	r3, r1, #31
 8002dd2:	d5f5      	bpl.n	8002dc0 <main+0x950>
			reg &= ~NBIT0;
 8002dd4:	f021 0101 	bic.w	r1, r1, #1
 8002dd8:	f8a6 801a 	strh.w	r8, [r6, #26]
	return nm_spi_write_reg(u32Addr,u32Val);
 8002ddc:	f241 0070 	movw	r0, #4208	; 0x1070
 8002de0:	9105      	str	r1, [sp, #20]
 8002de2:	f7fe fc35 	bl	8001650 <nm_spi_write_reg>
			if(ret != M2M_SUCCESS)goto ERR1;
 8002de6:	4603      	mov	r3, r0
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d1e9      	bne.n	8002dc0 <main+0x950>
			size = (uint16)((reg >> 2) & 0xfff);
 8002dec:	9d05      	ldr	r5, [sp, #20]
			gstrHifCxt.u8HifRXDone = 1;
 8002dee:	2201      	movs	r2, #1
			size = (uint16)((reg >> 2) & 0xfff);
 8002df0:	f3c5 058b 	ubfx	r5, r5, #2, #12
			gstrHifCxt.u8HifRXDone = 1;
 8002df4:	70a2      	strb	r2, [r4, #2]
			if (size > 0) {
 8002df6:	2d00      	cmp	r5, #0
 8002df8:	d0e2      	beq.n	8002dc0 <main+0x950>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002dfa:	a90e      	add	r1, sp, #56	; 0x38
 8002dfc:	f241 0084 	movw	r0, #4228	; 0x1084
				uint32 address = 0;
 8002e00:	930e      	str	r3, [sp, #56]	; 0x38
 8002e02:	f7fe fab5 	bl	8001370 <nm_spi_read_reg_with_ret>
				if(M2M_SUCCESS != ret)
 8002e06:	2800      	cmp	r0, #0
 8002e08:	f040 8109 	bne.w	800301e <main+0xbae>
				gstrHifCxt.u32RxAddr = address;
 8002e0c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002e0e:	6060      	str	r0, [r4, #4]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8002e10:	2204      	movs	r2, #4
 8002e12:	4639      	mov	r1, r7
				gstrHifCxt.u32RxSize = size;
 8002e14:	60a5      	str	r5, [r4, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8002e16:	f7fe fa3b 	bl	8001290 <nm_read_block>
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8002e1a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f8ad 301a 	strh.w	r3, [sp, #26]
				if(M2M_SUCCESS != ret)
 8002e24:	2800      	cmp	r0, #0
 8002e26:	f040 80fa 	bne.w	800301e <main+0xbae>
				if(strHif.u16Length != size)
 8002e2a:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	429d      	cmp	r5, r3
 8002e32:	d006      	beq.n	8002e42 <main+0x9d2>
					if((size - strHif.u16Length) > 4)
 8002e34:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1aed      	subs	r5, r5, r3
 8002e3c:	2d04      	cmp	r5, #4
 8002e3e:	f300 80ee 	bgt.w	800301e <main+0xbae>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8002e42:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f000 80e0 	beq.w	800300c <main+0xb9c>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8002e4c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	f000 80d2 	beq.w	8002ffa <main+0xb8a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8002e56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	f000 80c4 	beq.w	8002fe8 <main+0xb78>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8002e60:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	f000 80b6 	beq.w	8002fd6 <main+0xb66>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8002e6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e6e:	2b07      	cmp	r3, #7
 8002e70:	f000 80d8 	beq.w	8003024 <main+0xbb4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8002e74:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d1a1      	bne.n	8002dc0 <main+0x950>
				    if(gstrHifCxt.pfSslCb)
 8002e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e7e:	b14b      	cbz	r3, 8002e94 <main+0xa24>
					    temp = (uint16)strHif.u16Length;
 8002e80:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e88:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8002e8c:	3908      	subs	r1, #8
 8002e8e:	b289      	uxth	r1, r1
 8002e90:	3208      	adds	r2, #8
 8002e92:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
 8002e94:	78a3      	ldrb	r3, [r4, #2]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d089      	beq.n	8002dae <main+0x93e>
					ret = hif_set_rx_done();
 8002e9a:	f7fe fd91 	bl	80019c0 <hif_set_rx_done>
					if(ret != M2M_SUCCESS) goto ERR1;
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d18e      	bne.n	8002dc0 <main+0x950>
	while (gstrHifCxt.u8Interrupt) {
 8002ea2:	78e3      	ldrb	r3, [r4, #3]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d185      	bne.n	8002db4 <main+0x944>
  while (1)
  {
      /* Handle pending events from network controller. */
      while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS) {
      }
      chThdSleepMilliseconds(100);
 8002ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002eac:	f7fd ffb8 	bl	8000e20 <chThdSleep>
  while (1)
 8002eb0:	e77d      	b.n	8002dae <main+0x93e>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eb2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eb4:	f420 7084 	bic.w	r0, r0, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eb8:	f422 7284 	bic.w	r2, r2, #264	; 0x108
 8002ebc:	e9c5 020a 	strd	r0, r2, [r5, #40]	; 0x28
 8002ec0:	e5e5      	b.n	8002a8e <main+0x61e>
    fck = STM32_PCLK2 / config->speed;
 8002ec2:	f44f 7159 	mov.w	r1, #868	; 0x364
 8002ec6:	e50f      	b.n	80028e8 <main+0x478>
		reg &= ~0x70;
 8002ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eca:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
		reg |= (0x5 << 4);
 8002ece:	f043 0150 	orr.w	r1, r3, #80	; 0x50
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 8002ed2:	f64e 0024 	movw	r0, #59428	; 0xe824
		reg |= (0x5 << 4);
 8002ed6:	910e      	str	r1, [sp, #56]	; 0x38
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 8002ed8:	f7fe fb7a 	bl	80015d0 <spi_write_reg>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d060      	beq.n	8002fa2 <main+0xb32>
		gu8Crc_off = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	7023      	strb	r3, [r4, #0]
 8002ee4:	e5fd      	b.n	8002ae2 <main+0x672>
 8002ee6:	bf00      	nop
 8002ee8:	02532636 	.word	0x02532636
 8002eec:	20000bf8 	.word	0x20000bf8
 8002ef0:	08000621 	.word	0x08000621
 8002ef4:	200008ac 	.word	0x200008ac
 8002ef8:	08000611 	.word	0x08000611
 8002efc:	08001a51 	.word	0x08001a51
 8002f00:	000c0008 	.word	0x000c0008
 8002f04:	08003dd4 	.word	0x08003dd4
 8002f08:	08003dfc 	.word	0x08003dfc
 8002f0c:	08003e18 	.word	0x08003e18
 8002f10:	08003e3c 	.word	0x08003e3c
 8002f14:	08003e54 	.word	0x08003e54
 8002f18:	08003e60 	.word	0x08003e60
 8002f1c:	08003e6c 	.word	0x08003e6c
 8002f20:	08003eac 	.word	0x08003eac
 8002f24:	40020400 	.word	0x40020400
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8002f28:	494c      	ldr	r1, [pc, #304]	; (800305c <main+0xbec>)
 8002f2a:	2003      	movs	r0, #3
 8002f2c:	f7fd faf8 	bl	8000520 <dmaStreamAllocI.part.0.constprop.0>
 8002f30:	494b      	ldr	r1, [pc, #300]	; (8003060 <main+0xbf0>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8002f32:	6228      	str	r0, [r5, #32]
 8002f34:	2004      	movs	r0, #4
 8002f36:	f7fd faf3 	bl	8000520 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI2(true);
 8002f3a:	4a4a      	ldr	r2, [pc, #296]	; (8003064 <main+0xbf4>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002f3c:	6a29      	ldr	r1, [r5, #32]
      rccEnableSPI2(true);
 8002f3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002f40:	680f      	ldr	r7, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002f42:	f8d0 c000 	ldr.w	ip, [r0]
      rccEnableSPI2(true);
 8002f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4c:	6e14      	ldr	r4, [r2, #96]	; 0x60
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002f4e:	686b      	ldr	r3, [r5, #4]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8002f50:	6268      	str	r0, [r5, #36]	; 0x24
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002f52:	69e8      	ldr	r0, [r5, #28]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002f54:	8a19      	ldrh	r1, [r3, #16]
      rccEnableSPI2(true);
 8002f56:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002f5a:	6614      	str	r4, [r2, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002f5c:	300c      	adds	r0, #12
      rccEnableSPI2(true);
 8002f5e:	6e12      	ldr	r2, [r2, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002f60:	60b8      	str	r0, [r7, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002f62:	f8cc 0008 	str.w	r0, [ip, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002f66:	0508      	lsls	r0, r1, #20
 8002f68:	f57f ad7d 	bpl.w	8002a66 <main+0x5f6>
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002f6c:	e9d5 020a 	ldrd	r0, r2, [r5, #40]	; 0x28
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002f70:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002f74:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002f78:	f440 5020 	orr.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002f7c:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002f80:	e9c5 020a 	strd	r0, r2, [r5, #40]	; 0x28
 8002f84:	e577      	b.n	8002a76 <main+0x606>
		chip_apply_conf(u32GpReg1);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fe fb7a 	bl	8001680 <chip_apply_conf>
 8002f8c:	e5f0      	b.n	8002b70 <main+0x700>
		gu8Crc_off = 1;
 8002f8e:	2301      	movs	r3, #1
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8002f90:	a90e      	add	r1, sp, #56	; 0x38
 8002f92:	f64e 0024 	movw	r0, #59428	; 0xe824
		gu8Crc_off = 1;
 8002f96:	7023      	strb	r3, [r4, #0]
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8002f98:	f7fe f9a2 	bl	80012e0 <spi_read_reg>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	f47f ad9c 	bne.w	8002ada <main+0x66a>
 8002fa2:	af06      	add	r7, sp, #24
 8002fa4:	e5a6      	b.n	8002af4 <main+0x684>
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 8002fa6:	f06f 0604 	mvn.w	r6, #4
 8002faa:	2320      	movs	r3, #32
 8002fac:	f383 8811 	msr	BASEPRI, r3
  spi_lld_stop(spip);
 8002fb0:	f7fd fda6 	bl	8000b00 <spi_lld_stop.constprop.0>
  spip->state  = SPI_STOP;
 8002fb4:	2201      	movs	r2, #1
  spip->config = NULL;
 8002fb6:	2300      	movs	r3, #0
  spip->state  = SPI_STOP;
 8002fb8:	702a      	strb	r2, [r5, #0]
  spip->config = NULL;
 8002fba:	606b      	str	r3, [r5, #4]
 8002fbc:	f383 8811 	msr	BASEPRI, r3
      myPrintf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8002fc0:	4829      	ldr	r0, [pc, #164]	; (8003068 <main+0xbf8>)
 8002fc2:	4631      	mov	r1, r6
 8002fc4:	f7fe fe24 	bl	8001c10 <myPrintf>
      while (1) {
 8002fc8:	e7fe      	b.n	8002fc8 <main+0xb58>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 8002fca:	2100      	movs	r1, #0
 8002fcc:	f241 008c 	movw	r0, #4236	; 0x108c
 8002fd0:	f7fe fb4e 	bl	8001670 <nm_write_reg>
	if (M2M_SUCCESS != ret) {
 8002fd4:	e61a      	b.n	8002c0c <main+0x79c>
					if(gstrHifCxt.pfCryptoCb)
 8002fd6:	6a23      	ldr	r3, [r4, #32]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f43f af5b 	beq.w	8002e94 <main+0xa24>
                        temp = (uint16)strHif.u16Length;
 8002fde:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fe4:	6a23      	ldr	r3, [r4, #32]
 8002fe6:	e74f      	b.n	8002e88 <main+0xa18>
					if(gstrHifCxt.pfOtaCb)
 8002fe8:	6963      	ldr	r3, [r4, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f43f af52 	beq.w	8002e94 <main+0xa24>
                            temp = (uint16)strHif.u16Length;
 8002ff0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ff6:	6963      	ldr	r3, [r4, #20]
 8002ff8:	e746      	b.n	8002e88 <main+0xa18>
					if(gstrHifCxt.pfIpCb)
 8002ffa:	6923      	ldr	r3, [r4, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f43f af49 	beq.w	8002e94 <main+0xa24>
                        temp = (uint16)strHif.u16Length;
 8003002:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003008:	6923      	ldr	r3, [r4, #16]
 800300a:	e73d      	b.n	8002e88 <main+0xa18>
					if(gstrHifCxt.pfWifiCb)
 800300c:	68e3      	ldr	r3, [r4, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f43f af40 	beq.w	8002e94 <main+0xa24>
                        temp = (uint16)strHif.u16Length;
 8003014:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800301a:	68e3      	ldr	r3, [r4, #12]
 800301c:	e734      	b.n	8002e88 <main+0xa18>
	if (1 == u8Enable)
 800301e:	f7fd fb2f 	bl	8000680 <nm_bsp_interrupt_ctrl.part.0>
			if(ret == M2M_SUCCESS) {
 8003022:	e6cd      	b.n	8002dc0 <main+0x950>
					if(gstrHifCxt.pfSigmaCb)
 8003024:	69a3      	ldr	r3, [r4, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f43f af34 	beq.w	8002e94 <main+0xa24>
                        temp = (uint16)strHif.u16Length;
 800302c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8003030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003032:	69a3      	ldr	r3, [r4, #24]
 8003034:	e728      	b.n	8002e88 <main+0xa18>
								ret = M2M_ERR_FW_VER_MISMATCH;
 8003036:	f06f 060c 	mvn.w	r6, #12
 800303a:	e68e      	b.n	8002d5a <main+0x8ea>
 800303c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8003040:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8003044:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
				ret = M2M_ERR_FAIL;
 8003048:	f06f 060b 	mvn.w	r6, #11
 800304c:	e685      	b.n	8002d5a <main+0x8ea>
 800304e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8003052:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8003056:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800305a:	e67e      	b.n	8002d5a <main+0x8ea>
 800305c:	080008e1 	.word	0x080008e1
 8003060:	080008c1 	.word	0x080008c1
 8003064:	40023800 	.word	0x40023800
 8003068:	08003e84 	.word	0x08003e84
 800306c:	00000000 	.word	0x00000000

08003070 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003070:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8003074:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003076:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800307a:	2300      	movs	r3, #0
 800307c:	f383 8811 	msr	BASEPRI, r3
}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
	...

08003090 <chThdExit>:
void chThdExit(msg_t msg) {
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	2220      	movs	r2, #32
 8003094:	4603      	mov	r3, r0
 8003096:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800309a:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <chThdExit+0x48>)
 800309c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800309e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 80030a0:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 80030a2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	d006      	beq.n	80030b8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 80030aa:	6803      	ldr	r3, [r0, #0]
 80030ac:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 80030ae:	f7fd fba7 	bl	8000800 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80030b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80030b4:	42a8      	cmp	r0, r5
 80030b6:	d1f8      	bne.n	80030aa <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 80030b8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80030bc:	b93b      	cbnz	r3, 80030ce <chThdExit+0x3e>
 80030be:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80030c2:	079b      	lsls	r3, r3, #30
 80030c4:	d103      	bne.n	80030ce <chThdExit+0x3e>
    REG_REMOVE(tp);
 80030c6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80030ca:	6113      	str	r3, [r2, #16]
 80030cc:	615a      	str	r2, [r3, #20]
}
 80030ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80030d2:	200f      	movs	r0, #15
 80030d4:	f7fd bd74 	b.w	8000bc0 <chSchGoSleepS>
 80030d8:	200009ac 	.word	0x200009ac
 80030dc:	00000000 	.word	0x00000000

080030e0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 80030e2:	6810      	ldr	r0, [r2, #0]
 80030e4:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 80030e6:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
 80030e8:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80030ea:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80030ec:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80030ee:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80030f0:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80030f4:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 80030f6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80030f8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80030fa:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80030fe:	e000      	b.n	8003102 <chSchDoReschedule+0x22>
 8003100:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4294      	cmp	r4, r2
 8003106:	d3fb      	bcc.n	8003100 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8003108:	685a      	ldr	r2, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 800310a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 800310c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8003110:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8003112:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8003114:	f7fd b8e4 	b.w	80002e0 <_port_switch>
 8003118:	200009ac 	.word	0x200009ac
 800311c:	00000000 	.word	0x00000000

08003120 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003120:	4b58      	ldr	r3, [pc, #352]	; (8003284 <__early_init+0x164>)
  gpiop->OTYPER  = config->otyper;
 8003122:	4859      	ldr	r0, [pc, #356]	; (8003288 <__early_init+0x168>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003124:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8003126:	4959      	ldr	r1, [pc, #356]	; (800328c <__early_init+0x16c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003128:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800312c:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 800312e:	611a      	str	r2, [r3, #16]
 8003130:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8003132:	4d57      	ldr	r5, [pc, #348]	; (8003290 <__early_init+0x170>)
  gpiop->PUPDR   = config->pupdr;
 8003134:	4e57      	ldr	r6, [pc, #348]	; (8003294 <__early_init+0x174>)
  gpiop->OTYPER  = config->otyper;
 8003136:	4c58      	ldr	r4, [pc, #352]	; (8003298 <__early_init+0x178>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8003138:	f022 0287 	bic.w	r2, r2, #135	; 0x87
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8003140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003142:	f042 0287 	orr.w	r2, r2, #135	; 0x87
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
 8003148:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800314a:	f042 0287 	orr.w	r2, r2, #135	; 0x87
 800314e:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8003150:	f46f 678a 	mvn.w	r7, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8003154:	2200      	movs	r2, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8003156:	f8d3 c050 	ldr.w	ip, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800315a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 800315c:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->OSPEEDR = config->ospeedr;
 8003160:	60af      	str	r7, [r5, #8]
  gpiop->AFRL    = config->afrl;
 8003162:	f44f 47ee 	mov.w	r7, #30464	; 0x7700
  gpiop->PUPDR   = config->pupdr;
 8003166:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 8003168:	f8c5 c014 	str.w	ip, [r5, #20]
  gpiop->AFRH    = config->afrh;
 800316c:	f44f 262a 	mov.w	r6, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8003170:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8003172:	4f4a      	ldr	r7, [pc, #296]	; (800329c <__early_init+0x17c>)
  gpiop->AFRH    = config->afrh;
 8003174:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003176:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8003178:	f04f 36ff 	mov.w	r6, #4294967295
  gpiop->PUPDR   = config->pupdr;
 800317c:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8003180:	6062      	str	r2, [r4, #4]
  gpiop->ODR     = config->odr;
 8003182:	f64f 75ff 	movw	r5, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8003186:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8003188:	60e7      	str	r7, [r4, #12]
  gpiop->MODER   = config->moder;
 800318a:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 800318c:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800318e:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8003190:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003192:	6027      	str	r7, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 8003194:	4f42      	ldr	r7, [pc, #264]	; (80032a0 <__early_init+0x180>)
  gpiop->OTYPER  = config->otyper;
 8003196:	6042      	str	r2, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8003198:	f5a4 34ca 	sub.w	r4, r4, #103424	; 0x19400
  gpiop->OSPEEDR = config->ospeedr;
 800319c:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 800319e:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 80031a0:	6145      	str	r5, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80031a2:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80031a4:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80031a6:	6002      	str	r2, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 80031a8:	483e      	ldr	r0, [pc, #248]	; (80032a4 <__early_init+0x184>)
  gpiop->OTYPER  = config->otyper;
 80031aa:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80031ac:	608e      	str	r6, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80031ae:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 80031b0:	4e3d      	ldr	r6, [pc, #244]	; (80032a8 <__early_init+0x188>)
  gpiop->ODR     = config->odr;
 80031b2:	614d      	str	r5, [r1, #20]
  PWR->CR = STM32_VOS;
 80031b4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  gpiop->AFRL    = config->afrl;
 80031b8:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80031ba:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80031bc:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 80031be:	641e      	str	r6, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 80031c0:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	0795      	lsls	r5, r2, #30
 80031ce:	d5fc      	bpl.n	80031ca <__early_init+0xaa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80031d0:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031d2:	4a2c      	ldr	r2, [pc, #176]	; (8003284 <__early_init+0x164>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 80031d4:	f021 0103 	bic.w	r1, r1, #3
 80031d8:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80031da:	6891      	ldr	r1, [r2, #8]
 80031dc:	f011 010c 	ands.w	r1, r1, #12
 80031e0:	d1fb      	bne.n	80031da <__early_init+0xba>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031e2:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80031e4:	4b27      	ldr	r3, [pc, #156]	; (8003284 <__early_init+0x164>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80031e6:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 80031ea:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80031ec:	6091      	str	r1, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 80031ee:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80031f0:	f041 0101 	orr.w	r1, r1, #1
 80031f4:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80031f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80031f8:	0794      	lsls	r4, r2, #30
 80031fa:	d5fc      	bpl.n	80031f6 <__early_init+0xd6>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 80031fc:	4a2b      	ldr	r2, [pc, #172]	; (80032ac <__early_init+0x18c>)
 80031fe:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003200:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003202:	492b      	ldr	r1, [pc, #172]	; (80032b0 <__early_init+0x190>)
  RCC->CR |= RCC_CR_PLLON;
 8003204:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003208:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800320a:	684b      	ldr	r3, [r1, #4]
 800320c:	0458      	lsls	r0, r3, #17
 800320e:	d5fc      	bpl.n	800320a <__early_init+0xea>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <__early_init+0x164>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	0192      	lsls	r2, r2, #6
 8003216:	d5fc      	bpl.n	8003212 <__early_init+0xf2>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003218:	4926      	ldr	r1, [pc, #152]	; (80032b4 <__early_init+0x194>)
 800321a:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <__early_init+0x198>)
    RCC->DCKCFGR = dckcfgr |
 800321e:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003220:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 8003222:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003226:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	4b23      	ldr	r3, [pc, #140]	; (80032bc <__early_init+0x19c>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d01e      	beq.n	8003270 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003232:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <__early_init+0x1a0>)
 8003234:	f240 7203 	movw	r2, #1795	; 0x703
 8003238:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800323a:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <__early_init+0x1a0>)
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	2b03      	cmp	r3, #3
 8003244:	d1fa      	bne.n	800323c <__early_init+0x11c>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <__early_init+0x164>)
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	f042 0202 	orr.w	r2, r2, #2
 800324e:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	f002 020c 	and.w	r2, r2, #12
 8003256:	2a08      	cmp	r2, #8
 8003258:	d1fa      	bne.n	8003250 <__early_init+0x130>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800325a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
 8003262:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003268:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 800326a:	bcf0      	pop	{r4, r5, r6, r7}
 800326c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326e:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <__early_init+0x1a4>)
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <__early_init+0x1a8>)
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d1db      	bne.n	8003232 <__early_init+0x112>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <__early_init+0x1a0>)
 800327c:	f240 1203 	movw	r2, #259	; 0x103
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e7da      	b.n	800323a <__early_init+0x11a>
 8003284:	40023800 	.word	0x40023800
 8003288:	40020800 	.word	0x40020800
 800328c:	40021c00 	.word	0x40021c00
 8003290:	40020000 	.word	0x40020000
 8003294:	64155105 	.word	0x64155105
 8003298:	40020400 	.word	0x40020400
 800329c:	2a8004a0 	.word	0x2a8004a0
 80032a0:	01555555 	.word	0x01555555
 80032a4:	55555550 	.word	0x55555550
 80032a8:	10000400 	.word	0x10000400
 80032ac:	08003210 	.word	0x08003210
 80032b0:	40007000 	.word	0x40007000
 80032b4:	38881000 	.word	0x38881000
 80032b8:	e0042000 	.word	0xe0042000
 80032bc:	20006411 	.word	0x20006411
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	e000ed00 	.word	0xe000ed00
 80032c8:	410fc241 	.word	0x410fc241
 80032cc:	00000000 	.word	0x00000000

080032d0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 80032d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 80032d4:	4c66      	ldr	r4, [pc, #408]	; (8003470 <VectorD8+0x1a0>)
 80032d6:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 80032d8:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 80032da:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 80032dc:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 80032de:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 80032e0:	d47b      	bmi.n	80033da <VectorD8+0x10a>
 80032e2:	2320      	movs	r3, #32
 80032e4:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80032e8:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 80032ec:	d04d      	beq.n	800338a <VectorD8+0xba>
  if (queue_notempty(tqp)) {
 80032ee:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8003478 <VectorD8+0x1a8>
  tp->u.rdymsg = msg;
 80032f2:	f04f 0900 	mov.w	r9, #0
 80032f6:	e008      	b.n	800330a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 80032f8:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80032fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80032fe:	d41d      	bmi.n	800333c <VectorD8+0x6c>
    sr = u->SR;
 8003300:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003302:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8003306:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003308:	d03f      	beq.n	800338a <VectorD8+0xba>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800330a:	072b      	lsls	r3, r5, #28
 800330c:	d0f4      	beq.n	80032f8 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800330e:	f015 0f08 	tst.w	r5, #8
 8003312:	bf0c      	ite	eq
 8003314:	2000      	moveq	r0, #0
 8003316:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8003318:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 800331a:	bf48      	it	mi
 800331c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8003320:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8003322:	bf48      	it	mi
 8003324:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8003328:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800332a:	bf48      	it	mi
 800332c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003330:	f7fd fa7e 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
    if (sr & USART_SR_RXNE)
 8003334:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8003336:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800333a:	d5e1      	bpl.n	8003300 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800333c:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800333e:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8003342:	2b00      	cmp	r3, #0
 8003344:	d03a      	beq.n	80033bc <VectorD8+0xec>
  if (!iqIsFullI(iqp)) {
 8003346:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800334a:	4293      	cmp	r3, r2
 800334c:	d03d      	beq.n	80033ca <VectorD8+0xfa>
    iqp->q_counter++;
 800334e:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8003350:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8003352:	3201      	adds	r2, #1
 8003354:	ea05 050a 	and.w	r5, r5, sl
 8003358:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800335a:	6221      	str	r1, [r4, #32]
 800335c:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800335e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	d301      	bcc.n	800336a <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 8003366:	69a3      	ldr	r3, [r4, #24]
 8003368:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 800336a:	68e0      	ldr	r0, [r4, #12]
 800336c:	4540      	cmp	r0, r8
 800336e:	d0c7      	beq.n	8003300 <VectorD8+0x30>
  tqp->next             = tp->queue.next;
 8003370:	6803      	ldr	r3, [r0, #0]
 8003372:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8003374:	f8c3 8004 	str.w	r8, [r3, #4]
 8003378:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800337c:	f7fd fa40 	bl	8000800 <chSchReadyI>
    sr = u->SR;
 8003380:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003382:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8003386:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003388:	d1bf      	bne.n	800330a <VectorD8+0x3a>
 800338a:	2300      	movs	r3, #0
 800338c:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8003390:	0638      	lsls	r0, r7, #24
 8003392:	d501      	bpl.n	8003398 <VectorD8+0xc8>
 8003394:	0629      	lsls	r1, r5, #24
 8003396:	d42e      	bmi.n	80033f6 <VectorD8+0x126>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 8003398:	067a      	lsls	r2, r7, #25
 800339a:	d50b      	bpl.n	80033b4 <VectorD8+0xe4>
 800339c:	066b      	lsls	r3, r5, #25
 800339e:	d509      	bpl.n	80033b4 <VectorD8+0xe4>
 80033a0:	2320      	movs	r3, #32
 80033a2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80033a6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d049      	beq.n	8003442 <VectorD8+0x172>
 80033ae:	2300      	movs	r3, #0
 80033b0:	f383 8811 	msr	BASEPRI, r3
}
 80033b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80033b8:	f7fd b97a 	b.w	80006b0 <_port_irq_epilogue>
 80033bc:	2004      	movs	r0, #4
 80033be:	f7fd fa37 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
  if (!iqIsFullI(iqp)) {
 80033c2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d1c1      	bne.n	800334e <VectorD8+0x7e>
 80033ca:	6962      	ldr	r2, [r4, #20]
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	d0be      	beq.n	800334e <VectorD8+0x7e>
 80033d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80033d4:	f7fd fa2c 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
 80033d8:	e792      	b.n	8003300 <VectorD8+0x30>
 80033da:	2320      	movs	r3, #32
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033e4:	f7fd fa24 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
    u->SR = ~USART_SR_LBD;
 80033e8:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	e775      	b.n	80032e2 <VectorD8+0x12>
 80033f6:	2320      	movs	r3, #32
 80033f8:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 80033fc:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8003400:	429a      	cmp	r2, r3
 8003402:	d029      	beq.n	8003458 <VectorD8+0x188>
    oqp->q_counter++;
 8003404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8003406:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8003408:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800340a:	3201      	adds	r2, #1
 800340c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800340e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8003410:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8003412:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8003416:	d301      	bcc.n	800341c <VectorD8+0x14c>
      oqp->q_rdptr = oqp->q_buffer;
 8003418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800341a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800341c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <VectorD8+0x1a4>)
 8003420:	4298      	cmp	r0, r3
 8003422:	d006      	beq.n	8003432 <VectorD8+0x162>
  tqp->next             = tp->queue.next;
 8003424:	6802      	ldr	r2, [r0, #0]
 8003426:	6322      	str	r2, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8003428:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800342a:	6053      	str	r3, [r2, #4]
 800342c:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800342e:	f7fd f9e7 	bl	8000800 <chSchReadyI>
      u->DR = b;
 8003432:	f8c6 8004 	str.w	r8, [r6, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800343c:	067a      	lsls	r2, r7, #25
 800343e:	d5b9      	bpl.n	80033b4 <VectorD8+0xe4>
 8003440:	e7ac      	b.n	800339c <VectorD8+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8003442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0b2      	beq.n	80033ae <VectorD8+0xde>
 8003448:	2010      	movs	r0, #16
 800344a:	f7fd f9f1 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800344e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003452:	401f      	ands	r7, r3
 8003454:	60f7      	str	r7, [r6, #12]
 8003456:	e7aa      	b.n	80033ae <VectorD8+0xde>
  if (!oqIsEmptyI(oqp)) {
 8003458:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800345a:	2a00      	cmp	r2, #0
 800345c:	d0d2      	beq.n	8003404 <VectorD8+0x134>
 800345e:	2008      	movs	r0, #8
 8003460:	f7fd f9e6 	bl	8000830 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8003464:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8003468:	403b      	ands	r3, r7
 800346a:	60f3      	str	r3, [r6, #12]
 800346c:	e7e3      	b.n	8003436 <VectorD8+0x166>
 800346e:	bf00      	nop
 8003470:	20000800 	.word	0x20000800
 8003474:	20000830 	.word	0x20000830
 8003478:	2000080c 	.word	0x2000080c
 800347c:	00000000 	.word	0x00000000

08003480 <Vector108>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8003480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8003484:	4c28      	ldr	r4, [pc, #160]	; (8003528 <Vector108+0xa8>)
 8003486:	6923      	ldr	r3, [r4, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8003488:	68e2      	ldr	r2, [r4, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 800348e:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8003490:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8003492:	6122      	str	r2, [r4, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8003494:	d403      	bmi.n	800349e <Vector108+0x1e>
}
 8003496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800349a:	f7fd b909 	b.w	80006b0 <_port_irq_epilogue>
 800349e:	2320      	movs	r3, #32
 80034a0:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80034a4:	4d21      	ldr	r5, [pc, #132]	; (800352c <Vector108+0xac>)
  return (systime_t)STM32_ST_TIM->CNT;
 80034a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80034a8:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80034aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80034ac:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 80034ae:	1abe      	subs	r6, r7, r2
 80034b0:	42b1      	cmp	r1, r6
 80034b2:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80034b6:	bf98      	it	ls
 80034b8:	f04f 0800 	movls.w	r8, #0
    if (nowdelta < vtp->delta) {
 80034bc:	d820      	bhi.n	8003500 <Vector108+0x80>
 80034be:	2720      	movs	r7, #32
 80034c0:	e000      	b.n	80034c4 <Vector108+0x44>
 80034c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80034c4:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80034c6:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80034c8:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 80034ca:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 80034cc:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 80034d0:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80034d2:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 80034d6:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 80034d8:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 80034dc:	bf08      	it	eq
 80034de:	f8c4 800c 	streq.w	r8, [r4, #12]
 80034e2:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80034e6:	6918      	ldr	r0, [r3, #16]
 80034e8:	4790      	blx	r2
 80034ea:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80034ee:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	428e      	cmp	r6, r1
 80034f4:	d2e5      	bcs.n	80034c2 <Vector108+0x42>
  return (systime_t)STM32_ST_TIM->CNT;
 80034f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80034f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80034fa:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 80034fc:	428e      	cmp	r6, r1
 80034fe:	d2de      	bcs.n	80034be <Vector108+0x3e>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003500:	454b      	cmp	r3, r9
 8003502:	d00a      	beq.n	800351a <Vector108+0x9a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8003504:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8003506:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8003508:	1bc9      	subs	r1, r1, r7
 800350a:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800350c:	4906      	ldr	r1, [pc, #24]	; (8003528 <Vector108+0xa8>)
 800350e:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 8003510:	2a02      	cmp	r2, #2
 8003512:	bf2c      	ite	cs
 8003514:	18bf      	addcs	r7, r7, r2
 8003516:	3702      	addcc	r7, #2
 8003518:	634f      	str	r7, [r1, #52]	; 0x34
 800351a:	2300      	movs	r3, #0
 800351c:	f383 8811 	msr	BASEPRI, r3
}
 8003520:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8003524:	f7fd b8c4 	b.w	80006b0 <_port_irq_epilogue>
 8003528:	40000c00 	.word	0x40000c00
 800352c:	200009ac 	.word	0x200009ac

08003530 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003530:	4b08      	ldr	r3, [pc, #32]	; (8003554 <Vector158+0x24>)
  if (dma.streams[15].func)
 8003532:	4809      	ldr	r0, [pc, #36]	; (8003558 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003534:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8003536:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003538:	0d89      	lsrs	r1, r1, #22
 800353a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800353e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8003540:	058c      	lsls	r4, r1, #22
 8003542:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8003544:	b112      	cbz	r2, 800354c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003546:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800354a:	4790      	blx	r2
}
 800354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8003550:	f7fd b8ae 	b.w	80006b0 <_port_irq_epilogue>
 8003554:	40026400 	.word	0x40026400
 8003558:	20000b70 	.word	0x20000b70
 800355c:	00000000 	.word	0x00000000

08003560 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <Vector154+0x24>)
  if (dma.streams[14].func)
 8003562:	4809      	ldr	r0, [pc, #36]	; (8003588 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003564:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 8003566:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003568:	0c09      	lsrs	r1, r1, #16
 800356a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800356e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 8003570:	040c      	lsls	r4, r1, #16
 8003572:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 8003574:	b10a      	cbz	r2, 800357a <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 8003576:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8003578:	4790      	blx	r2
}
 800357a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800357e:	f7fd b897 	b.w	80006b0 <_port_irq_epilogue>
 8003582:	bf00      	nop
 8003584:	40026400 	.word	0x40026400
 8003588:	20000b70 	.word	0x20000b70
 800358c:	00000000 	.word	0x00000000

08003590 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <Vector150+0x24>)
  if (dma.streams[13].func)
 8003592:	4809      	ldr	r0, [pc, #36]	; (80035b8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003594:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 8003596:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003598:	0989      	lsrs	r1, r1, #6
 800359a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800359e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80035a0:	018c      	lsls	r4, r1, #6
 80035a2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80035a4:	b10a      	cbz	r2, 80035aa <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80035a6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80035a8:	4790      	blx	r2
}
 80035aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80035ae:	f7fd b87f 	b.w	80006b0 <_port_irq_epilogue>
 80035b2:	bf00      	nop
 80035b4:	40026400 	.word	0x40026400
 80035b8:	20000b70 	.word	0x20000b70
 80035bc:	00000000 	.word	0x00000000

080035c0 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80035c0:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <Vector130+0x20>)
  if (dma.streams[12].func)
 80035c4:	4807      	ldr	r0, [pc, #28]	; (80035e4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035c6:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 80035c8:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 80035ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 80035ce:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 80035d0:	b10a      	cbz	r2, 80035d6 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 80035d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80035d4:	4790      	blx	r2
}
 80035d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80035da:	f7fd b869 	b.w	80006b0 <_port_irq_epilogue>
 80035de:	bf00      	nop
 80035e0:	40026400 	.word	0x40026400
 80035e4:	20000b70 	.word	0x20000b70
	...

080035f0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <Vector12C+0x24>)
  if (dma.streams[11].func)
 80035f2:	4809      	ldr	r0, [pc, #36]	; (8003618 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035f4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 80035f6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035f8:	0d89      	lsrs	r1, r1, #22
 80035fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 80035fe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8003600:	058c      	lsls	r4, r1, #22
 8003602:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8003604:	b10a      	cbz	r2, 800360a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003606:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8003608:	4790      	blx	r2
}
 800360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800360e:	f7fd b84f 	b.w	80006b0 <_port_irq_epilogue>
 8003612:	bf00      	nop
 8003614:	40026400 	.word	0x40026400
 8003618:	20000b70 	.word	0x20000b70
 800361c:	00000000 	.word	0x00000000

08003620 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <Vector128+0x24>)
  if (dma.streams[10].func)
 8003622:	4809      	ldr	r0, [pc, #36]	; (8003648 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003624:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8003626:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003628:	0c09      	lsrs	r1, r1, #16
 800362a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800362e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8003630:	040c      	lsls	r4, r1, #16
 8003632:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8003634:	b10a      	cbz	r2, 800363a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003636:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003638:	4790      	blx	r2
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800363e:	f7fd b837 	b.w	80006b0 <_port_irq_epilogue>
 8003642:	bf00      	nop
 8003644:	40026400 	.word	0x40026400
 8003648:	20000b70 	.word	0x20000b70
 800364c:	00000000 	.word	0x00000000

08003650 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <Vector124+0x24>)
  if (dma.streams[9].func)
 8003652:	4809      	ldr	r0, [pc, #36]	; (8003678 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003654:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8003656:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003658:	0989      	lsrs	r1, r1, #6
 800365a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800365e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 8003660:	018c      	lsls	r4, r1, #6
 8003662:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 8003664:	b10a      	cbz	r2, 800366a <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 8003666:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003668:	4790      	blx	r2
}
 800366a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800366e:	f7fd b81f 	b.w	80006b0 <_port_irq_epilogue>
 8003672:	bf00      	nop
 8003674:	40026400 	.word	0x40026400
 8003678:	20000b70 	.word	0x20000b70
 800367c:	00000000 	.word	0x00000000

08003680 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8003680:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <Vector120+0x20>)
  if (dma.streams[8].func)
 8003684:	4807      	ldr	r0, [pc, #28]	; (80036a4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003686:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 8003688:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800368a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 800368e:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8003690:	b10a      	cbz	r2, 8003696 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 8003692:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003694:	4790      	blx	r2
}
 8003696:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800369a:	f7fd b809 	b.w	80006b0 <_port_irq_epilogue>
 800369e:	bf00      	nop
 80036a0:	40026400 	.word	0x40026400
 80036a4:	20000b70 	.word	0x20000b70
	...

080036b0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <VectorFC+0x24>)
  if (dma.streams[7].func)
 80036b2:	4809      	ldr	r0, [pc, #36]	; (80036d8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80036b4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80036b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80036b8:	0d89      	lsrs	r1, r1, #22
 80036ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80036be:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 80036c0:	058c      	lsls	r4, r1, #22
 80036c2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80036c4:	b10a      	cbz	r2, 80036ca <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 80036c6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80036c8:	4790      	blx	r2
}
 80036ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80036ce:	f7fc bfef 	b.w	80006b0 <_port_irq_epilogue>
 80036d2:	bf00      	nop
 80036d4:	40026000 	.word	0x40026000
 80036d8:	20000b70 	.word	0x20000b70
 80036dc:	00000000 	.word	0x00000000

080036e0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <Vector84+0x24>)
  if (dma.streams[6].func)
 80036e2:	4809      	ldr	r0, [pc, #36]	; (8003708 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036e4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80036e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80036e8:	0c09      	lsrs	r1, r1, #16
 80036ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80036ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 80036f0:	040c      	lsls	r4, r1, #16
 80036f2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80036f4:	b10a      	cbz	r2, 80036fa <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 80036f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80036f8:	4790      	blx	r2
}
 80036fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80036fe:	f7fc bfd7 	b.w	80006b0 <_port_irq_epilogue>
 8003702:	bf00      	nop
 8003704:	40026000 	.word	0x40026000
 8003708:	20000b70 	.word	0x20000b70
 800370c:	00000000 	.word	0x00000000

08003710 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <Vector80+0x24>)
  if (dma.streams[5].func)
 8003712:	4809      	ldr	r0, [pc, #36]	; (8003738 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003714:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8003716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003718:	0989      	lsrs	r1, r1, #6
 800371a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800371e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8003720:	018c      	lsls	r4, r1, #6
 8003722:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8003724:	b10a      	cbz	r2, 800372a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003726:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003728:	4790      	blx	r2
}
 800372a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800372e:	f7fc bfbf 	b.w	80006b0 <_port_irq_epilogue>
 8003732:	bf00      	nop
 8003734:	40026000 	.word	0x40026000
 8003738:	20000b70 	.word	0x20000b70
 800373c:	00000000 	.word	0x00000000

08003740 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003740:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003742:	4b07      	ldr	r3, [pc, #28]	; (8003760 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8003744:	4807      	ldr	r0, [pc, #28]	; (8003764 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003746:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8003748:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800374a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800374e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8003750:	b10a      	cbz	r2, 8003756 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003752:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003754:	4790      	blx	r2
}
 8003756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800375a:	f7fc bfa9 	b.w	80006b0 <_port_irq_epilogue>
 800375e:	bf00      	nop
 8003760:	40026000 	.word	0x40026000
 8003764:	20000b70 	.word	0x20000b70
	...

08003770 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <Vector78+0x24>)
  if (dma.streams[3].func)
 8003772:	4809      	ldr	r0, [pc, #36]	; (8003798 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003774:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 8003776:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003778:	0d89      	lsrs	r1, r1, #22
 800377a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800377e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 8003780:	058c      	lsls	r4, r1, #22
 8003782:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 8003784:	b10a      	cbz	r2, 800378a <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 8003786:	6a00      	ldr	r0, [r0, #32]
 8003788:	4790      	blx	r2
}
 800378a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800378e:	f7fc bf8f 	b.w	80006b0 <_port_irq_epilogue>
 8003792:	bf00      	nop
 8003794:	40026000 	.word	0x40026000
 8003798:	20000b70 	.word	0x20000b70
 800379c:	00000000 	.word	0x00000000

080037a0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <Vector74+0x24>)
  if (dma.streams[2].func)
 80037a2:	4809      	ldr	r0, [pc, #36]	; (80037c8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80037a4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80037a6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80037a8:	0c09      	lsrs	r1, r1, #16
 80037aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80037ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80037b0:	040c      	lsls	r4, r1, #16
 80037b2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80037b4:	b10a      	cbz	r2, 80037ba <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80037b6:	6980      	ldr	r0, [r0, #24]
 80037b8:	4790      	blx	r2
}
 80037ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80037be:	f7fc bf77 	b.w	80006b0 <_port_irq_epilogue>
 80037c2:	bf00      	nop
 80037c4:	40026000 	.word	0x40026000
 80037c8:	20000b70 	.word	0x20000b70
 80037cc:	00000000 	.word	0x00000000

080037d0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <Vector70+0x24>)
  if (dma.streams[1].func)
 80037d2:	4809      	ldr	r0, [pc, #36]	; (80037f8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80037d4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 80037d6:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 80037d8:	0989      	lsrs	r1, r1, #6
 80037da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80037de:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 80037e0:	018c      	lsls	r4, r1, #6
 80037e2:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 80037e4:	b10a      	cbz	r2, 80037ea <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 80037e6:	6900      	ldr	r0, [r0, #16]
 80037e8:	4790      	blx	r2
}
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80037ee:	f7fc bf5f 	b.w	80006b0 <_port_irq_epilogue>
 80037f2:	bf00      	nop
 80037f4:	40026000 	.word	0x40026000
 80037f8:	20000b70 	.word	0x20000b70
 80037fc:	00000000 	.word	0x00000000

08003800 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003800:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8003804:	4807      	ldr	r0, [pc, #28]	; (8003824 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003806:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8003808:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800380a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800380e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003810:	b10a      	cbz	r2, 8003816 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003812:	6880      	ldr	r0, [r0, #8]
 8003814:	4790      	blx	r2
}
 8003816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800381a:	f7fc bf49 	b.w	80006b0 <_port_irq_epilogue>
 800381e:	bf00      	nop
 8003820:	40026000 	.word	0x40026000
 8003824:	20000b70 	.word	0x20000b70
	...

08003830 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <VectorE0+0xf0>)
OSAL_IRQ_HANDLER(VectorE0) {
 8003832:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8003834:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003836:	681c      	ldr	r4, [r3, #0]
 8003838:	4014      	ands	r4, r2
 800383a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800383e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8003840:	0562      	lsls	r2, r4, #21
 8003842:	d50f      	bpl.n	8003864 <VectorE0+0x34>
 8003844:	4a37      	ldr	r2, [pc, #220]	; (8003924 <VectorE0+0xf4>)
 8003846:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800384a:	b113      	cbz	r3, 8003852 <VectorE0+0x22>
 800384c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8003850:	4798      	blx	r3
 8003852:	2320      	movs	r3, #32
 8003854:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8003858:	4833      	ldr	r0, [pc, #204]	; (8003928 <VectorE0+0xf8>)
 800385a:	f7fd f819 	bl	8000890 <chThdDequeueAllI.constprop.0>
 800385e:	2300      	movs	r3, #0
 8003860:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 8003864:	0523      	lsls	r3, r4, #20
 8003866:	d50f      	bpl.n	8003888 <VectorE0+0x58>
 8003868:	4a2e      	ldr	r2, [pc, #184]	; (8003924 <VectorE0+0xf4>)
 800386a:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 800386e:	b113      	cbz	r3, 8003876 <VectorE0+0x46>
 8003870:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 8003874:	4798      	blx	r3
 8003876:	2320      	movs	r3, #32
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	482b      	ldr	r0, [pc, #172]	; (800392c <VectorE0+0xfc>)
 800387e:	f7fd f807 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003882:	2300      	movs	r3, #0
 8003884:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 8003888:	04e0      	lsls	r0, r4, #19
 800388a:	d50f      	bpl.n	80038ac <VectorE0+0x7c>
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <VectorE0+0xf4>)
 800388e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003892:	b113      	cbz	r3, 800389a <VectorE0+0x6a>
 8003894:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 8003898:	4798      	blx	r3
 800389a:	2320      	movs	r3, #32
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	4823      	ldr	r0, [pc, #140]	; (8003930 <VectorE0+0x100>)
 80038a2:	f7fc fff5 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 80038ac:	04a1      	lsls	r1, r4, #18
 80038ae:	d50f      	bpl.n	80038d0 <VectorE0+0xa0>
 80038b0:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <VectorE0+0xf4>)
 80038b2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 80038b6:	b113      	cbz	r3, 80038be <VectorE0+0x8e>
 80038b8:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 80038bc:	4798      	blx	r3
 80038be:	2320      	movs	r3, #32
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	481b      	ldr	r0, [pc, #108]	; (8003934 <VectorE0+0x104>)
 80038c6:	f7fc ffe3 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80038ca:	2300      	movs	r3, #0
 80038cc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 80038d0:	0462      	lsls	r2, r4, #17
 80038d2:	d50f      	bpl.n	80038f4 <VectorE0+0xc4>
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <VectorE0+0xf4>)
 80038d6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80038da:	b113      	cbz	r3, 80038e2 <VectorE0+0xb2>
 80038dc:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 80038e0:	4798      	blx	r3
 80038e2:	2320      	movs	r3, #32
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	4813      	ldr	r0, [pc, #76]	; (8003938 <VectorE0+0x108>)
 80038ea:	f7fc ffd1 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80038ee:	2300      	movs	r3, #0
 80038f0:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 80038f4:	0423      	lsls	r3, r4, #16
 80038f6:	d50f      	bpl.n	8003918 <VectorE0+0xe8>
 80038f8:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <VectorE0+0xf4>)
 80038fa:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 80038fe:	b113      	cbz	r3, 8003906 <VectorE0+0xd6>
 8003900:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
 8003904:	4798      	blx	r3
 8003906:	2320      	movs	r3, #32
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	480b      	ldr	r0, [pc, #44]	; (800393c <VectorE0+0x10c>)
 800390e:	f7fc ffbf 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003912:	2300      	movs	r3, #0
 8003914:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800391c:	f7fc bec8 	b.w	80006b0 <_port_irq_epilogue>
 8003920:	40013c00 	.word	0x40013c00
 8003924:	200008ac 	.word	0x200008ac
 8003928:	2000094c 	.word	0x2000094c
 800392c:	2000095c 	.word	0x2000095c
 8003930:	2000096c 	.word	0x2000096c
 8003934:	2000097c 	.word	0x2000097c
 8003938:	2000098c 	.word	0x2000098c
 800393c:	2000099c 	.word	0x2000099c

08003940 <Vector9C>:
  pr = EXTI->PR;
 8003940:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <Vector9C+0xc0>)
OSAL_IRQ_HANDLER(Vector9C) {
 8003942:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8003944:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8003946:	681c      	ldr	r4, [r3, #0]
 8003948:	4014      	ands	r4, r2
 800394a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 800394e:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8003950:	06a3      	lsls	r3, r4, #26
 8003952:	d50d      	bpl.n	8003970 <Vector9C+0x30>
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <Vector9C+0xc4>)
 8003956:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003958:	b10b      	cbz	r3, 800395e <Vector9C+0x1e>
 800395a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800395c:	4798      	blx	r3
 800395e:	2320      	movs	r3, #32
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	4828      	ldr	r0, [pc, #160]	; (8003a08 <Vector9C+0xc8>)
 8003966:	f7fc ff93 	bl	8000890 <chThdDequeueAllI.constprop.0>
 800396a:	2300      	movs	r3, #0
 800396c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 8003970:	0660      	lsls	r0, r4, #25
 8003972:	d50d      	bpl.n	8003990 <Vector9C+0x50>
 8003974:	4a23      	ldr	r2, [pc, #140]	; (8003a04 <Vector9C+0xc4>)
 8003976:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003978:	b10b      	cbz	r3, 800397e <Vector9C+0x3e>
 800397a:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800397c:	4798      	blx	r3
 800397e:	2320      	movs	r3, #32
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	4821      	ldr	r0, [pc, #132]	; (8003a0c <Vector9C+0xcc>)
 8003986:	f7fc ff83 	bl	8000890 <chThdDequeueAllI.constprop.0>
 800398a:	2300      	movs	r3, #0
 800398c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 8003990:	0621      	lsls	r1, r4, #24
 8003992:	d50d      	bpl.n	80039b0 <Vector9C+0x70>
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <Vector9C+0xc4>)
 8003996:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8003998:	b10b      	cbz	r3, 800399e <Vector9C+0x5e>
 800399a:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 800399c:	4798      	blx	r3
 800399e:	2320      	movs	r3, #32
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	481a      	ldr	r0, [pc, #104]	; (8003a10 <Vector9C+0xd0>)
 80039a6:	f7fc ff73 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 80039b0:	05e2      	lsls	r2, r4, #23
 80039b2:	d50f      	bpl.n	80039d4 <Vector9C+0x94>
 80039b4:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <Vector9C+0xc4>)
 80039b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039ba:	b113      	cbz	r3, 80039c2 <Vector9C+0x82>
 80039bc:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80039c0:	4798      	blx	r3
 80039c2:	2320      	movs	r3, #32
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	4812      	ldr	r0, [pc, #72]	; (8003a14 <Vector9C+0xd4>)
 80039ca:	f7fc ff61 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 80039d4:	05a3      	lsls	r3, r4, #22
 80039d6:	d50f      	bpl.n	80039f8 <Vector9C+0xb8>
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <Vector9C+0xc4>)
 80039da:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80039de:	b113      	cbz	r3, 80039e6 <Vector9C+0xa6>
 80039e0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 80039e4:	4798      	blx	r3
 80039e6:	2320      	movs	r3, #32
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	480a      	ldr	r0, [pc, #40]	; (8003a18 <Vector9C+0xd8>)
 80039ee:	f7fc ff4f 	bl	8000890 <chThdDequeueAllI.constprop.0>
 80039f2:	2300      	movs	r3, #0
 80039f4:	f383 8811 	msr	BASEPRI, r3
}
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80039fc:	f7fc be58 	b.w	80006b0 <_port_irq_epilogue>
 8003a00:	40013c00 	.word	0x40013c00
 8003a04:	200008ac 	.word	0x200008ac
 8003a08:	200008fc 	.word	0x200008fc
 8003a0c:	2000090c 	.word	0x2000090c
 8003a10:	2000091c 	.word	0x2000091c
 8003a14:	2000092c 	.word	0x2000092c
 8003a18:	2000093c 	.word	0x2000093c
 8003a1c:	00000000 	.word	0x00000000

08003a20 <Vector68>:
  pr = EXTI->PR;
 8003a20:	4a0d      	ldr	r2, [pc, #52]	; (8003a58 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
 8003a22:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003a24:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003a26:	6813      	ldr	r3, [r2, #0]
 8003a28:	400b      	ands	r3, r1
 8003a2a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 8003a2e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8003a30:	b16b      	cbz	r3, 8003a4e <Vector68+0x2e>
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <Vector68+0x3c>)
 8003a34:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003a36:	b10b      	cbz	r3, 8003a3c <Vector68+0x1c>
 8003a38:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003a3a:	4798      	blx	r3
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	f383 8811 	msr	BASEPRI, r3
 8003a42:	4807      	ldr	r0, [pc, #28]	; (8003a60 <Vector68+0x40>)
 8003a44:	f7fc ff24 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f383 8811 	msr	BASEPRI, r3
}
 8003a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003a52:	f7fc be2d 	b.w	80006b0 <_port_irq_epilogue>
 8003a56:	bf00      	nop
 8003a58:	40013c00 	.word	0x40013c00
 8003a5c:	200008ac 	.word	0x200008ac
 8003a60:	200008ec 	.word	0x200008ec
	...

08003a70 <Vector64>:
  pr = EXTI->PR;
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
 8003a72:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003a74:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	400b      	ands	r3, r1
 8003a7a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 8003a7e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 8003a80:	b16b      	cbz	r3, 8003a9e <Vector64+0x2e>
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <Vector64+0x3c>)
 8003a84:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003a86:	b10b      	cbz	r3, 8003a8c <Vector64+0x1c>
 8003a88:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8003a8a:	4798      	blx	r3
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	4807      	ldr	r0, [pc, #28]	; (8003ab0 <Vector64+0x40>)
 8003a94:	f7fc fefc 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f383 8811 	msr	BASEPRI, r3
}
 8003a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003aa2:	f7fc be05 	b.w	80006b0 <_port_irq_epilogue>
 8003aa6:	bf00      	nop
 8003aa8:	40013c00 	.word	0x40013c00
 8003aac:	200008ac 	.word	0x200008ac
 8003ab0:	200008dc 	.word	0x200008dc
	...

08003ac0 <Vector60>:
  pr = EXTI->PR;
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
 8003ac2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003ac4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	400b      	ands	r3, r1
 8003aca:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 8003ace:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8003ad0:	b16b      	cbz	r3, 8003aee <Vector60+0x2e>
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <Vector60+0x3c>)
 8003ad4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003ad6:	b10b      	cbz	r3, 8003adc <Vector60+0x1c>
 8003ad8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003ada:	4798      	blx	r3
 8003adc:	2320      	movs	r3, #32
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	4807      	ldr	r0, [pc, #28]	; (8003b00 <Vector60+0x40>)
 8003ae4:	f7fc fed4 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f383 8811 	msr	BASEPRI, r3
}
 8003aee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003af2:	f7fc bddd 	b.w	80006b0 <_port_irq_epilogue>
 8003af6:	bf00      	nop
 8003af8:	40013c00 	.word	0x40013c00
 8003afc:	200008ac 	.word	0x200008ac
 8003b00:	200008cc 	.word	0x200008cc
	...

08003b10 <Vector5C>:
  pr = EXTI->PR;
 8003b10:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
 8003b12:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003b14:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	400b      	ands	r3, r1
 8003b1a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 8003b1e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8003b20:	b16b      	cbz	r3, 8003b3e <Vector5C+0x2e>
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <Vector5C+0x3c>)
 8003b24:	6993      	ldr	r3, [r2, #24]
 8003b26:	b10b      	cbz	r3, 8003b2c <Vector5C+0x1c>
 8003b28:	69d0      	ldr	r0, [r2, #28]
 8003b2a:	4798      	blx	r3
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	4807      	ldr	r0, [pc, #28]	; (8003b50 <Vector5C+0x40>)
 8003b34:	f7fc feac 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f383 8811 	msr	BASEPRI, r3
}
 8003b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003b42:	f7fc bdb5 	b.w	80006b0 <_port_irq_epilogue>
 8003b46:	bf00      	nop
 8003b48:	40013c00 	.word	0x40013c00
 8003b4c:	200008ac 	.word	0x200008ac
 8003b50:	200008bc 	.word	0x200008bc
	...

08003b60 <Vector58>:
  pr = EXTI->PR;
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
 8003b62:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003b64:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 8003b66:	6813      	ldr	r3, [r2, #0]
 8003b68:	400b      	ands	r3, r1
 8003b6a:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 8003b6e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 8003b70:	b16b      	cbz	r3, 8003b8e <Vector58+0x2e>
 8003b72:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <Vector58+0x3c>)
 8003b74:	6893      	ldr	r3, [r2, #8]
 8003b76:	b10b      	cbz	r3, 8003b7c <Vector58+0x1c>
 8003b78:	68d0      	ldr	r0, [r2, #12]
 8003b7a:	4798      	blx	r3
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	4806      	ldr	r0, [pc, #24]	; (8003b9c <Vector58+0x3c>)
 8003b84:	f7fc fe84 	bl	8000890 <chThdDequeueAllI.constprop.0>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f383 8811 	msr	BASEPRI, r3
}
 8003b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003b92:	f7fc bd8d 	b.w	80006b0 <_port_irq_epilogue>
 8003b96:	bf00      	nop
 8003b98:	40013c00 	.word	0x40013c00
 8003b9c:	200008ac 	.word	0x200008ac

08003ba0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8003ba0:	b4f0      	push	{r4, r5, r6, r7}
 8003ba2:	4f14      	ldr	r7, [pc, #80]	; (8003bf4 <__init_ram_areas+0x54>)
 8003ba4:	4d14      	ldr	r5, [pc, #80]	; (8003bf8 <__init_ram_areas+0x58>)
 8003ba6:	4815      	ldr	r0, [pc, #84]	; (8003bfc <__init_ram_areas+0x5c>)
 8003ba8:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <__init_ram_areas+0x60>)
 8003baa:	4916      	ldr	r1, [pc, #88]	; (8003c04 <__init_ram_areas+0x64>)
 8003bac:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8003bb0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 8003bb2:	4298      	cmp	r0, r3
 8003bb4:	d911      	bls.n	8003bda <__init_ram_areas+0x3a>
 8003bb6:	3904      	subs	r1, #4
 8003bb8:	461a      	mov	r2, r3
      *p = *tp;
 8003bba:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8003bbe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003bc2:	4290      	cmp	r0, r2
 8003bc4:	d8f9      	bhi.n	8003bba <__init_ram_areas+0x1a>
 8003bc6:	1e42      	subs	r2, r0, #1
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	f022 0203 	bic.w	r2, r2, #3
 8003bce:	3204      	adds	r2, #4
 8003bd0:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003bd2:	429d      	cmp	r5, r3
 8003bd4:	d903      	bls.n	8003bde <__init_ram_areas+0x3e>
      *p = 0;
 8003bd6:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8003bda:	429d      	cmp	r5, r3
 8003bdc:	d8fb      	bhi.n	8003bd6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8003bde:	4567      	cmp	r7, ip
 8003be0:	d005      	beq.n	8003bee <__init_ram_areas+0x4e>
 8003be2:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8003be6:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8003bea:	3710      	adds	r7, #16
 8003bec:	e7e1      	b.n	8003bb2 <__init_ram_areas+0x12>
#endif
}
 8003bee:	bcf0      	pop	{r4, r5, r6, r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	080040a4 	.word	0x080040a4
 8003bf8:	20000e98 	.word	0x20000e98
 8003bfc:	20000e98 	.word	0x20000e98
 8003c00:	20000e98 	.word	0x20000e98
 8003c04:	08004160 	.word	0x08004160
	...

08003c10 <__default_exit>:
  while (true) {
 8003c10:	e7fe      	b.n	8003c10 <__default_exit>
 8003c12:	bf00      	nop
	...

08003c20 <__late_init>:
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
	...

08003c30 <__core_init>:
}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop

08003c34 <memset>:
 8003c34:	b4f0      	push	{r4, r5, r6, r7}
 8003c36:	0786      	lsls	r6, r0, #30
 8003c38:	d046      	beq.n	8003cc8 <memset+0x94>
 8003c3a:	1e54      	subs	r4, r2, #1
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	d03c      	beq.n	8003cba <memset+0x86>
 8003c40:	b2ca      	uxtb	r2, r1
 8003c42:	4603      	mov	r3, r0
 8003c44:	e001      	b.n	8003c4a <memset+0x16>
 8003c46:	3c01      	subs	r4, #1
 8003c48:	d337      	bcc.n	8003cba <memset+0x86>
 8003c4a:	f803 2b01 	strb.w	r2, [r3], #1
 8003c4e:	079d      	lsls	r5, r3, #30
 8003c50:	d1f9      	bne.n	8003c46 <memset+0x12>
 8003c52:	2c03      	cmp	r4, #3
 8003c54:	d92a      	bls.n	8003cac <memset+0x78>
 8003c56:	b2cd      	uxtb	r5, r1
 8003c58:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003c5c:	2c0f      	cmp	r4, #15
 8003c5e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003c62:	d934      	bls.n	8003cce <memset+0x9a>
 8003c64:	f1a4 0210 	sub.w	r2, r4, #16
 8003c68:	f022 0c0f 	bic.w	ip, r2, #15
 8003c6c:	f103 0720 	add.w	r7, r3, #32
 8003c70:	0916      	lsrs	r6, r2, #4
 8003c72:	4467      	add	r7, ip
 8003c74:	f103 0210 	add.w	r2, r3, #16
 8003c78:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003c7c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003c80:	3210      	adds	r2, #16
 8003c82:	42ba      	cmp	r2, r7
 8003c84:	d1f8      	bne.n	8003c78 <memset+0x44>
 8003c86:	1c72      	adds	r2, r6, #1
 8003c88:	f014 0f0c 	tst.w	r4, #12
 8003c8c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003c90:	f004 060f 	and.w	r6, r4, #15
 8003c94:	d013      	beq.n	8003cbe <memset+0x8a>
 8003c96:	1f33      	subs	r3, r6, #4
 8003c98:	f023 0303 	bic.w	r3, r3, #3
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f842 5b04 	str.w	r5, [r2], #4
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d1fb      	bne.n	8003ca0 <memset+0x6c>
 8003ca8:	f006 0403 	and.w	r4, r6, #3
 8003cac:	b12c      	cbz	r4, 8003cba <memset+0x86>
 8003cae:	b2ca      	uxtb	r2, r1
 8003cb0:	441c      	add	r4, r3
 8003cb2:	f803 2b01 	strb.w	r2, [r3], #1
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d1fb      	bne.n	8003cb2 <memset+0x7e>
 8003cba:	bcf0      	pop	{r4, r5, r6, r7}
 8003cbc:	4770      	bx	lr
 8003cbe:	4634      	mov	r4, r6
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	2c00      	cmp	r4, #0
 8003cc4:	d1f3      	bne.n	8003cae <memset+0x7a>
 8003cc6:	e7f8      	b.n	8003cba <memset+0x86>
 8003cc8:	4614      	mov	r4, r2
 8003cca:	4603      	mov	r3, r0
 8003ccc:	e7c1      	b.n	8003c52 <memset+0x1e>
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4626      	mov	r6, r4
 8003cd2:	e7e0      	b.n	8003c96 <memset+0x62>
