
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002d9 	.word	0x080002d9
 8000008:	080002db 	.word	0x080002db
 800000c:	080002db 	.word	0x080002db
 8000010:	080002db 	.word	0x080002db
 8000014:	080002db 	.word	0x080002db
 8000018:	080002db 	.word	0x080002db
 800001c:	080002db 	.word	0x080002db
 8000020:	080002db 	.word	0x080002db
 8000024:	080002db 	.word	0x080002db
 8000028:	080002db 	.word	0x080002db
 800002c:	08002eb1 	.word	0x08002eb1
 8000030:	080002db 	.word	0x080002db
 8000034:	080002db 	.word	0x080002db
 8000038:	080002db 	.word	0x080002db
 800003c:	080002db 	.word	0x080002db
 8000040:	080002db 	.word	0x080002db
 8000044:	080002db 	.word	0x080002db
 8000048:	080002db 	.word	0x080002db
 800004c:	080002db 	.word	0x080002db
 8000050:	080002db 	.word	0x080002db
 8000054:	080002db 	.word	0x080002db
 8000058:	080039a1 	.word	0x080039a1
 800005c:	08003951 	.word	0x08003951
 8000060:	08003901 	.word	0x08003901
 8000064:	080038b1 	.word	0x080038b1
 8000068:	08003861 	.word	0x08003861
 800006c:	08003641 	.word	0x08003641
 8000070:	08003611 	.word	0x08003611
 8000074:	080035e1 	.word	0x080035e1
 8000078:	080035b1 	.word	0x080035b1
 800007c:	08003581 	.word	0x08003581
 8000080:	08003551 	.word	0x08003551
 8000084:	08003521 	.word	0x08003521
 8000088:	080002db 	.word	0x080002db
 800008c:	080002db 	.word	0x080002db
 8000090:	080002db 	.word	0x080002db
 8000094:	080002db 	.word	0x080002db
 8000098:	080002db 	.word	0x080002db
 800009c:	08003781 	.word	0x08003781
 80000a0:	080002db 	.word	0x080002db
 80000a4:	080002db 	.word	0x080002db
 80000a8:	080002db 	.word	0x080002db
 80000ac:	080002db 	.word	0x080002db
 80000b0:	080002db 	.word	0x080002db
 80000b4:	080002db 	.word	0x080002db
 80000b8:	080002db 	.word	0x080002db
 80000bc:	080002db 	.word	0x080002db
 80000c0:	080002db 	.word	0x080002db
 80000c4:	080002db 	.word	0x080002db
 80000c8:	080002db 	.word	0x080002db
 80000cc:	080002db 	.word	0x080002db
 80000d0:	080002db 	.word	0x080002db
 80000d4:	080002db 	.word	0x080002db
 80000d8:	08003111 	.word	0x08003111
 80000dc:	080002db 	.word	0x080002db
 80000e0:	08003671 	.word	0x08003671
 80000e4:	080002db 	.word	0x080002db
 80000e8:	080002db 	.word	0x080002db
 80000ec:	080002db 	.word	0x080002db
 80000f0:	080002db 	.word	0x080002db
 80000f4:	080002db 	.word	0x080002db
 80000f8:	080002db 	.word	0x080002db
 80000fc:	080034f1 	.word	0x080034f1
 8000100:	080002db 	.word	0x080002db
 8000104:	080002db 	.word	0x080002db
 8000108:	080032c1 	.word	0x080032c1
 800010c:	080002db 	.word	0x080002db
 8000110:	080002db 	.word	0x080002db
 8000114:	080002db 	.word	0x080002db
 8000118:	080002db 	.word	0x080002db
 800011c:	080002db 	.word	0x080002db
 8000120:	080034c1 	.word	0x080034c1
 8000124:	08003491 	.word	0x08003491
 8000128:	08003461 	.word	0x08003461
 800012c:	08003431 	.word	0x08003431
 8000130:	08003401 	.word	0x08003401
 8000134:	080002db 	.word	0x080002db
 8000138:	080002db 	.word	0x080002db
 800013c:	080002db 	.word	0x080002db
 8000140:	080002db 	.word	0x080002db
 8000144:	080002db 	.word	0x080002db
 8000148:	080002db 	.word	0x080002db
 800014c:	080002db 	.word	0x080002db
 8000150:	080033d1 	.word	0x080033d1
 8000154:	080033a1 	.word	0x080033a1
 8000158:	08003371 	.word	0x08003371
 800015c:	080002db 	.word	0x080002db
 8000160:	080002db 	.word	0x080002db
 8000164:	080002db 	.word	0x080002db
 8000168:	080002db 	.word	0x080002db
 800016c:	080002db 	.word	0x080002db
 8000170:	080002db 	.word	0x080002db
 8000174:	080002db 	.word	0x080002db
 8000178:	080002db 	.word	0x080002db
 800017c:	080002db 	.word	0x080002db
 8000180:	080002db 	.word	0x080002db
 8000184:	080002db 	.word	0x080002db
 8000188:	080002db 	.word	0x080002db
 800018c:	080002db 	.word	0x080002db
 8000190:	080002db 	.word	0x080002db
 8000194:	080002db 	.word	0x080002db
 8000198:	080002db 	.word	0x080002db
 800019c:	080002db 	.word	0x080002db
 80001a0:	080002db 	.word	0x080002db
 80001a4:	080002db 	.word	0x080002db
 80001a8:	080002db 	.word	0x080002db
 80001ac:	080002db 	.word	0x080002db
 80001b0:	080002db 	.word	0x080002db
 80001b4:	080002db 	.word	0x080002db
 80001b8:	080002db 	.word	0x080002db
 80001bc:	080002db 	.word	0x080002db
 80001c0:	080002db 	.word	0x080002db
 80001c4:	080002db 	.word	0x080002db
 80001c8:	080002db 	.word	0x080002db
 80001cc:	080002db 	.word	0x080002db
 80001d0:	080002db 	.word	0x080002db
 80001d4:	080002db 	.word	0x080002db
 80001d8:	080002db 	.word	0x080002db
 80001dc:	080002db 	.word	0x080002db

Disassembly of section .text:

08000200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000202:	4827      	ldr	r0, [pc, #156]	; (80002a0 <endfiniloop+0x4>)
                msr     MSP, r0
 8000204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000208:	4826      	ldr	r0, [pc, #152]	; (80002a4 <endfiniloop+0x8>)
                msr     PSP, r0
 800020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800020e:	4826      	ldr	r0, [pc, #152]	; (80002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800021c:	f380 8814 	msr	CONTROL, r0
                isb
 8000220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000224:	f003 fc24 	bl	8003a70 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000228:	f002 fe9a 	bl	8002f60 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000230:	491e      	ldr	r1, [pc, #120]	; (80002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <endfiniloop+0x4>)

08000234 <msloop>:
msloop:
                cmp     r1, r2
 8000234:	4291      	cmp	r1, r2
                itt     lo
 8000236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800023c:	e7fa      	bcc.n	8000234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800023e:	491c      	ldr	r1, [pc, #112]	; (80002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000240:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <endfiniloop+0x8>)

08000242 <psloop>:
psloop:
                cmp     r1, r2
 8000242:	4291      	cmp	r1, r2
                itt     lo
 8000244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800024a:	e7fa      	bcc.n	8000242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800024c:	4919      	ldr	r1, [pc, #100]	; (80002b4 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800024e:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <endfiniloop+0x20>)

08000252 <dloop>:
dloop:
                cmp     r2, r3
 8000252:	429a      	cmp	r2, r3
                ittt    lo
 8000254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800025e:	e7f8      	bcc.n	8000252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000260:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000262:	4917      	ldr	r1, [pc, #92]	; (80002c0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000264:	4a17      	ldr	r2, [pc, #92]	; (80002c4 <endfiniloop+0x28>)

08000266 <bloop>:
bloop:
                cmp     r1, r2
 8000266:	4291      	cmp	r1, r2
                itt     lo
 8000268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800026e:	e7fa      	bcc.n	8000266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000270:	f003 fbb6 	bl	80039e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000274:	f003 fbf4 	bl	8003a60 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000278:	4c13      	ldr	r4, [pc, #76]	; (80002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800027a:	4d14      	ldr	r5, [pc, #80]	; (80002cc <endfiniloop+0x30>)

0800027c <initloop>:
initloop:
                cmp     r4, r5
 800027c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800027e:	da03      	bge.n	8000288 <endinitloop>
                ldr     r1, [r4], #4
 8000280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000284:	4788      	blx	r1
                b       initloop
 8000286:	e7f9      	b.n	800027c <initloop>

08000288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000288:	f002 f832 	bl	80022f0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800028c:	4c10      	ldr	r4, [pc, #64]	; (80002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800028e:	4d11      	ldr	r5, [pc, #68]	; (80002d4 <endfiniloop+0x38>)

08000290 <finiloop>:
finiloop:
                cmp     r4, r5
 8000290:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000292:	da03      	bge.n	800029c <endfiniloop>
                ldr     r1, [r4], #4
 8000294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000298:	4788      	blx	r1
                b       finiloop
 800029a:	e7f9      	b.n	8000290 <finiloop>

0800029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800029c:	f003 bbd8 	b.w	8003a50 <__default_exit>
                ldr     r0, =__main_stack_end__
 80002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 80002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 80002a8:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 80002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 80002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 80002b4:	08003f98 	.word	0x08003f98
                ldr     r2, =__data_base__
 80002b8:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 80002bc:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002c0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002c4:	20000d50 	.word	0x20000d50
                ldr     r4, =__init_array_base__
 80002c8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002cc:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002d0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002d4:	080001e0 	.word	0x080001e0

080002d8 <Reset_Handler>:
        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:

         b          _crt0_entry
 80002d8:	e792      	b.n	8000200 <_crt0_entry>

080002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002da:	f000 f800 	bl	80002de <_unhandled_exception>

080002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002de:	e7fe      	b.n	80002de <_unhandled_exception>

080002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002e8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ea:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002f6:	4628      	mov	r0, r5
                blx     r4
 80002f8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002fa:	2000      	movs	r0, #0
                bl      chThdExit
 80002fc:	f002 fde8 	bl	8002ed0 <chThdExit>

08000300 <_zombies>:
_zombies:       b       _zombies
 8000300:	e7fe      	b.n	8000300 <_zombies>

08000302 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 8000302:	f002 fe0d 	bl	8002f20 <chSchDoReschedule>

08000306 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000306:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000308:	e7fe      	b.n	8000308 <_port_exit_from_isr+0x2>
	...

0800030c <memcpy>:
 800030c:	4684      	mov	ip, r0
 800030e:	ea41 0300 	orr.w	r3, r1, r0
 8000312:	f013 0303 	ands.w	r3, r3, #3
 8000316:	d16d      	bne.n	80003f4 <memcpy+0xe8>
 8000318:	3a40      	subs	r2, #64	; 0x40
 800031a:	d341      	bcc.n	80003a0 <memcpy+0x94>
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000380:	f840 3b04 	str.w	r3, [r0], #4
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	3a40      	subs	r2, #64	; 0x40
 800039e:	d2bd      	bcs.n	800031c <memcpy+0x10>
 80003a0:	3230      	adds	r2, #48	; 0x30
 80003a2:	d311      	bcc.n	80003c8 <memcpy+0xbc>
 80003a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a8:	f840 3b04 	str.w	r3, [r0], #4
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b8:	f840 3b04 	str.w	r3, [r0], #4
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	3a10      	subs	r2, #16
 80003c6:	d2ed      	bcs.n	80003a4 <memcpy+0x98>
 80003c8:	320c      	adds	r2, #12
 80003ca:	d305      	bcc.n	80003d8 <memcpy+0xcc>
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	3a04      	subs	r2, #4
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0xc0>
 80003d8:	3204      	adds	r2, #4
 80003da:	d008      	beq.n	80003ee <memcpy+0xe2>
 80003dc:	07d2      	lsls	r2, r2, #31
 80003de:	bf1c      	itt	ne
 80003e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003e4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003e8:	d301      	bcc.n	80003ee <memcpy+0xe2>
 80003ea:	880b      	ldrh	r3, [r1, #0]
 80003ec:	8003      	strh	r3, [r0, #0]
 80003ee:	4660      	mov	r0, ip
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	2a08      	cmp	r2, #8
 80003f6:	d313      	bcc.n	8000420 <memcpy+0x114>
 80003f8:	078b      	lsls	r3, r1, #30
 80003fa:	d08d      	beq.n	8000318 <memcpy+0xc>
 80003fc:	f010 0303 	ands.w	r3, r0, #3
 8000400:	d08a      	beq.n	8000318 <memcpy+0xc>
 8000402:	f1c3 0304 	rsb	r3, r3, #4
 8000406:	1ad2      	subs	r2, r2, r3
 8000408:	07db      	lsls	r3, r3, #31
 800040a:	bf1c      	itt	ne
 800040c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000410:	f800 3b01 	strbne.w	r3, [r0], #1
 8000414:	d380      	bcc.n	8000318 <memcpy+0xc>
 8000416:	f831 3b02 	ldrh.w	r3, [r1], #2
 800041a:	f820 3b02 	strh.w	r3, [r0], #2
 800041e:	e77b      	b.n	8000318 <memcpy+0xc>
 8000420:	3a04      	subs	r2, #4
 8000422:	d3d9      	bcc.n	80003d8 <memcpy+0xcc>
 8000424:	3a01      	subs	r2, #1
 8000426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800042a:	f800 3b01 	strb.w	r3, [r0], #1
 800042e:	d2f9      	bcs.n	8000424 <memcpy+0x118>
 8000430:	780b      	ldrb	r3, [r1, #0]
 8000432:	7003      	strb	r3, [r0, #0]
 8000434:	784b      	ldrb	r3, [r1, #1]
 8000436:	7043      	strb	r3, [r0, #1]
 8000438:	788b      	ldrb	r3, [r1, #2]
 800043a:	7083      	strb	r3, [r0, #2]
 800043c:	4660      	mov	r0, ip
 800043e:	4770      	bx	lr

08000440 <strlen>:
 8000440:	f890 f000 	pld	[r0]
 8000444:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000448:	f020 0107 	bic.w	r1, r0, #7
 800044c:	f06f 0c00 	mvn.w	ip, #0
 8000450:	f010 0407 	ands.w	r4, r0, #7
 8000454:	f891 f020 	pld	[r1, #32]
 8000458:	f040 8049 	bne.w	80004ee <strlen+0xae>
 800045c:	f04f 0400 	mov.w	r4, #0
 8000460:	f06f 0007 	mvn.w	r0, #7
 8000464:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000468:	f891 f040 	pld	[r1, #64]	; 0x40
 800046c:	f100 0008 	add.w	r0, r0, #8
 8000470:	fa82 f24c 	uadd8	r2, r2, ip
 8000474:	faa4 f28c 	sel	r2, r4, ip
 8000478:	fa83 f34c 	uadd8	r3, r3, ip
 800047c:	faa2 f38c 	sel	r3, r2, ip
 8000480:	bb4b      	cbnz	r3, 80004d6 <strlen+0x96>
 8000482:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000486:	fa82 f24c 	uadd8	r2, r2, ip
 800048a:	f100 0008 	add.w	r0, r0, #8
 800048e:	faa4 f28c 	sel	r2, r4, ip
 8000492:	fa83 f34c 	uadd8	r3, r3, ip
 8000496:	faa2 f38c 	sel	r3, r2, ip
 800049a:	b9e3      	cbnz	r3, 80004d6 <strlen+0x96>
 800049c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80004a0:	fa82 f24c 	uadd8	r2, r2, ip
 80004a4:	f100 0008 	add.w	r0, r0, #8
 80004a8:	faa4 f28c 	sel	r2, r4, ip
 80004ac:	fa83 f34c 	uadd8	r3, r3, ip
 80004b0:	faa2 f38c 	sel	r3, r2, ip
 80004b4:	b97b      	cbnz	r3, 80004d6 <strlen+0x96>
 80004b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80004ba:	f101 0120 	add.w	r1, r1, #32
 80004be:	fa82 f24c 	uadd8	r2, r2, ip
 80004c2:	f100 0008 	add.w	r0, r0, #8
 80004c6:	faa4 f28c 	sel	r2, r4, ip
 80004ca:	fa83 f34c 	uadd8	r3, r3, ip
 80004ce:	faa2 f38c 	sel	r3, r2, ip
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0c6      	beq.n	8000464 <strlen+0x24>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	bf04      	itt	eq
 80004da:	3004      	addeq	r0, #4
 80004dc:	461a      	moveq	r2, r3
 80004de:	ba12      	rev	r2, r2
 80004e0:	fab2 f282 	clz	r2, r2
 80004e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80004e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80004ec:	4770      	bx	lr
 80004ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80004f2:	f004 0503 	and.w	r5, r4, #3
 80004f6:	f1c4 0000 	rsb	r0, r4, #0
 80004fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80004fe:	f014 0f04 	tst.w	r4, #4
 8000502:	f891 f040 	pld	[r1, #64]	; 0x40
 8000506:	fa0c f505 	lsl.w	r5, ip, r5
 800050a:	ea62 0205 	orn	r2, r2, r5
 800050e:	bf1c      	itt	ne
 8000510:	ea63 0305 	ornne	r3, r3, r5
 8000514:	4662      	movne	r2, ip
 8000516:	f04f 0400 	mov.w	r4, #0
 800051a:	e7a9      	b.n	8000470 <strlen+0x30>
 800051c:	0000      	movs	r0, r0
	...

08000520 <dmaStreamAllocI.part.0.constprop.0>:
 *                      structure.
 * @retval NULL         if a/the stream is not available.
 *
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000520:	b4f0      	push	{r4, r5, r6, r7}
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
    uint32_t mask = (1U << i);
    if ((dma.allocated_mask & mask) == 0U) {
 8000522:	4c26      	ldr	r4, [pc, #152]	; (80005bc <dmaStreamAllocI.part.0.constprop.0+0x9c>)
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8000524:	4603      	mov	r3, r0
    uint32_t mask = (1U << i);
 8000526:	2201      	movs	r2, #1
    if ((dma.allocated_mask & mask) == 0U) {
 8000528:	6820      	ldr	r0, [r4, #0]
    uint32_t mask = (1U << i);
 800052a:	409a      	lsls	r2, r3
    if ((dma.allocated_mask & mask) == 0U) {
 800052c:	4202      	tst	r2, r0

      return dmastp;
    }
  }

  return NULL;
 800052e:	bf18      	it	ne
 8000530:	2000      	movne	r0, #0
    if ((dma.allocated_mask & mask) == 0U) {
 8000532:	d001      	beq.n	8000538 <dmaStreamAllocI.part.0.constprop.0+0x18>
}
 8000534:	bcf0      	pop	{r4, r5, r6, r7}
 8000536:	4770      	bx	lr
        rccEnableDMA1(true);
 8000538:	4d21      	ldr	r5, [pc, #132]	; (80005c0 <dmaStreamAllocI.part.0.constprop.0+0xa0>)
      dma.allocated_mask  |= mask;
 800053a:	4302      	orrs	r2, r0
 800053c:	6022      	str	r2, [r4, #0]
        rccEnableDMA1(true);
 800053e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
      dma.streams[i].param = param;
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <dmaStreamAllocI.part.0.constprop.0+0xa4>)
        rccEnableDMA1(true);
 8000542:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dma.streams[i].func  = func;
 8000546:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
      dma.streams[i].param = param;
 800054a:	e9c4 1001 	strd	r1, r0, [r4, #4]
        rccEnableDMA1(true);
 800054e:	632a      	str	r2, [r5, #48]	; 0x30
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000550:	200c      	movs	r0, #12
        rccEnableDMA1(true);
 8000552:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 8000554:	491c      	ldr	r1, [pc, #112]	; (80005c8 <dmaStreamAllocI.part.0.constprop.0+0xa8>)
 8000556:	fb00 f003 	mul.w	r0, r0, r3
        rccEnableDMA1(true);
 800055a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
      dmaStreamDisable(dmastp);
 800055e:	580e      	ldr	r6, [r1, r0]
        rccEnableDMA1(true);
 8000560:	652a      	str	r2, [r5, #80]	; 0x50
 8000562:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      dmaStreamDisable(dmastp);
 8000564:	6832      	ldr	r2, [r6, #0]
 8000566:	f022 021f 	bic.w	r2, r2, #31
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
 800056a:	4408      	add	r0, r1
      dmaStreamDisable(dmastp);
 800056c:	6032      	str	r2, [r6, #0]
 800056e:	6832      	ldr	r2, [r6, #0]
 8000570:	f012 0201 	ands.w	r2, r2, #1
 8000574:	d1fb      	bne.n	800056e <dmaStreamAllocI.part.0.constprop.0+0x4e>
 8000576:	240c      	movs	r4, #12
 8000578:	fb04 1303 	mla	r3, r4, r3, r1
 800057c:	243d      	movs	r4, #61	; 0x3d
        nvicEnableVector(dmastp->vector, priority);
 800057e:	7ad9      	ldrb	r1, [r3, #11]
      dmaStreamDisable(dmastp);
 8000580:	7a5d      	ldrb	r5, [r3, #9]
 8000582:	685f      	ldr	r7, [r3, #4]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000584:	094b      	lsrs	r3, r1, #5
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	40ac      	lsls	r4, r5
 800058a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800058e:	f101 4560 	add.w	r5, r1, #3758096384	; 0xe0000000
 8000592:	603c      	str	r4, [r7, #0]
 8000594:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000598:	2401      	movs	r4, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800059a:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800059e:	f001 011f 	and.w	r1, r1, #31
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 80005a2:	6032      	str	r2, [r6, #0]
 80005a4:	fa04 f101 	lsl.w	r1, r4, r1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80005a8:	22a0      	movs	r2, #160	; 0xa0
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 80005aa:	2421      	movs	r4, #33	; 0x21
 80005ac:	6174      	str	r4, [r6, #20]
 80005ae:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80005b2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80005b6:	6019      	str	r1, [r3, #0]
 80005b8:	e7bc      	b.n	8000534 <dmaStreamAllocI.part.0.constprop.0+0x14>
 80005ba:	bf00      	nop
 80005bc:	20000b70 	.word	0x20000b70
 80005c0:	40023800 	.word	0x40023800
 80005c4:	2000087c 	.word	0x2000087c
 80005c8:	08003d04 	.word	0x08003d04
 80005cc:	00000000 	.word	0x00000000

080005d0 <_pal_lld_enablepadevent.constprop.0>:
     0x400 intervals in memory space. So far this is true for all devices.*/
  portidx = (((uint32_t)port - (uint32_t)GPIOA) >> 10U) & 0xFU;

  /* Port selection in SYSCFG.*/
#if STM32_EXTI_TYPE == 0
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 80005d0:	490c      	ldr	r1, [pc, #48]	; (8000604 <_pal_lld_enablepadevent.constprop.0+0x34>)

  /* Programming edge registers.*/
  if (mode & PAL_EVENT_MODE_RISING_EDGE)
    EXTI->RTSR1 |= padmask;
  else
    EXTI->RTSR1 &= ~padmask;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <_pal_lld_enablepadevent.constprop.0+0x38>)
  SYSCFG->EXTICR[cridx] = (SYSCFG->EXTICR[cridx] & crmask) | (portidx << croff);
 80005d4:	694a      	ldr	r2, [r1, #20]
 80005d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80005da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005de:	614a      	str	r2, [r1, #20]
    EXTI->RTSR1 &= ~padmask;
 80005e0:	689a      	ldr	r2, [r3, #8]
 80005e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80005e6:	609a      	str	r2, [r3, #8]
  if (mode & PAL_EVENT_MODE_FALLING_EDGE)
    EXTI->FTSR1 |= padmask;
 80005e8:	68da      	ldr	r2, [r3, #12]
 80005ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005ee:	60da      	str	r2, [r3, #12]
  /* Programming interrupt and event registers.*/
#if defined(STM32_EXTI_ENHANCED)
  EXTI_D1->IMR1 |= padmask;
  EXTI_D1->EMR1 &= ~padmask;
#else
  EXTI->IMR1 |= padmask;
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80005f6:	601a      	str	r2, [r3, #0]
  EXTI->EMR1 &= ~padmask;
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80005fe:	605a      	str	r2, [r3, #4]
#endif
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40013800 	.word	0x40013800
 8000608:	40013c00 	.word	0x40013c00
 800060c:	00000000 	.word	0x00000000

08000610 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
	...

08000620 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000620:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000622:	2320      	movs	r3, #32
 8000624:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000628:	4c0b      	ldr	r4, [pc, #44]	; (8000658 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800062a:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 800062e:	4249      	negs	r1, r1
 8000630:	1a28      	subs	r0, r5, r0
 8000632:	4008      	ands	r0, r1
  prev = p - offset;
 8000634:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000636:	429a      	cmp	r2, r3
 8000638:	d307      	bcc.n	800064a <chCoreAllocFromTop+0x2a>
 800063a:	4295      	cmp	r5, r2
 800063c:	d305      	bcc.n	800064a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800063e:	6062      	str	r2, [r4, #4]
 8000640:	2300      	movs	r3, #0
 8000642:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000646:	bc30      	pop	{r4, r5}
 8000648:	4770      	bx	lr
    return NULL;
 800064a:	2000      	movs	r0, #0
 800064c:	2300      	movs	r3, #0
 800064e:	f383 8811 	msr	BASEPRI, r3
}
 8000652:	bc30      	pop	{r4, r5}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	20000b48 	.word	0x20000b48
 800065c:	00000000 	.word	0x00000000

08000660 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 8000660:	4a02      	ldr	r2, [pc, #8]	; (800066c <notify2+0xc>)
 8000662:	68d3      	ldr	r3, [r2, #12]
 8000664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000668:	60d3      	str	r3, [r2, #12]
}
 800066a:	4770      	bx	lr
 800066c:	40004400 	.word	0x40004400

08000670 <nm_bsp_interrupt_ctrl.part.0>:
 *	@fn		nm_bsp_interrupt_ctrl
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
 8000670:	b508      	push	{r3, lr}
 8000672:	2320      	movs	r3, #32
 8000674:	f383 8811 	msr	BASEPRI, r3
{
	if (1 == u8Enable)
	{
//		HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x01, 0);
//		HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
	  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 8000678:	f7ff ffaa 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 800067c:	2300      	movs	r3, #0
 800067e:	f383 8811 	msr	BASEPRI, r3
	else
	{
//		HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
	  palClearPad(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN);
	}
}
 8000682:	bd08      	pop	{r3, pc}
	...

08000690 <_port_irq_epilogue>:
 8000690:	2320      	movs	r3, #32
 8000692:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <_port_irq_epilogue+0x3c>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800069e:	d102      	bne.n	80006a6 <_port_irq_epilogue+0x16>
 80006a0:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 80006a4:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80006a6:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 80006aa:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 80006ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b0:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80006b2:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <_port_irq_epilogue+0x40>)
 80006b8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80006ba:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 80006bc:	6889      	ldr	r1, [r1, #8]
 80006be:	6892      	ldr	r2, [r2, #8]
 80006c0:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 80006c2:	bf8c      	ite	hi
 80006c4:	4a03      	ldrhi	r2, [pc, #12]	; (80006d4 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 80006c6:	4a04      	ldrls	r2, [pc, #16]	; (80006d8 <_port_irq_epilogue+0x48>)
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00
 80006d0:	200009ac 	.word	0x200009ac
 80006d4:	08000303 	.word	0x08000303
 80006d8:	08000306 	.word	0x08000306
 80006dc:	00000000 	.word	0x00000000

080006e0 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 80006e2:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006e4:	e9d2 3400 	ldrd	r3, r4, [r2]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80006e8:	4249      	negs	r1, r1
 80006ea:	1a20      	subs	r0, r4, r0
 80006ec:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80006ee:	4298      	cmp	r0, r3
 80006f0:	d304      	bcc.n	80006fc <chCoreAllocAlignedI+0x1c>
 80006f2:	4284      	cmp	r4, r0
 80006f4:	d302      	bcc.n	80006fc <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 80006f6:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 80006f8:	6050      	str	r0, [r2, #4]
 80006fa:	4770      	bx	lr
    return NULL;
 80006fc:	2000      	movs	r0, #0
 80006fe:	bc10      	pop	{r4}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000b48 	.word	0x20000b48
	...

08000710 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000710:	4a0e      	ldr	r2, [pc, #56]	; (800074c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <chTMStopMeasurementX+0x40>)
 8000714:	6852      	ldr	r2, [r2, #4]
 8000716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  tmp->last = (now - tmp->last) - offset;
 8000718:	6881      	ldr	r1, [r0, #8]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800071a:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 800071c:	1ad3      	subs	r3, r2, r3
  tmp->cumulative += (rttime_t)tmp->last;
 800071e:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->n++;
 8000722:	68c2      	ldr	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000724:	1a5b      	subs	r3, r3, r1
  tmp->n++;
 8000726:	3201      	adds	r2, #1
  if (tmp->last > tmp->worst) {
 8000728:	6841      	ldr	r1, [r0, #4]
  tmp->n++;
 800072a:	60c2      	str	r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 800072c:	18e4      	adds	r4, r4, r3
  if (tmp->last < tmp->best) {
 800072e:	6802      	ldr	r2, [r0, #0]
  tmp->last = (now - tmp->last) - offset;
 8000730:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000732:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000736:	428b      	cmp	r3, r1
    tmp->worst = tmp->last;
 8000738:	bf88      	it	hi
 800073a:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800073c:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 800073e:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 8000742:	bf38      	it	cc
 8000744:	6003      	strcc	r3, [r0, #0]
}
 8000746:	bc30      	pop	{r4, r5}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e0001000 	.word	0xe0001000
 8000750:	200009ac 	.word	0x200009ac
	...

08000760 <chTMStartMeasurementX>:
 8000760:	4b01      	ldr	r3, [pc, #4]	; (8000768 <chTMStartMeasurementX+0x8>)
 8000762:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8000764:	6083      	str	r3, [r0, #8]
}
 8000766:	4770      	bx	lr
 8000768:	e0001000 	.word	0xe0001000
 800076c:	00000000 	.word	0x00000000

08000770 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000770:	2320      	movs	r3, #32
 8000772:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 8000776:	f890 3020 	ldrb.w	r3, [r0, #32]
 800077a:	2b07      	cmp	r3, #7
 800077c:	d80d      	bhi.n	800079a <wakeup+0x2a>
 800077e:	e8df f003 	tbb	[pc, r3]
 8000782:	0c27      	.short	0x0c27
 8000784:	0408230c 	.word	0x0408230c
 8000788:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 800078a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 800078c:	6893      	ldr	r3, [r2, #8]
 800078e:	3301      	adds	r3, #1
 8000790:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000792:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000796:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000798:	605a      	str	r2, [r3, #4]
static void wakeup(void *p) {
 800079a:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800079c:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 800079e:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 80007a2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <wakeup+0x68>)
  tp->u.rdymsg = MSG_TIMEOUT;
 80007a6:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 80007a8:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80007ac:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	428a      	cmp	r2, r1
 80007b2:	d2fb      	bcs.n	80007ac <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	2100      	movs	r1, #0
 80007b8:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80007bc:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80007be:	6058      	str	r0, [r3, #4]
 80007c0:	f381 8811 	msr	BASEPRI, r1
}
 80007c4:	bc10      	pop	{r4}
 80007c6:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 80007c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
    break;
 80007ce:	e7e4      	b.n	800079a <wakeup+0x2a>
 80007d0:	2300      	movs	r3, #0
 80007d2:	f383 8811 	msr	BASEPRI, r3
 80007d6:	4770      	bx	lr
 80007d8:	200009ac 	.word	0x200009ac
 80007dc:	00000000 	.word	0x00000000

080007e0 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 80007e0:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 80007e2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <chSchReadyI+0x20>)
  tp->state = CH_STATE_READY;
 80007e6:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 80007ea:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d2fb      	bcs.n	80007ea <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 80007f8:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 80007fa:	6058      	str	r0, [r3, #4]
}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200009ac 	.word	0x200009ac
	...

08000810 <chEvtBroadcastFlagsI.constprop.0>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000812:	4f16      	ldr	r7, [pc, #88]	; (800086c <chEvtBroadcastFlagsI.constprop.0+0x5c>)
 8000814:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000818:	42bc      	cmp	r4, r7
 800081a:	d020      	beq.n	800085e <chEvtBroadcastFlagsI.constprop.0+0x4e>
 800081c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800081e:	2600      	movs	r6, #0
 8000820:	e004      	b.n	800082c <chEvtBroadcastFlagsI.constprop.0+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000822:	2a0b      	cmp	r2, #11
 8000824:	d01c      	beq.n	8000860 <chEvtBroadcastFlagsI.constprop.0+0x50>
    elp = elp->next;
 8000826:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000828:	42bc      	cmp	r4, r7
 800082a:	d018      	beq.n	800085e <chEvtBroadcastFlagsI.constprop.0+0x4e>
    elp->flags |= flags;
 800082c:	68e3      	ldr	r3, [r4, #12]
 800082e:	432b      	orrs	r3, r5
 8000830:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8000832:	b115      	cbz	r5, 800083a <chEvtBroadcastFlagsI.constprop.0+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8000834:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8000836:	421d      	tst	r5, r3
 8000838:	d0f5      	beq.n	8000826 <chEvtBroadcastFlagsI.constprop.0+0x16>
  tp->epending |= events;
 800083a:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 800083e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000840:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000844:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000846:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000848:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800084a:	d1ea      	bne.n	8000822 <chEvtBroadcastFlagsI.constprop.0+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800084c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800084e:	4213      	tst	r3, r2
 8000850:	d0e9      	beq.n	8000826 <chEvtBroadcastFlagsI.constprop.0+0x16>
    tp->u.rdymsg = MSG_OK;
 8000852:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000854:	f7ff ffc4 	bl	80007e0 <chSchReadyI>
    elp = elp->next;
 8000858:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800085a:	42bc      	cmp	r4, r7
 800085c:	d1e6      	bne.n	800082c <chEvtBroadcastFlagsI.constprop.0+0x1c>
}
 800085e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8000860:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000862:	ea32 0303 	bics.w	r3, r2, r3
 8000866:	d1de      	bne.n	8000826 <chEvtBroadcastFlagsI.constprop.0+0x16>
 8000868:	e7f3      	b.n	8000852 <chEvtBroadcastFlagsI.constprop.0+0x42>
 800086a:	bf00      	nop
 800086c:	20000800 	.word	0x20000800

08000870 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000874:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000876:	4284      	cmp	r4, r0
 8000878:	d009      	beq.n	800088e <chThdDequeueAllI.constprop.0+0x1e>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800087a:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
 800087c:	6803      	ldr	r3, [r0, #0]
 800087e:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000880:	605c      	str	r4, [r3, #4]
 8000882:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000884:	f7ff ffac 	bl	80007e0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000888:	6820      	ldr	r0, [r4, #0]
 800088a:	42a0      	cmp	r0, r4
 800088c:	d1f6      	bne.n	800087c <chThdDequeueAllI.constprop.0+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800088e:	bd38      	pop	{r3, r4, r5, pc}

08000890 <_idle_thread>:
}
 8000890:	e7fe      	b.n	8000890 <_idle_thread>
 8000892:	bf00      	nop
	...

080008a0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008a0:	f011 0f0c 	tst.w	r1, #12
 80008a4:	d100      	bne.n	80008a8 <spi_lld_serve_tx_interrupt+0x8>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 80008a6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80008aa:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <spi_lld_serve_tx_interrupt+0x14>)
 80008ac:	4a02      	ldr	r2, [pc, #8]	; (80008b8 <spi_lld_serve_tx_interrupt+0x18>)
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80008b0:	e7fe      	b.n	80008b0 <spi_lld_serve_tx_interrupt+0x10>
 80008b2:	bf00      	nop
 80008b4:	200009ac 	.word	0x200009ac
 80008b8:	08003b14 	.word	0x08003b14
 80008bc:	00000000 	.word	0x00000000

080008c0 <spi_lld_serve_rx_interrupt>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008c0:	f011 0f0c 	tst.w	r1, #12
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80008c4:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80008c6:	d14f      	bne.n	8000968 <spi_lld_serve_rx_interrupt+0xa8>
  if (spip->config->circular) {
 80008c8:	460d      	mov	r5, r1
 80008ca:	6841      	ldr	r1, [r0, #4]
 80008cc:	780b      	ldrb	r3, [r1, #0]
 80008ce:	4604      	mov	r4, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d133      	bne.n	800093c <spi_lld_serve_rx_interrupt+0x7c>
    dmaStreamDisable(spip->dmatx);
 80008d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80008d6:	682a      	ldr	r2, [r5, #0]
 80008d8:	6813      	ldr	r3, [r2, #0]
 80008da:	f023 031f 	bic.w	r3, r3, #31
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	6813      	ldr	r3, [r2, #0]
 80008e2:	07d8      	lsls	r0, r3, #31
 80008e4:	d4fc      	bmi.n	80008e0 <spi_lld_serve_rx_interrupt+0x20>
 80008e6:	7a6a      	ldrb	r2, [r5, #9]
    dmaStreamDisable(spip->dmarx);
 80008e8:	6a20      	ldr	r0, [r4, #32]
    dmaStreamDisable(spip->dmatx);
 80008ea:	686d      	ldr	r5, [r5, #4]
 80008ec:	233d      	movs	r3, #61	; 0x3d
 80008ee:	4093      	lsls	r3, r2
    dmaStreamDisable(spip->dmarx);
 80008f0:	6802      	ldr	r2, [r0, #0]
    dmaStreamDisable(spip->dmatx);
 80008f2:	602b      	str	r3, [r5, #0]
    dmaStreamDisable(spip->dmarx);
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	f023 031f 	bic.w	r3, r3, #31
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	6813      	ldr	r3, [r2, #0]
 80008fe:	07db      	lsls	r3, r3, #31
 8000900:	d4fc      	bmi.n	80008fc <spi_lld_serve_rx_interrupt+0x3c>
 8000902:	7a45      	ldrb	r5, [r0, #9]
    _spi_isr_code(spip);
 8000904:	684a      	ldr	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 8000906:	6841      	ldr	r1, [r0, #4]
 8000908:	233d      	movs	r3, #61	; 0x3d
 800090a:	40ab      	lsls	r3, r5
 800090c:	600b      	str	r3, [r1, #0]
    _spi_isr_code(spip);
 800090e:	2a00      	cmp	r2, #0
 8000910:	d02f      	beq.n	8000972 <spi_lld_serve_rx_interrupt+0xb2>
 8000912:	2304      	movs	r3, #4
 8000914:	7023      	strb	r3, [r4, #0]
 8000916:	4620      	mov	r0, r4
 8000918:	4790      	blx	r2
 800091a:	7823      	ldrb	r3, [r4, #0]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d028      	beq.n	8000972 <spi_lld_serve_rx_interrupt+0xb2>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000920:	2320      	movs	r3, #32
 8000922:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 8000926:	68a0      	ldr	r0, [r4, #8]
 8000928:	b120      	cbz	r0, 8000934 <spi_lld_serve_rx_interrupt+0x74>
    *trp = NULL;
 800092a:	2300      	movs	r3, #0
 800092c:	60a3      	str	r3, [r4, #8]
    tp->u.rdymsg = msg;
 800092e:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000930:	f7ff ff56 	bl	80007e0 <chSchReadyI>
 8000934:	2300      	movs	r3, #0
 8000936:	f383 8811 	msr	BASEPRI, r3
}
 800093a:	bd38      	pop	{r3, r4, r5, pc}
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 800093c:	06eb      	lsls	r3, r5, #27
 800093e:	d503      	bpl.n	8000948 <spi_lld_serve_rx_interrupt+0x88>
      _spi_isr_half_code(spip);
 8000940:	684b      	ldr	r3, [r1, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f9      	beq.n	800093a <spi_lld_serve_rx_interrupt+0x7a>
 8000946:	4798      	blx	r3
    if ((flags & STM32_DMA_ISR_TCIF) != 0U) {
 8000948:	06ad      	lsls	r5, r5, #26
 800094a:	d5f6      	bpl.n	800093a <spi_lld_serve_rx_interrupt+0x7a>
      _spi_isr_full_code(spip);
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d0f2      	beq.n	800093a <spi_lld_serve_rx_interrupt+0x7a>
 8000954:	2204      	movs	r2, #4
 8000956:	7022      	strb	r2, [r4, #0]
 8000958:	4620      	mov	r0, r4
 800095a:	4798      	blx	r3
 800095c:	7823      	ldrb	r3, [r4, #0]
 800095e:	2b04      	cmp	r3, #4
 8000960:	d1eb      	bne.n	800093a <spi_lld_serve_rx_interrupt+0x7a>
 8000962:	2303      	movs	r3, #3
 8000964:	7023      	strb	r3, [r4, #0]
}
 8000966:	bd38      	pop	{r3, r4, r5, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <spi_lld_serve_rx_interrupt+0xc4>)
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <spi_lld_serve_rx_interrupt+0xc8>)
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000970:	e7fe      	b.n	8000970 <spi_lld_serve_rx_interrupt+0xb0>
    _spi_isr_code(spip);
 8000972:	2302      	movs	r3, #2
 8000974:	7023      	strb	r3, [r4, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000976:	2320      	movs	r3, #32
 8000978:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
 800097c:	68a0      	ldr	r0, [r4, #8]
 800097e:	2800      	cmp	r0, #0
 8000980:	d1d3      	bne.n	800092a <spi_lld_serve_rx_interrupt+0x6a>
 8000982:	e7d7      	b.n	8000934 <spi_lld_serve_rx_interrupt+0x74>
 8000984:	200009ac 	.word	0x200009ac
 8000988:	08003b14 	.word	0x08003b14
 800098c:	00000000 	.word	0x00000000

08000990 <_pal_lld_setgroupmode>:
                           iomode_t mode) {
 8000990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000994:	f002 0803 	and.w	r8, r2, #3
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000998:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800099c:	4647      	mov	r7, r8
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800099e:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80009a2:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  uint32_t bit     = 0;
 80009a6:	2400      	movs	r4, #0
      m4 = 15 << ((bit & 7) * 4);
 80009a8:	f04f 0b0f 	mov.w	fp, #15
      m1 = 1 << bit;
 80009ac:	f04f 0a01 	mov.w	sl, #1
      m2 = 3 << (bit * 2);
 80009b0:	46ae      	mov	lr, r5
 80009b2:	e013      	b.n	80009dc <_pal_lld_setgroupmode+0x4c>
        port->MODER   = (port->MODER & ~m2) | moder;
 80009b4:	f8d0 9000 	ldr.w	r9, [r0]
 80009b8:	ea03 0309 	and.w	r3, r3, r9
 80009bc:	433b      	orrs	r3, r7
        if (bit < 8)
 80009be:	2c07      	cmp	r4, #7
        port->MODER   = (port->MODER & ~m2) | moder;
 80009c0:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 80009c2:	d83e      	bhi.n	8000a42 <_pal_lld_setgroupmode+0xb2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80009c4:	6a03      	ldr	r3, [r0, #32]
 80009c6:	ea23 0202 	bic.w	r2, r3, r2
 80009ca:	4315      	orrs	r5, r2
 80009cc:	6205      	str	r5, [r0, #32]
    if (!mask)
 80009ce:	0849      	lsrs	r1, r1, #1
 80009d0:	d035      	beq.n	8000a3e <_pal_lld_setgroupmode+0xae>
    ospeedr <<= 2;
 80009d2:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 80009d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 80009d8:	00bf      	lsls	r7, r7, #2
    bit++;
 80009da:	3401      	adds	r4, #1
    if ((mask & 1) != 0) {
 80009dc:	07cb      	lsls	r3, r1, #31
 80009de:	d5f6      	bpl.n	80009ce <_pal_lld_setgroupmode+0x3e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80009e0:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 80009e2:	fa0a f204 	lsl.w	r2, sl, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80009e6:	ea23 0302 	bic.w	r3, r3, r2
 80009ea:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80009ec:	6882      	ldr	r2, [r0, #8]
      m2 = 3 << (bit * 2);
 80009ee:	2503      	movs	r5, #3
 80009f0:	0063      	lsls	r3, r4, #1
 80009f2:	fa05 f303 	lsl.w	r3, r5, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80009f6:	ea22 0203 	bic.w	r2, r2, r3
 80009fa:	4332      	orrs	r2, r6
 80009fc:	6082      	str	r2, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80009fe:	68c5      	ldr	r5, [r0, #12]
      altrmask = altr << ((bit & 7) * 4);
 8000a00:	f004 0207 	and.w	r2, r4, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a04:	ea25 0503 	bic.w	r5, r5, r3
 8000a08:	ea45 050e 	orr.w	r5, r5, lr
      altrmask = altr << ((bit & 7) * 4);
 8000a0c:	0092      	lsls	r2, r2, #2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a0e:	f1b8 0f02 	cmp.w	r8, #2
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a12:	60c5      	str	r5, [r0, #12]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a14:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000a18:	fa0c f502 	lsl.w	r5, ip, r2
      m4 = 15 << ((bit & 7) * 4);
 8000a1c:	fa0b f202 	lsl.w	r2, fp, r2
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a20:	d1c8      	bne.n	80009b4 <_pal_lld_setgroupmode+0x24>
        if (bit < 8)
 8000a22:	2c07      	cmp	r4, #7
 8000a24:	d813      	bhi.n	8000a4e <_pal_lld_setgroupmode+0xbe>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000a26:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8000a2a:	ea29 0202 	bic.w	r2, r9, r2
 8000a2e:	4315      	orrs	r5, r2
 8000a30:	6205      	str	r5, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a32:	6802      	ldr	r2, [r0, #0]
 8000a34:	4013      	ands	r3, r2
 8000a36:	433b      	orrs	r3, r7
    if (!mask)
 8000a38:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a3a:	6003      	str	r3, [r0, #0]
    if (!mask)
 8000a3c:	d1c9      	bne.n	80009d2 <_pal_lld_setgroupmode+0x42>
}
 8000a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a44:	ea23 0202 	bic.w	r2, r3, r2
 8000a48:	4315      	orrs	r5, r2
 8000a4a:	6245      	str	r5, [r0, #36]	; 0x24
 8000a4c:	e7bf      	b.n	80009ce <_pal_lld_setgroupmode+0x3e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a4e:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8000a52:	ea29 0202 	bic.w	r2, r9, r2
 8000a56:	4315      	orrs	r5, r2
 8000a58:	6245      	str	r5, [r0, #36]	; 0x24
 8000a5a:	e7ea      	b.n	8000a32 <_pal_lld_setgroupmode+0xa2>
 8000a5c:	0000      	movs	r0, r0
	...

08000a60 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000a60:	2000      	movs	r0, #0
 8000a62:	4770      	bx	lr
	...

08000a70 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <chSchGoSleepS+0x24>)
 8000a72:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000a74:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000a76:	b410      	push	{r4}
  otp->state = newstate;
 8000a78:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 8000a7c:	6810      	ldr	r0, [r2, #0]
 8000a7e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000a80:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000a82:	6043      	str	r3, [r0, #4]
 8000a84:	f882 4020 	strb.w	r4, [r2, #32]
}
 8000a88:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 8000a8a:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	f7ff bc27 	b.w	80002e0 <_port_switch>
 8000a92:	bf00      	nop
 8000a94:	200009ac 	.word	0x200009ac
	...

08000aa0 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000aa2:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000aa4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000aa6:	d048      	beq.n	8000b3a <chSchGoSleepTimeoutS+0x9a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000aa8:	4c3d      	ldr	r4, [pc, #244]	; (8000ba0 <chSchGoSleepTimeoutS+0x100>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8000aaa:	4f3e      	ldr	r7, [pc, #248]	; (8000ba4 <chSchGoSleepTimeoutS+0x104>)
  vtp->par = par;
 8000aac:	69a3      	ldr	r3, [r4, #24]
 8000aae:	9305      	str	r3, [sp, #20]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000ab0:	4626      	mov	r6, r4
 8000ab2:	2902      	cmp	r1, #2
 8000ab4:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 8000ab8:	4605      	mov	r5, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000aba:	483b      	ldr	r0, [pc, #236]	; (8000ba8 <chSchGoSleepTimeoutS+0x108>)
 8000abc:	bf38      	it	cc
 8000abe:	2102      	movcc	r1, #2
 8000ac0:	42b3      	cmp	r3, r6
 8000ac2:	6a42      	ldr	r2, [r0, #36]	; 0x24
  vtp->func = vtfunc;
 8000ac4:	9704      	str	r7, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000ac6:	d059      	beq.n	8000b7c <chSchGoSleepTimeoutS+0xdc>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 8000ac8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000aca:	1bd2      	subs	r2, r2, r7
 8000acc:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000ace:	d32e      	bcc.n	8000b2e <chSchGoSleepTimeoutS+0x8e>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8000ad0:	6898      	ldr	r0, [r3, #8]
      p = p->next;
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
      delta -= p->delta;
 8000ad6:	1a09      	subs	r1, r1, r0
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8000ad8:	4291      	cmp	r1, r2
 8000ada:	d904      	bls.n	8000ae6 <chSchGoSleepTimeoutS+0x46>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000adc:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 8000ade:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	428a      	cmp	r2, r1
 8000ae4:	d3fa      	bcc.n	8000adc <chSchGoSleepTimeoutS+0x3c>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 8000aea:	af01      	add	r7, sp, #4
  vtp->next = p;
 8000aec:	9301      	str	r3, [sp, #4]
  vtp->prev->next = vtp;
 8000aee:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 8000af0:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 8000af2:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	1a51      	subs	r1, r2, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
  p->delta -= delta;
 8000afc:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000afe:	6262      	str	r2, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000b00:	4628      	mov	r0, r5
 8000b02:	f7ff ffb5 	bl	8000a70 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000b06:	9b04      	ldr	r3, [sp, #16]
 8000b08:	b16b      	cbz	r3, 8000b26 <chSchGoSleepTimeoutS+0x86>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8000b0a:	69e3      	ldr	r3, [r4, #28]
 8000b0c:	42bb      	cmp	r3, r7
 8000b0e:	d01b      	beq.n	8000b48 <chSchGoSleepTimeoutS+0xa8>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8000b10:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 8000b14:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 8000b16:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000b18:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 8000b1a:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8000b1c:	d003      	beq.n	8000b26 <chSchGoSleepTimeoutS+0x86>
      vtp->next->delta += vtp->delta;
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	9903      	ldr	r1, [sp, #12]
 8000b22:	440a      	add	r2, r1
 8000b24:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8000b26:	69a3      	ldr	r3, [r4, #24]
}
 8000b28:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b2a:	b007      	add	sp, #28
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	4291      	cmp	r1, r2
 8000b32:	d2d1      	bcs.n	8000ad8 <chSchGoSleepTimeoutS+0x38>
  return systime + (systime_t)interval;
 8000b34:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000b36:	6347      	str	r7, [r0, #52]	; 0x34
 8000b38:	e7ce      	b.n	8000ad8 <chSchGoSleepTimeoutS+0x38>
    chSchGoSleepS(newstate);
 8000b3a:	4c19      	ldr	r4, [pc, #100]	; (8000ba0 <chSchGoSleepTimeoutS+0x100>)
 8000b3c:	f7ff ff98 	bl	8000a70 <chSchGoSleepS>
  return currp->u.rdymsg;
 8000b40:	69a3      	ldr	r3, [r4, #24]
}
 8000b42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000b44:	b007      	add	sp, #28
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8000b48:	9b01      	ldr	r3, [sp, #4]
 8000b4a:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 8000b4c:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000b4e:	42b3      	cmp	r3, r6
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8000b50:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8000b52:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000b54:	d020      	beq.n	8000b98 <chSchGoSleepTimeoutS+0xf8>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	9d03      	ldr	r5, [sp, #12]
  return (systime_t)STM32_ST_TIM->CNT;
 8000b5a:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <chSchGoSleepTimeoutS+0x108>)
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 8000b5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8000b5e:	442a      	add	r2, r5
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8000b64:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8000b66:	4282      	cmp	r2, r0
 8000b68:	d9dd      	bls.n	8000b26 <chSchGoSleepTimeoutS+0x86>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000b6a:	1acb      	subs	r3, r1, r3
 8000b6c:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000b6e:	2b01      	cmp	r3, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000b70:	bf98      	it	ls
 8000b72:	1c82      	addls	r2, r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <chSchGoSleepTimeoutS+0x108>)
  return systime + (systime_t)interval;
 8000b76:	440a      	add	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	e7d4      	b.n	8000b26 <chSchGoSleepTimeoutS+0x86>
 8000b7c:	188b      	adds	r3, r1, r2
      ch.vtlist.next = vtp;
 8000b7e:	af01      	add	r7, sp, #4
      ch.vtlist.lasttime = now;
 8000b80:	62a2      	str	r2, [r4, #40]	; 0x28
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8000b82:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8000b86:	e9c4 7707 	strd	r7, r7, [r4, #28]
      vtp->delta = delay;
 8000b8a:	9103      	str	r1, [sp, #12]
  STM32_ST_TIM->SR     = 0;
 8000b8c:	2200      	movs	r2, #0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000b8e:	6343      	str	r3, [r0, #52]	; 0x34
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000b90:	2302      	movs	r3, #2
  STM32_ST_TIM->SR     = 0;
 8000b92:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000b94:	60c3      	str	r3, [r0, #12]
 8000b96:	e7b3      	b.n	8000b00 <chSchGoSleepTimeoutS+0x60>
  STM32_ST_TIM->DIER = 0U;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <chSchGoSleepTimeoutS+0x108>)
 8000b9a:	60da      	str	r2, [r3, #12]
    return;
 8000b9c:	e7c3      	b.n	8000b26 <chSchGoSleepTimeoutS+0x86>
 8000b9e:	bf00      	nop
 8000ba0:	200009ac 	.word	0x200009ac
 8000ba4:	08000771 	.word	0x08000771
 8000ba8:	40000c00 	.word	0x40000c00
 8000bac:	00000000 	.word	0x00000000

08000bb0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8000bb0:	b161      	cbz	r1, 8000bcc <chThdEnqueueTimeoutS+0x1c>
  queue_insert(currp, tqp);
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000bb4:	b410      	push	{r4}
  queue_insert(currp, tqp);
 8000bb6:	6992      	ldr	r2, [r2, #24]
  tp->queue.prev             = tqp->prev;
 8000bb8:	6844      	ldr	r4, [r0, #4]
 8000bba:	4603      	mov	r3, r0
 8000bbc:	e9c2 3400 	strd	r3, r4, [r2]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000bc0:	2004      	movs	r0, #4
  tp->queue.prev->queue.next = tp;
 8000bc2:	6022      	str	r2, [r4, #0]
}
 8000bc4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 8000bc6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000bc8:	f7ff bf6a 	b.w	8000aa0 <chSchGoSleepTimeoutS>
}
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200009ac 	.word	0x200009ac
	...

08000be0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be2:	4604      	mov	r4, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	4616      	mov	r6, r2
 8000be8:	2320      	movs	r3, #32
 8000bea:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8000bee:	e003      	b.n	8000bf8 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000bf0:	f7ff ffde 	bl	8000bb0 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	db18      	blt.n	8000c2a <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8000bf8:	68a5      	ldr	r5, [r4, #8]
 8000bfa:	4631      	mov	r1, r6
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d0f6      	beq.n	8000bf0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8000c02:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 8000c04:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c06:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 8000c08:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 8000c0a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 8000c0c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8000c0e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8000c10:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8000c14:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8000c16:	bf24      	itt	cs
 8000c18:	68e3      	ldrcs	r3, [r4, #12]
 8000c1a:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8000c1c:	69e3      	ldr	r3, [r4, #28]
 8000c1e:	b103      	cbz	r3, 8000c22 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 8000c20:	4798      	blx	r3
 8000c22:	2000      	movs	r0, #0
 8000c24:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8000c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2a:	f385 8811 	msr	BASEPRI, r5
 8000c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c30 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8000c30:	3030      	adds	r0, #48	; 0x30
 8000c32:	f7ff bfd5 	b.w	8000be0 <oqPutTimeout>
 8000c36:	bf00      	nop
	...

08000c40 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8000c40:	3030      	adds	r0, #48	; 0x30
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	f7ff bfcb 	b.w	8000be0 <oqPutTimeout>
 8000c4a:	bf00      	nop
 8000c4c:	0000      	movs	r0, r0
	...

08000c50 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2320      	movs	r3, #32
 8000c54:	4605      	mov	r5, r0
 8000c56:	460e      	mov	r6, r1
 8000c58:	f383 8811 	msr	BASEPRI, r3
 8000c5c:	e003      	b.n	8000c66 <iqGetTimeout+0x16>
 8000c5e:	f7ff ffa7 	bl	8000bb0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000c62:	2800      	cmp	r0, #0
 8000c64:	db1a      	blt.n	8000c9c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000c66:	68ac      	ldr	r4, [r5, #8]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	4628      	mov	r0, r5
 8000c6c:	2c00      	cmp	r4, #0
 8000c6e:	d0f6      	beq.n	8000c5e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8000c70:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8000c72:	68ab      	ldr	r3, [r5, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000c74:	6928      	ldr	r0, [r5, #16]
  b = *iqp->q_rdptr++;
 8000c76:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000c78:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8000c7a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 8000c7c:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8000c7e:	61aa      	str	r2, [r5, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000c80:	bf28      	it	cs
 8000c82:	68eb      	ldrcs	r3, [r5, #12]
  b = *iqp->q_rdptr++;
 8000c84:	780c      	ldrb	r4, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000c86:	bf28      	it	cs
 8000c88:	61ab      	strcs	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8000c8a:	69eb      	ldr	r3, [r5, #28]
 8000c8c:	b10b      	cbz	r3, 8000c92 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 8000c8e:	4628      	mov	r0, r5
 8000c90:	4798      	blx	r3
 8000c92:	2300      	movs	r3, #0
 8000c94:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000c98:	4620      	mov	r0, r4
}
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	f384 8811 	msr	BASEPRI, r4
 8000ca0:	bd70      	pop	{r4, r5, r6, pc}
 8000ca2:	bf00      	nop
	...

08000cb0 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000cb0:	300c      	adds	r0, #12
 8000cb2:	f7ff bfcd 	b.w	8000c50 <iqGetTimeout>
 8000cb6:	bf00      	nop
	...

08000cc0 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000cc0:	300c      	adds	r0, #12
 8000cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc6:	f7ff bfc3 	b.w	8000c50 <iqGetTimeout>
 8000cca:	bf00      	nop
 8000ccc:	0000      	movs	r0, r0
	...

08000cd0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8000cd0:	b508      	push	{r3, lr}
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f7ff fee0 	bl	8000aa0 <chSchGoSleepTimeoutS>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f383 8811 	msr	BASEPRI, r3
}
 8000ce6:	bd08      	pop	{r3, pc}
	...

08000cf0 <spiExchange.constprop.0>:
 * @param[in] txbuf     the pointer to the transmit buffer
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	4606      	mov	r6, r0
 8000cf4:	2320      	movs	r3, #32
 8000cf6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <spiExchange.constprop.0+0x58>)
  return ch.rlist.current;
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <spiExchange.constprop.0+0x5c>)
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000cfe:	6a1d      	ldr	r5, [r3, #32]
 8000d00:	6987      	ldr	r7, [r0, #24]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d02:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000d04:	2003      	movs	r0, #3
 8000d06:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000d08:	682d      	ldr	r5, [r5, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d0a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8000d0c:	60ea      	str	r2, [r5, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d0e:	e9d3 c20a 	ldrd	ip, r2, [r3, #40]	; 0x28
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8000d12:	f44c 6c80 	orr.w	ip, ip, #1024	; 0x400
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8000d1a:	606e      	str	r6, [r5, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8000d1c:	f8c5 c000 	str.w	ip, [r5]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8000d20:	60e1      	str	r1, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8000d22:	6066      	str	r6, [r4, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8000d24:	6022      	str	r2, [r4, #0]

  dmaStreamEnable(spip->dmarx);
 8000d26:	682a      	ldr	r2, [r5, #0]
 8000d28:	f042 0201 	orr.w	r2, r2, #1
 8000d2c:	602a      	str	r2, [r5, #0]
  dmaStreamEnable(spip->dmatx);
 8000d2e:	6822      	ldr	r2, [r4, #0]
 8000d30:	f042 0201 	orr.w	r2, r2, #1
 8000d34:	6022      	str	r2, [r4, #0]
  *trp = tp;
 8000d36:	f843 7f08 	str.w	r7, [r3, #8]!
  tp->u.wttrp = trp;
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000d3c:	f7ff fe98 	bl	8000a70 <chSchGoSleepS>
 8000d40:	2300      	movs	r3, #0
 8000d42:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8000d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d48:	2000087c 	.word	0x2000087c
 8000d4c:	200009ac 	.word	0x200009ac

08000d50 <nm_bus_ioctl.constprop.0>:
*	@param[IN]	pvParameter
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	2320      	movs	r3, #32
	sint8 s8Ret = 0;
	switch(u8Cmd)
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8000d54:	e9d0 1500 	ldrd	r1, r5, [r0]
 8000d58:	8906      	ldrh	r6, [r0, #8]
 8000d5a:	f383 8811 	msr	BASEPRI, r3
  spiSelectI(spip);
 8000d5e:	4c17      	ldr	r4, [pc, #92]	; (8000dbc <nm_bus_ioctl.constprop.0+0x6c>)
 8000d60:	6862      	ldr	r2, [r4, #4]
 8000d62:	e9d2 2002 	ldrd	r2, r0, [r2, #8]
 8000d66:	2301      	movs	r3, #1
 8000d68:	4083      	lsls	r3, r0
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	8353      	strh	r3, [r2, #26]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f383 8811 	msr	BASEPRI, r3
	if (pu8Mosi == NULL)
 8000d74:	b1e1      	cbz	r1, 8000db0 <nm_bus_ioctl.constprop.0+0x60>
	else if(pu8Miso == NULL)
 8000d76:	b18d      	cbz	r5, 8000d9c <nm_bus_ioctl.constprop.0+0x4c>
	  spiExchange(&SPID2,u16Sz,pu8Mosi,pu8Miso);
 8000d78:	462a      	mov	r2, r5
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f7ff ffb8 	bl	8000cf0 <spiExchange.constprop.0>
 8000d80:	2320      	movs	r3, #32
 8000d82:	f383 8811 	msr	BASEPRI, r3
  spiUnselectI(spip);
 8000d86:	6862      	ldr	r2, [r4, #4]
 8000d88:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	408b      	lsls	r3, r1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	8313      	strh	r3, [r2, #24]
 8000d94:	2000      	movs	r0, #0
 8000d96:	f380 8811 	msr	BASEPRI, r0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
 8000d9a:	bd70      	pop	{r4, r5, r6, pc}
	  spiExchange(&SPID2,u16Sz,pu8Mosi,spiDummyBuf);
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <nm_bus_ioctl.constprop.0+0x70>)
 8000da0:	f7ff ffa6 	bl	8000cf0 <spiExchange.constprop.0>
		memset(spiDummyBuf,0, u16Sz);
 8000da4:	4632      	mov	r2, r6
 8000da6:	4629      	mov	r1, r5
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <nm_bus_ioctl.constprop.0+0x70>)
 8000daa:	f002 fe63 	bl	8003a74 <memset>
 8000dae:	e7e7      	b.n	8000d80 <nm_bus_ioctl.constprop.0+0x30>
	  spiExchange(&SPID2,u16Sz,spiDummyBuf,pu8Miso);
 8000db0:	4903      	ldr	r1, [pc, #12]	; (8000dc0 <nm_bus_ioctl.constprop.0+0x70>)
 8000db2:	462a      	mov	r2, r5
 8000db4:	4630      	mov	r0, r6
 8000db6:	f7ff ff9b 	bl	8000cf0 <spiExchange.constprop.0>
 8000dba:	e7e1      	b.n	8000d80 <nm_bus_ioctl.constprop.0+0x30>
 8000dbc:	2000087c 	.word	0x2000087c
 8000dc0:	20000c24 	.word	0x20000c24
	...

08000dd0 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
 8000dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dd4:	b089      	sub	sp, #36	; 0x24
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
 8000dd6:	f04f 0800 	mov.w	r8, #0
{
 8000dda:	4682      	mov	sl, r0
 8000ddc:	460f      	mov	r7, r1
 8000dde:	9201      	str	r2, [sp, #4]
	spi.pu8InBuf = NULL;
 8000de0:	4646      	mov	r6, r8
 8000de2:	f10d 050f 	add.w	r5, sp, #15
	do {
		if (sz <= DATA_PKT_SZ)
 8000de6:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8000dea:	46b9      	mov	r9, r7
			nbytes = DATA_PKT_SZ;

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
 8000dec:	f04f 0b0a 	mov.w	fp, #10
 8000df0:	bf28      	it	cs
 8000df2:	f44f 5900 	movcs.w	r9, #8192	; 0x2000
	spi.u16Sz = sz;
 8000df6:	2401      	movs	r4, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000df8:	a805      	add	r0, sp, #20
	spi.pu8OutBuf = b;
 8000dfa:	e9cd 6505 	strd	r6, r5, [sp, #20]
	spi.u16Sz = sz;
 8000dfe:	f8ad 401c 	strh.w	r4, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000e02:	f7ff ffa5 	bl	8000d50 <nm_bus_ioctl.constprop.0>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);
 8000e06:	f10b 3cff 	add.w	ip, fp, #4294967295
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	b948      	cbnz	r0, 8000e22 <spi_data_read+0x52>
			if (((rsp >> 4) & 0xf) == 0xf)
 8000e0e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8000e12:	0912      	lsrs	r2, r2, #4
 8000e14:	2a0f      	cmp	r2, #15
 8000e16:	d008      	beq.n	8000e2a <spi_data_read+0x5a>
 8000e18:	fa0f fb8c 	sxth.w	fp, ip
		} while (retry--);
 8000e1c:	f1bb 3fff 	cmp.w	fp, #4294967295
 8000e20:	d1ea      	bne.n	8000df8 <spi_data_read+0x28>
		retry = SPI_RESP_RETRY_COUNT;
 8000e22:	2000      	movs	r0, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
 8000e24:	b009      	add	sp, #36	; 0x24
 8000e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
 8000e2a:	f1bb 0f00 	cmp.w	fp, #0
 8000e2e:	d0f8      	beq.n	8000e22 <spi_data_read+0x52>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8000e30:	eb0a 0208 	add.w	r2, sl, r8
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000e34:	a805      	add	r0, sp, #20
	spi.pu8InBuf = NULL;
 8000e36:	9305      	str	r3, [sp, #20]
	spi.u16Sz = sz;
 8000e38:	f8ad 901c 	strh.w	r9, [sp, #28]
	spi.pu8OutBuf = b;
 8000e3c:	9206      	str	r2, [sp, #24]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000e3e:	f7ff ff87 	bl	8000d50 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 8000e42:	2800      	cmp	r0, #0
 8000e44:	d1ed      	bne.n	8000e22 <spi_data_read+0x52>
			if (!gu8Crc_off) {
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <spi_data_read+0xb0>)
 8000e48:	9a01      	ldr	r2, [sp, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	d00b      	beq.n	8000e68 <spi_data_read+0x98>
		sz -= nbytes;
 8000e50:	eba7 0709 	sub.w	r7, r7, r9
		ix += nbytes;
 8000e54:	44c8      	add	r8, r9
		sz -= nbytes;
 8000e56:	b2bf      	uxth	r7, r7
		ix += nbytes;
 8000e58:	fa0f f888 	sxth.w	r8, r8
	} while (sz);
 8000e5c:	2f00      	cmp	r7, #0
 8000e5e:	d1c2      	bne.n	8000de6 <spi_data_read+0x16>
 8000e60:	2001      	movs	r0, #1
}
 8000e62:	b009      	add	sp, #36	; 0x24
 8000e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi.pu8OutBuf = b;
 8000e68:	aa04      	add	r2, sp, #16
	spi.pu8InBuf = NULL;
 8000e6a:	9305      	str	r3, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000e6c:	a805      	add	r0, sp, #20
	spi.u16Sz = sz;
 8000e6e:	2302      	movs	r3, #2
	spi.pu8OutBuf = b;
 8000e70:	9206      	str	r2, [sp, #24]
	spi.u16Sz = sz;
 8000e72:	f8ad 301c 	strh.w	r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000e76:	f7ff ff6b 	bl	8000d50 <nm_bus_ioctl.constprop.0>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d0e8      	beq.n	8000e50 <spi_data_read+0x80>
 8000e7e:	e7d0      	b.n	8000e22 <spi_data_read+0x52>
 8000e80:	20000c21 	.word	0x20000c21
	...

08000e90 <spi_cmd_rsp>:
{
 8000e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((cmd == CMD_RESET) ||
 8000e94:	28cf      	cmp	r0, #207	; 0xcf
{
 8000e96:	b085      	sub	sp, #20
 8000e98:	4607      	mov	r7, r0
	if ((cmd == CMD_RESET) ||
 8000e9a:	d033      	beq.n	8000f04 <spi_cmd_rsp+0x74>
 8000e9c:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d92e      	bls.n	8000f04 <spi_cmd_rsp+0x74>
 8000ea6:	f10d 0503 	add.w	r5, sp, #3
 8000eaa:	ae01      	add	r6, sp, #4
{
 8000eac:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
 8000eae:	f04f 0900 	mov.w	r9, #0
	spi.u16Sz = sz;
 8000eb2:	f04f 0801 	mov.w	r8, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000eb6:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8000eb8:	e9cd 9501 	strd	r9, r5, [sp, #4]
	spi.u16Sz = sz;
 8000ebc:	f8ad 800c 	strh.w	r8, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000ec0:	f7ff ff46 	bl	8000d50 <nm_bus_ioctl.constprop.0>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8000ec4:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8000ec6:	bb58      	cbnz	r0, 8000f20 <spi_cmd_rsp+0x90>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
 8000ec8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000ecc:	42ba      	cmp	r2, r7
 8000ece:	d002      	beq.n	8000ed6 <spi_cmd_rsp+0x46>
 8000ed0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000ed4:	d1ef      	bne.n	8000eb6 <spi_cmd_rsp+0x26>
 8000ed6:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
 8000ed8:	f04f 0800 	mov.w	r8, #0
	spi.u16Sz = sz;
 8000edc:	2701      	movs	r7, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000ede:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8000ee0:	e9cd 8501 	strd	r8, r5, [sp, #4]
	spi.u16Sz = sz;
 8000ee4:	f8ad 700c 	strh.w	r7, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000ee8:	f7ff ff32 	bl	8000d50 <nm_bus_ioctl.constprop.0>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8000eec:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8000eee:	b9b8      	cbnz	r0, 8000f20 <spi_cmd_rsp+0x90>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
 8000ef0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000ef4:	b112      	cbz	r2, 8000efc <spi_cmd_rsp+0x6c>
 8000ef6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8000efa:	d1f0      	bne.n	8000ede <spi_cmd_rsp+0x4e>
	sint8 result = N_OK;
 8000efc:	2001      	movs	r0, #1
}
 8000efe:	b005      	add	sp, #20
 8000f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f04:	ae01      	add	r6, sp, #4
	spi.pu8InBuf = NULL;
 8000f06:	2200      	movs	r2, #0
	spi.pu8OutBuf = b;
 8000f08:	f10d 0503 	add.w	r5, sp, #3
	spi.u16Sz = sz;
 8000f0c:	2301      	movs	r3, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f0e:	4630      	mov	r0, r6
	spi.pu8OutBuf = b;
 8000f10:	e9cd 2501 	strd	r2, r5, [sp, #4]
	spi.u16Sz = sz;
 8000f14:	f8ad 300c 	strh.w	r3, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f18:	f7ff ff1a 	bl	8000d50 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0c5      	beq.n	8000eac <spi_cmd_rsp+0x1c>
			result = N_FAIL;
 8000f20:	2000      	movs	r0, #0
}
 8000f22:	b005      	add	sp, #20
 8000f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08000f30 <spi_cmd>:
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b087      	sub	sp, #28
 8000f34:	f1a0 04c3 	sub.w	r4, r0, #195	; 0xc3
 8000f38:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	bc[0] = cmd;
 8000f3c:	f88d 0000 	strb.w	r0, [sp]
	switch (cmd) {
 8000f40:	2c0c      	cmp	r4, #12
 8000f42:	d834      	bhi.n	8000fae <spi_cmd+0x7e>
 8000f44:	e8df f004 	tbb	[pc, r4]
 8000f48:	07074d76 	.word	0x07074d76
 8000f4c:	655b3636 	.word	0x655b3636
 8000f50:	33333333 	.word	0x33333333
 8000f54:	6d          	.byte	0x6d
 8000f55:	00          	.byte	0x00
		bc[1] = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = 0x00;
 8000f5c:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 5;
 8000f60:	2605      	movs	r6, #5
		if (!gu8Crc_off)
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <spi_cmd+0x130>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d137      	bne.n	8000fda <spi_cmd+0xaa>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8000f6a:	f1ad 0302 	sub.w	r3, sp, #2
 8000f6e:	466d      	mov	r5, sp
 8000f70:	1999      	adds	r1, r3, r6
 8000f72:	4c3c      	ldr	r4, [pc, #240]	; (8001064 <spi_cmd+0x134>)
 8000f74:	462a      	mov	r2, r5
 8000f76:	1e77      	subs	r7, r6, #1
 8000f78:	237f      	movs	r3, #127	; 0x7f
 8000f7a:	e001      	b.n	8000f80 <spi_cmd+0x50>
 8000f7c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	return crc7_syndrome_table[(crc << 1) ^ data];
 8000f80:	ea80 0343 	eor.w	r3, r0, r3, lsl #1
	while (len--)
 8000f84:	4291      	cmp	r1, r2
	return crc7_syndrome_table[(crc << 1) ^ data];
 8000f86:	5ce3      	ldrb	r3, [r4, r3]
	while (len--)
 8000f88:	d1f8      	bne.n	8000f7c <spi_cmd+0x4c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 8000f8a:	aa06      	add	r2, sp, #24
 8000f8c:	443a      	add	r2, r7
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	f802 3c18 	strb.w	r3, [r2, #-24]
	spi.pu8OutBuf = NULL;
 8000f94:	2300      	movs	r3, #0
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000f96:	a803      	add	r0, sp, #12
	spi.pu8InBuf = b;
 8000f98:	9503      	str	r5, [sp, #12]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
 8000f9a:	f8ad 6014 	strh.w	r6, [sp, #20]
	spi.pu8OutBuf = NULL;
 8000f9e:	9304      	str	r3, [sp, #16]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8000fa0:	f7ff fed6 	bl	8000d50 <nm_bus_ioctl.constprop.0>
		result = N_FAIL;
 8000fa4:	fab0 f080 	clz	r0, r0
 8000fa8:	0940      	lsrs	r0, r0, #5
}
 8000faa:	b007      	add	sp, #28
 8000fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bc[0] = cmd;
 8000fae:	2000      	movs	r0, #0
}
 8000fb0:	b007      	add	sp, #28
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bc[5] = (uint8)(sz >> 8);
 8000fb4:	0a1d      	lsrs	r5, r3, #8
		bc[6] = (uint8)(sz);
 8000fb6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (!gu8Crc_off)
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <spi_cmd+0x130>)
		bc[5] = (uint8)(sz >> 8);
 8000fbc:	f88d 5005 	strb.w	r5, [sp, #5]
		if (!gu8Crc_off)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
		bc[1] = (uint8)(adr >> 16);
 8000fc2:	0c0c      	lsrs	r4, r1, #16
		bc[4] = (uint8)(sz >> 16);
 8000fc4:	2200      	movs	r2, #0
		bc[2] = (uint8)(adr >> 8);
 8000fc6:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
 8000fc8:	f88d 4001 	strb.w	r4, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 8000fcc:	f8ad 1002 	strh.w	r1, [sp, #2]
		bc[4] = (uint8)(sz >> 16);
 8000fd0:	f88d 2004 	strb.w	r2, [sp, #4]
		len = 8;
 8000fd4:	2608      	movs	r6, #8
		if (!gu8Crc_off)
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0c7      	beq.n	8000f6a <spi_cmd+0x3a>
			len-=1;
 8000fda:	3e01      	subs	r6, #1
 8000fdc:	b2f6      	uxtb	r6, r6
 8000fde:	466d      	mov	r5, sp
 8000fe0:	e7d8      	b.n	8000f94 <spi_cmd+0x64>
		bc[1] = (uint8)(adr >> 8);
 8000fe2:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
 8000fe6:	b10d      	cbz	r5, 8000fec <spi_cmd+0xbc>
 8000fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fec:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = 0x00;
 8000ff0:	2300      	movs	r3, #0
		bc[2] = (uint8)adr;
 8000ff2:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[3] = 0x00;
 8000ff6:	f88d 3003 	strb.w	r3, [sp, #3]
		len = 5;
 8000ffa:	2605      	movs	r6, #5
 8000ffc:	e7b1      	b.n	8000f62 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 16);
 8000ffe:	ba12      	rev	r2, r2
 8001000:	0c0c      	lsrs	r4, r1, #16
		bc[2] = (uint8)(adr >> 8);
 8001002:	ba4b      	rev16	r3, r1
		bc[4] = (uint8)(u32data >> 24);
 8001004:	9201      	str	r2, [sp, #4]
		bc[1] = (uint8)(adr >> 16);
 8001006:	f88d 4001 	strb.w	r4, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 800100a:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 9;
 800100e:	2609      	movs	r6, #9
 8001010:	e7a7      	b.n	8000f62 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 16);
 8001012:	0c0b      	lsrs	r3, r1, #16
		bc[2] = (uint8)(adr >> 8);
 8001014:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
 8001016:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
 800101a:	f8ad 1002 	strh.w	r1, [sp, #2]
		len = 5;
 800101e:	2605      	movs	r6, #5
 8001020:	e79f      	b.n	8000f62 <spi_cmd+0x32>
		bc[1] = 0xff;
 8001022:	22ff      	movs	r2, #255	; 0xff
		bc[2] = 0xff;
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
		bc[1] = 0xff;
 8001028:	f88d 2001 	strb.w	r2, [sp, #1]
		bc[2] = 0xff;
 800102c:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 5;
 8001030:	2605      	movs	r6, #5
 8001032:	e796      	b.n	8000f62 <spi_cmd+0x32>
		bc[1] = (uint8)(adr >> 8);
 8001034:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
 8001038:	b10d      	cbz	r5, 800103e <spi_cmd+0x10e>
 800103a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103e:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = (uint8)(u32data >> 24);
 8001042:	0e15      	lsrs	r5, r2, #24
		bc[4] = (uint8)(u32data >> 16);
 8001044:	0c14      	lsrs	r4, r2, #16
		bc[5] = (uint8)(u32data >> 8);
 8001046:	0a13      	lsrs	r3, r2, #8
		bc[2] = (uint8)(adr);
 8001048:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[6] = (uint8)(u32data);
 800104c:	f88d 2006 	strb.w	r2, [sp, #6]
		bc[3] = (uint8)(u32data >> 24);
 8001050:	f88d 5003 	strb.w	r5, [sp, #3]
		bc[4] = (uint8)(u32data >> 16);
 8001054:	f88d 4004 	strb.w	r4, [sp, #4]
		bc[5] = (uint8)(u32data >> 8);
 8001058:	f88d 3005 	strb.w	r3, [sp, #5]
		len = 8;
 800105c:	2608      	movs	r6, #8
 800105e:	e780      	b.n	8000f62 <spi_cmd+0x32>
 8001060:	20000c21 	.word	0x20000c21
 8001064:	08003ddc 	.word	0x08003ddc
	...

08001070 <nm_spi_read>:

	return result;
}

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
 8001070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8 cmd = CMD_DMA_EXT_READ;
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
 8001074:	f04f 0900 	mov.w	r9, #0
{
 8001078:	b084      	sub	sp, #16
 800107a:	4680      	mov	r8, r0
 800107c:	468a      	mov	sl, r1
 800107e:	4616      	mov	r6, r2
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
		single_byte_workaround = 1;
	}
	result = spi_cmd(cmd, addr, 0, size,0);
 8001080:	464f      	mov	r7, r9
{
 8001082:	250a      	movs	r5, #10
 8001084:	e013      	b.n	80010ae <nm_spi_read+0x3e>
  chThdSleepMilliseconds(u32TimeMsec);
 8001086:	200a      	movs	r0, #10
 8001088:	f7ff fe22 	bl	8000cd0 <chThdSleep>

_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800108c:	2300      	movs	r3, #0
 800108e:	461a      	mov	r2, r3
 8001090:	4619      	mov	r1, r3
 8001092:	9700      	str	r7, [sp, #0]
 8001094:	20cf      	movs	r0, #207	; 0xcf
 8001096:	f7ff ff4b 	bl	8000f30 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 800109a:	20cf      	movs	r0, #207	; 0xcf
 800109c:	f7ff fef8 	bl	8000e90 <spi_cmd_rsp>
 80010a0:	3d01      	subs	r5, #1
 80010a2:	200a      	movs	r0, #10
 80010a4:	f7ff fe14 	bl	8000cd0 <chThdSleep>
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
		nm_bsp_sleep(1);
		retry--;
		if(retry) goto _RETRY_;
 80010a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80010ac:	d026      	beq.n	80010fc <nm_spi_read+0x8c>
	if (size == 1)
 80010ae:	2e01      	cmp	r6, #1
 80010b0:	bf0c      	ite	eq
 80010b2:	2302      	moveq	r3, #2
 80010b4:	4633      	movne	r3, r6
	result = spi_cmd(cmd, addr, 0, size,0);
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 00c8 	mov.w	r0, #200	; 0xc8
 80010be:	9700      	str	r7, [sp, #0]
 80010c0:	4641      	mov	r1, r8
		single_byte_workaround = 1;
 80010c2:	bf04      	itt	eq
 80010c4:	46b1      	moveq	r9, r6
		size = 2;
 80010c6:	461e      	moveq	r6, r3
	result = spi_cmd(cmd, addr, 0, size,0);
 80010c8:	f7ff ff32 	bl	8000f30 <spi_cmd>
	if (result != N_OK) {
 80010cc:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, size,0);
 80010ce:	4604      	mov	r4, r0
	if (result != N_OK) {
 80010d0:	d1d9      	bne.n	8001086 <nm_spi_read+0x16>
	result = spi_cmd_rsp(cmd);
 80010d2:	20c8      	movs	r0, #200	; 0xc8
 80010d4:	f7ff fedc 	bl	8000e90 <spi_cmd_rsp>
	if (result != N_OK) {
 80010d8:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 80010da:	4604      	mov	r4, r0
	if (result != N_OK) {
 80010dc:	d1d3      	bne.n	8001086 <nm_spi_read+0x16>
		result = spi_data_read(tmp, size,0);
 80010de:	2200      	movs	r2, #0
 80010e0:	4631      	mov	r1, r6
 80010e2:	a803      	add	r0, sp, #12
	if (single_byte_workaround)
 80010e4:	f1b9 0f00 	cmp.w	r9, #0
 80010e8:	d00c      	beq.n	8001104 <nm_spi_read+0x94>
		result = spi_data_read(tmp, size,0);
 80010ea:	f7ff fe71 	bl	8000dd0 <spi_data_read>
		buf[0] = tmp[0];
 80010ee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80010f2:	f88a 3000 	strb.w	r3, [sl]
		result = spi_data_read(tmp, size,0);
 80010f6:	4604      	mov	r4, r0
	if(result != N_OK)
 80010f8:	2c01      	cmp	r4, #1
 80010fa:	d1c4      	bne.n	8001086 <nm_spi_read+0x16>
	}

	return result;
}
 80010fc:	4620      	mov	r0, r4
 80010fe:	b004      	add	sp, #16
 8001100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		result = spi_data_read(buf, size,0);
 8001104:	464a      	mov	r2, r9
 8001106:	4650      	mov	r0, sl
 8001108:	f7ff fe62 	bl	8000dd0 <spi_data_read>
 800110c:	4604      	mov	r4, r0
 800110e:	e7f3      	b.n	80010f8 <nm_spi_read+0x88>

08001110 <nm_read_block>:
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8001110:	2af8      	cmp	r2, #248	; 0xf8
{
 8001112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001116:	4616      	mov	r6, r2
 8001118:	4605      	mov	r5, r0
 800111a:	4688      	mov	r8, r1
		if(u32Sz <= u16MaxTrxSz)
 800111c:	4614      	mov	r4, r2
 800111e:	bf88      	it	hi
 8001120:	188f      	addhi	r7, r1, r2
 8001122:	d90e      	bls.n	8001142 <nm_read_block+0x32>
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 8001124:	1b39      	subs	r1, r7, r4
 8001126:	4628      	mov	r0, r5
 8001128:	22f8      	movs	r2, #248	; 0xf8
 800112a:	f7ff ffa1 	bl	8001070 <nm_spi_read>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
 800112e:	3cf8      	subs	r4, #248	; 0xf8

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8001130:	2801      	cmp	r0, #1
 8001132:	eba6 0304 	sub.w	r3, r6, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
 8001136:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
 800113a:	d10d      	bne.n	8001158 <nm_read_block+0x48>
		if(u32Sz <= u16MaxTrxSz)
 800113c:	2cf8      	cmp	r4, #248	; 0xf8
 800113e:	d8f1      	bhi.n	8001124 <nm_read_block+0x14>
 8001140:	4498      	add	r8, r3
	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
 8001142:	b2a2      	uxth	r2, r4
 8001144:	4641      	mov	r1, r8
 8001146:	4628      	mov	r0, r5
 8001148:	f7ff ff92 	bl	8001070 <nm_spi_read>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800114c:	2801      	cmp	r0, #1
 800114e:	bf08      	it	eq
 8001150:	2000      	moveq	r0, #0
 8001152:	d101      	bne.n	8001158 <nm_read_block+0x48>
		}
	}

	return s8Ret;
}
 8001154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 8001158:	f06f 0005 	mvn.w	r0, #5
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001160 <spi_read_reg>:
{
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	28ff      	cmp	r0, #255	; 0xff
 8001166:	b084      	sub	sp, #16
 8001168:	4605      	mov	r5, r0
 800116a:	4689      	mov	r9, r1
 800116c:	bf95      	itete	ls
 800116e:	26c4      	movls	r6, #196	; 0xc4
 8001170:	26ca      	movhi	r6, #202	; 0xca
 8001172:	2701      	movls	r7, #1
 8001174:	2700      	movhi	r7, #0
 8001176:	f04f 0a0a 	mov.w	sl, #10
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 800117a:	f04f 0800 	mov.w	r8, #0
 800117e:	e015      	b.n	80011ac <spi_read_reg+0x4c>
 8001180:	200a      	movs	r0, #10
 8001182:	f7ff fda5 	bl	8000cd0 <chThdSleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 8001186:	2300      	movs	r3, #0
 8001188:	461a      	mov	r2, r3
 800118a:	4619      	mov	r1, r3
 800118c:	f8cd 8000 	str.w	r8, [sp]
 8001190:	20cf      	movs	r0, #207	; 0xcf
 8001192:	f7ff fecd 	bl	8000f30 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8001196:	20cf      	movs	r0, #207	; 0xcf
 8001198:	f7ff fe7a 	bl	8000e90 <spi_cmd_rsp>
 800119c:	200a      	movs	r0, #10
 800119e:	f7ff fd97 	bl	8000cd0 <chThdSleep>
		if(retry) goto _RETRY_;
 80011a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80011a6:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
 80011aa:	d01a      	beq.n	80011e2 <spi_read_reg+0x82>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 80011ac:	9700      	str	r7, [sp, #0]
 80011ae:	2304      	movs	r3, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	4629      	mov	r1, r5
 80011b4:	4630      	mov	r0, r6
 80011b6:	f7ff febb 	bl	8000f30 <spi_cmd>
	if (result != N_OK) {
 80011ba:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, 4, clockless);
 80011bc:	4604      	mov	r4, r0
	if (result != N_OK) {
 80011be:	d1df      	bne.n	8001180 <spi_read_reg+0x20>
	result = spi_cmd_rsp(cmd);
 80011c0:	4630      	mov	r0, r6
 80011c2:	f7ff fe65 	bl	8000e90 <spi_cmd_rsp>
	if (result != N_OK) {
 80011c6:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 80011c8:	4604      	mov	r4, r0
	if (result != N_OK) {
 80011ca:	d1d9      	bne.n	8001180 <spi_read_reg+0x20>
	result = spi_data_read(&tmp[0], 4, clockless);
 80011cc:	463a      	mov	r2, r7
 80011ce:	2104      	movs	r1, #4
 80011d0:	a803      	add	r0, sp, #12
 80011d2:	f7ff fdfd 	bl	8000dd0 <spi_data_read>
	if (result != N_OK) {
 80011d6:	2801      	cmp	r0, #1
	result = spi_data_read(&tmp[0], 4, clockless);
 80011d8:	4604      	mov	r4, r0
	if (result != N_OK) {
 80011da:	d1d1      	bne.n	8001180 <spi_read_reg+0x20>
	*u32data = tmp[0] |
 80011dc:	9b03      	ldr	r3, [sp, #12]
 80011de:	f8c9 3000 	str.w	r3, [r9]
}
 80011e2:	4620      	mov	r0, r4
 80011e4:	b004      	add	sp, #16
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ea:	bf00      	nop
 80011ec:	0000      	movs	r0, r0
	...

080011f0 <nm_spi_read_reg_with_ret>:
{
 80011f0:	b508      	push	{r3, lr}
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
 80011f2:	f7ff ffb5 	bl	8001160 <spi_read_reg>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80011f6:	2801      	cmp	r0, #1
}
 80011f8:	bf14      	ite	ne
 80011fa:	f06f 0005 	mvnne.w	r0, #5
 80011fe:	2000      	moveq	r0, #0
 8001200:	bd08      	pop	{r3, pc}
 8001202:	bf00      	nop
	...

08001210 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
 8001210:	b530      	push	{r4, r5, lr}
	static uint32 chipid = 0;

	if (chipid == 0) {
 8001212:	4d1f      	ldr	r5, [pc, #124]	; (8001290 <nmi_get_chipid+0x80>)
 8001214:	682c      	ldr	r4, [r5, #0]
{
 8001216:	b083      	sub	sp, #12
	if (chipid == 0) {
 8001218:	b114      	cbz	r4, 8001220 <nmi_get_chipid+0x10>
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
}
 800121a:	4620      	mov	r0, r4
 800121c:	b003      	add	sp, #12
 800121e:	bd30      	pop	{r4, r5, pc}
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8001220:	4629      	mov	r1, r5
 8001222:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001226:	f7ff ffe3 	bl	80011f0 <nm_spi_read_reg_with_ret>
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 800122a:	b110      	cbz	r0, 8001232 <nmi_get_chipid+0x22>
			chipid = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	602b      	str	r3, [r5, #0]
			return 0;
 8001230:	e7f3      	b.n	800121a <nmi_get_chipid+0xa>
 8001232:	a901      	add	r1, sp, #4
 8001234:	f241 30f4 	movw	r0, #5108	; 0x13f4
 8001238:	f7ff ffda 	bl	80011f0 <nm_spi_read_reg_with_ret>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 800123c:	2800      	cmp	r0, #0
 800123e:	d1f5      	bne.n	800122c <nmi_get_chipid+0x1c>
		if (chipid == 0x1002a0)  {
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <nmi_get_chipid+0x84>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d015      	beq.n	8001274 <nmi_get_chipid+0x64>
		} else if(chipid == 0x1002b0) {
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <nmi_get_chipid+0x88>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d009      	beq.n	8001262 <nmi_get_chipid+0x52>
		}else if(chipid == 0x1000F0) {
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <nmi_get_chipid+0x8c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d015      	beq.n	8001280 <nmi_get_chipid+0x70>
		chipid &= ~(0x0f0000);
 8001254:	682c      	ldr	r4, [r5, #0]
 8001256:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
		chipid |= 0x050000;
 800125a:	f444 24a0 	orr.w	r4, r4, #327680	; 0x50000
 800125e:	602c      	str	r4, [r5, #0]
	return chipid;
 8001260:	e7db      	b.n	800121a <nmi_get_chipid+0xa>
			if(rfrevid == 3) { /* 1002B0 */
 8001262:	9b01      	ldr	r3, [sp, #4]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d0f5      	beq.n	8001254 <nmi_get_chipid+0x44>
			} else if(rfrevid == 4) { /* 1002B1 */
 8001268:	2b04      	cmp	r3, #4
				chipid = 0x1002b1;
 800126a:	bf0c      	ite	eq
 800126c:	4b0c      	ldreq	r3, [pc, #48]	; (80012a0 <nmi_get_chipid+0x90>)
				chipid = 0x1002b2;
 800126e:	4b0d      	ldrne	r3, [pc, #52]	; (80012a4 <nmi_get_chipid+0x94>)
 8001270:	602b      	str	r3, [r5, #0]
 8001272:	e7ef      	b.n	8001254 <nmi_get_chipid+0x44>
			if (rfrevid == 0x1) { /* 1002A0 */
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d0ec      	beq.n	8001254 <nmi_get_chipid+0x44>
				chipid = 0x1002a1;
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <nmi_get_chipid+0x98>)
 800127c:	602b      	str	r3, [r5, #0]
 800127e:	e7e9      	b.n	8001254 <nmi_get_chipid+0x44>
 8001280:	4629      	mov	r1, r5
 8001282:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 8001286:	f7ff ffb3 	bl	80011f0 <nm_spi_read_reg_with_ret>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
 800128a:	2800      	cmp	r0, #0
 800128c:	d0e2      	beq.n	8001254 <nmi_get_chipid+0x44>
 800128e:	e7cd      	b.n	800122c <nmi_get_chipid+0x1c>
 8001290:	20000b50 	.word	0x20000b50
 8001294:	001002a0 	.word	0x001002a0
 8001298:	001002b0 	.word	0x001002b0
 800129c:	001000f0 	.word	0x001000f0
 80012a0:	001002b1 	.word	0x001002b1
 80012a4:	001002b2 	.word	0x001002b2
 80012a8:	001002a1 	.word	0x001002a1
 80012ac:	00000000 	.word	0x00000000

080012b0 <nm_spi_write>:
{
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b4:	b08b      	sub	sp, #44	; 0x2c
		if (!gu8Crc_off) {
 80012b6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80013f4 <nm_spi_write+0x144>
{
 80012ba:	9102      	str	r1, [sp, #8]
 80012bc:	4683      	mov	fp, r0
 80012be:	4690      	mov	r8, r2
 80012c0:	270a      	movs	r7, #10
 80012c2:	e013      	b.n	80012ec <nm_spi_write+0x3c>
 80012c4:	200a      	movs	r0, #10
 80012c6:	f7ff fd03 	bl	8000cd0 <chThdSleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	4619      	mov	r1, r3
 80012d2:	20cf      	movs	r0, #207	; 0xcf
 80012d4:	f7ff fe2c 	bl	8000f30 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 80012d8:	20cf      	movs	r0, #207	; 0xcf
 80012da:	f7ff fdd9 	bl	8000e90 <spi_cmd_rsp>
 80012de:	3f01      	subs	r7, #1
 80012e0:	200a      	movs	r0, #10
 80012e2:	f7ff fcf5 	bl	8000cd0 <chThdSleep>
		if(retry) goto _RETRY_;
 80012e6:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80012ea:	d07c      	beq.n	80013e6 <nm_spi_write+0x136>
	if (size == 1)
 80012ec:	f1b8 0f01 	cmp.w	r8, #1
 80012f0:	bf08      	it	eq
 80012f2:	f04f 0802 	moveq.w	r8, #2
	result = spi_cmd(cmd, addr, 0, size,0);
 80012f6:	2500      	movs	r5, #0
		size = 2;
 80012f8:	4643      	mov	r3, r8
	result = spi_cmd(cmd, addr, 0, size,0);
 80012fa:	9500      	str	r5, [sp, #0]
 80012fc:	462a      	mov	r2, r5
 80012fe:	4659      	mov	r1, fp
 8001300:	20c7      	movs	r0, #199	; 0xc7
 8001302:	f7ff fe15 	bl	8000f30 <spi_cmd>
	if (result != N_OK) {
 8001306:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, size,0);
 8001308:	4606      	mov	r6, r0
	if (result != N_OK) {
 800130a:	d1db      	bne.n	80012c4 <nm_spi_write+0x14>
	result = spi_cmd_rsp(cmd);
 800130c:	20c7      	movs	r0, #199	; 0xc7
 800130e:	f7ff fdbf 	bl	8000e90 <spi_cmd_rsp>
	if (result != N_OK) {
 8001312:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 8001314:	4606      	mov	r6, r0
	if (result != N_OK) {
 8001316:	d1d5      	bne.n	80012c4 <nm_spi_write+0x14>
	spi.u16Sz = sz;
 8001318:	f8dd a008 	ldr.w	sl, [sp, #8]
	uint8 cmd, order, crc[2] = {0};
 800131c:	f8ad 5018 	strh.w	r5, [sp, #24]
	ix = 0;
 8001320:	462c      	mov	r4, r5
	spi.u16Sz = sz;
 8001322:	9003      	str	r0, [sp, #12]
 8001324:	4646      	mov	r6, r8
 8001326:	e026      	b.n	8001376 <nm_spi_write+0xc6>
			if (sz <= DATA_PKT_SZ)
 8001328:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800132c:	bf94      	ite	ls
 800132e:	22f3      	movls	r2, #243	; 0xf3
 8001330:	22f1      	movhi	r2, #241	; 0xf1
	spi.pu8InBuf = b;
 8001332:	f10d 0317 	add.w	r3, sp, #23
 8001336:	9307      	str	r3, [sp, #28]
	spi.pu8OutBuf = NULL;
 8001338:	2300      	movs	r3, #0
 800133a:	9308      	str	r3, [sp, #32]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800133c:	a807      	add	r0, sp, #28
	spi.u16Sz = sz;
 800133e:	f04f 0301 	mov.w	r3, #1
		cmd |= order;
 8001342:	f88d 2017 	strb.w	r2, [sp, #23]
	spi.u16Sz = sz;
 8001346:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800134a:	f7ff fd01 	bl	8000d50 <nm_bus_ioctl.constprop.0>
 800134e:	4602      	mov	r2, r0
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 8001350:	eb0a 0104 	add.w	r1, sl, r4
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001354:	a807      	add	r0, sp, #28
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 8001356:	bb4a      	cbnz	r2, 80013ac <nm_spi_write+0xfc>
	spi.pu8OutBuf = NULL;
 8001358:	e9cd 1207 	strd	r1, r2, [sp, #28]
	spi.u16Sz = sz;
 800135c:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 8001360:	f7ff fcf6 	bl	8000d50 <nm_bus_ioctl.constprop.0>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 8001364:	bb10      	cbnz	r0, 80013ac <nm_spi_write+0xfc>
		if (!gu8Crc_off) {
 8001366:	f899 2000 	ldrb.w	r2, [r9]
 800136a:	b19a      	cbz	r2, 8001394 <nm_spi_write+0xe4>
		sz -= nbytes;
 800136c:	1b73      	subs	r3, r6, r5
		ix += nbytes;
 800136e:	442c      	add	r4, r5
		sz -= nbytes;
 8001370:	b29e      	uxth	r6, r3
		ix += nbytes;
 8001372:	b224      	sxth	r4, r4
	} while (sz);
 8001374:	b1e6      	cbz	r6, 80013b0 <nm_spi_write+0x100>
			if (sz <= DATA_PKT_SZ)
 8001376:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800137a:	4635      	mov	r5, r6
 800137c:	bf28      	it	cs
 800137e:	f44f 5500 	movcs.w	r5, #8192	; 0x2000
 8001382:	b2ad      	uxth	r5, r5
		if (ix == 0)  {
 8001384:	2c00      	cmp	r4, #0
 8001386:	d0cf      	beq.n	8001328 <nm_spi_write+0x78>
			if (sz <= DATA_PKT_SZ)
 8001388:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800138c:	bf94      	ite	ls
 800138e:	22f3      	movls	r2, #243	; 0xf3
 8001390:	22f2      	movhi	r2, #242	; 0xf2
 8001392:	e7ce      	b.n	8001332 <nm_spi_write+0x82>
	spi.pu8InBuf = b;
 8001394:	a906      	add	r1, sp, #24
	spi.u16Sz = sz;
 8001396:	f04f 0302 	mov.w	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 800139a:	a807      	add	r0, sp, #28
	spi.pu8OutBuf = NULL;
 800139c:	9208      	str	r2, [sp, #32]
	spi.u16Sz = sz;
 800139e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	spi.pu8InBuf = b;
 80013a2:	9107      	str	r1, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80013a4:	f7ff fcd4 	bl	8000d50 <nm_bus_ioctl.constprop.0>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d0df      	beq.n	800136c <nm_spi_write+0xbc>
	if (result != N_OK) {
 80013ac:	2600      	movs	r6, #0
 80013ae:	e789      	b.n	80012c4 <nm_spi_write+0x14>
    if (!gu8Crc_off)
 80013b0:	f899 3000 	ldrb.w	r3, [r9]
 80013b4:	9e03      	ldr	r6, [sp, #12]
 80013b6:	b1d3      	cbz	r3, 80013ee <nm_spi_write+0x13e>
 80013b8:	2303      	movs	r3, #3
		len = 3;
 80013ba:	461c      	mov	r4, r3
	spi.pu8InBuf = NULL;
 80013bc:	2200      	movs	r2, #0
	spi.u16Sz = sz;
 80013be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80013c2:	a807      	add	r0, sp, #28
	spi.pu8OutBuf = b;
 80013c4:	ab06      	add	r3, sp, #24
 80013c6:	e9cd 2307 	strd	r2, r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 80013ca:	f7ff fcc1 	bl	8000d50 <nm_bus_ioctl.constprop.0>
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d1ec      	bne.n	80013ac <nm_spi_write+0xfc>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
 80013d2:	ab0a      	add	r3, sp, #40	; 0x28
 80013d4:	4423      	add	r3, r4
 80013d6:	f813 2c11 	ldrb.w	r2, [r3, #-17]
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d1e6      	bne.n	80013ac <nm_spi_write+0xfc>
 80013de:	f813 3c12 	ldrb.w	r3, [r3, #-18]
 80013e2:	2bc3      	cmp	r3, #195	; 0xc3
 80013e4:	d1e2      	bne.n	80013ac <nm_spi_write+0xfc>
}
 80013e6:	4630      	mov	r0, r6
 80013e8:	b00b      	add	sp, #44	; 0x2c
 80013ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!gu8Crc_off)
 80013ee:	2302      	movs	r3, #2
		len = 2;
 80013f0:	461c      	mov	r4, r3
 80013f2:	e7e3      	b.n	80013bc <nm_spi_write+0x10c>
 80013f4:	20000c21 	.word	0x20000c21
	...

08001400 <nm_write_block>:
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
 8001400:	2af8      	cmp	r2, #248	; 0xf8
{
 8001402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001406:	4616      	mov	r6, r2
 8001408:	4605      	mov	r5, r0
 800140a:	4688      	mov	r8, r1
		if(u32Sz <= u16MaxTrxSz)
 800140c:	4614      	mov	r4, r2
 800140e:	bf88      	it	hi
 8001410:	188f      	addhi	r7, r1, r2
 8001412:	d90e      	bls.n	8001432 <nm_write_block+0x32>
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 8001414:	1b39      	subs	r1, r7, r4
 8001416:	4628      	mov	r0, r5
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	f7ff ff49 	bl	80012b0 <nm_spi_write>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
 800141e:	3cf8      	subs	r4, #248	; 0xf8

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 8001420:	2801      	cmp	r0, #1
 8001422:	eba6 0304 	sub.w	r3, r6, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
 8001426:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
 800142a:	d10d      	bne.n	8001448 <nm_write_block+0x48>
		if(u32Sz <= u16MaxTrxSz)
 800142c:	2cf8      	cmp	r4, #248	; 0xf8
 800142e:	d8f1      	bhi.n	8001414 <nm_write_block+0x14>
 8001430:	4498      	add	r8, r3
	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
 8001432:	b2a2      	uxth	r2, r4
 8001434:	4641      	mov	r1, r8
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff ff3a 	bl	80012b0 <nm_spi_write>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 800143c:	2801      	cmp	r0, #1
 800143e:	bf08      	it	eq
 8001440:	2000      	moveq	r0, #0
 8001442:	d101      	bne.n	8001448 <nm_write_block+0x48>
		}
	}

	return s8Ret;
}
 8001444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
 8001448:	f06f 0005 	mvn.w	r0, #5
 800144c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001450 <spi_write_reg>:
{
 8001450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001454:	2830      	cmp	r0, #48	; 0x30
 8001456:	b082      	sub	sp, #8
 8001458:	4606      	mov	r6, r0
 800145a:	4688      	mov	r8, r1
 800145c:	bf95      	itete	ls
 800145e:	27c3      	movls	r7, #195	; 0xc3
 8001460:	27c9      	movhi	r7, #201	; 0xc9
 8001462:	f04f 0901 	movls.w	r9, #1
 8001466:	f04f 0900 	movhi.w	r9, #0
 800146a:	250a      	movs	r5, #10
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
 800146c:	f04f 0a00 	mov.w	sl, #0
 8001470:	e014      	b.n	800149c <spi_write_reg+0x4c>
 8001472:	200a      	movs	r0, #10
 8001474:	f7ff fc2c 	bl	8000cd0 <chThdSleep>
 8001478:	2300      	movs	r3, #0
 800147a:	461a      	mov	r2, r3
 800147c:	4619      	mov	r1, r3
 800147e:	f8cd a000 	str.w	sl, [sp]
 8001482:	20cf      	movs	r0, #207	; 0xcf
 8001484:	f7ff fd54 	bl	8000f30 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
 8001488:	20cf      	movs	r0, #207	; 0xcf
 800148a:	f7ff fd01 	bl	8000e90 <spi_cmd_rsp>
 800148e:	3d01      	subs	r5, #1
 8001490:	200a      	movs	r0, #10
 8001492:	f7ff fc1d 	bl	8000cd0 <chThdSleep>
		if(retry) goto _RETRY_;
 8001496:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800149a:	d010      	beq.n	80014be <spi_write_reg+0x6e>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 800149c:	f8cd 9000 	str.w	r9, [sp]
 80014a0:	2304      	movs	r3, #4
 80014a2:	4642      	mov	r2, r8
 80014a4:	4631      	mov	r1, r6
 80014a6:	4638      	mov	r0, r7
 80014a8:	f7ff fd42 	bl	8000f30 <spi_cmd>
	if (result != N_OK) {
 80014ac:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
 80014ae:	4604      	mov	r4, r0
	if (result != N_OK) {
 80014b0:	d1df      	bne.n	8001472 <spi_write_reg+0x22>
	result = spi_cmd_rsp(cmd);
 80014b2:	4638      	mov	r0, r7
 80014b4:	f7ff fcec 	bl	8000e90 <spi_cmd_rsp>
	if(result != N_OK)
 80014b8:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
 80014ba:	4604      	mov	r4, r0
	if(result != N_OK)
 80014bc:	d1d9      	bne.n	8001472 <spi_write_reg+0x22>
}
 80014be:	4620      	mov	r0, r4
 80014c0:	b002      	add	sp, #8
 80014c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014c6:	bf00      	nop
	...

080014d0 <nm_spi_write_reg>:
{
 80014d0:	b508      	push	{r3, lr}
	s8Ret = spi_write_reg(u32Addr, u32Val);
 80014d2:	f7ff ffbd 	bl	8001450 <spi_write_reg>
	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
 80014d6:	2801      	cmp	r0, #1
}
 80014d8:	bf14      	ite	ne
 80014da:	f06f 0005 	mvnne.w	r0, #5
 80014de:	2000      	moveq	r0, #0
 80014e0:	bd08      	pop	{r3, pc}
 80014e2:	bf00      	nop
	...

080014f0 <nm_write_reg>:
	return nm_spi_write_reg(u32Addr,u32Val);
 80014f0:	f7ff bfee 	b.w	80014d0 <nm_spi_write_reg>
	...

08001500 <chip_apply_conf>:
{
 8001500:	b530      	push	{r4, r5, lr}
	val32 |= rHAVE_RESERVED1_BIT;
 8001502:	f440 7480 	orr.w	r4, r0, #256	; 0x100
{
 8001506:	b083      	sub	sp, #12
			uint32 reg = 0;
 8001508:	2500      	movs	r5, #0
		nm_write_reg(rNMI_GP_REG_1, val32);
 800150a:	4621      	mov	r1, r4
 800150c:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 8001510:	f7ff ffee 	bl	80014f0 <nm_write_reg>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8001514:	a901      	add	r1, sp, #4
 8001516:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
			uint32 reg = 0;
 800151a:	9501      	str	r5, [sp, #4]
 800151c:	f7ff fe68 	bl	80011f0 <nm_spi_read_reg_with_ret>
			if(ret == M2M_SUCCESS) {
 8001520:	2800      	cmp	r0, #0
 8001522:	d1f2      	bne.n	800150a <chip_apply_conf+0xa>
				if(reg == val32)
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	42a3      	cmp	r3, r4
 8001528:	d1ef      	bne.n	800150a <chip_apply_conf+0xa>
}
 800152a:	b003      	add	sp, #12
 800152c:	bd30      	pop	{r4, r5, pc}
 800152e:	bf00      	nop

08001530 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <hif_chip_sleep+0x84>)
 8001532:	785a      	ldrb	r2, [r3, #1]
 8001534:	b11a      	cbz	r2, 800153e <hif_chip_sleep+0xe>
	{
		gstrHifCxt.u8ChipSleep--;
 8001536:	785a      	ldrb	r2, [r3, #1]
 8001538:	3a01      	subs	r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	705a      	strb	r2, [r3, #1]
	}

	if(gstrHifCxt.u8ChipSleep == 0)
 800153e:	785a      	ldrb	r2, [r3, #1]
 8001540:	b922      	cbnz	r2, 800154c <hif_chip_sleep+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001548:	b913      	cbnz	r3, 8001550 <hif_chip_sleep+0x20>
		{
		}
	}
ERR1:
	return ret;
}
 800154a:	4770      	bx	lr
	sint8 ret = M2M_SUCCESS;
 800154c:	2000      	movs	r0, #0
 800154e:	4770      	bx	lr
{
 8001550:	b500      	push	{lr}
 8001552:	b083      	sub	sp, #12
 8001554:	e002      	b.n	800155c <hif_chip_sleep+0x2c>

	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	07d9      	lsls	r1, r3, #31
 800155a:	d508      	bpl.n	800156e <hif_chip_sleep+0x3e>
 800155c:	a901      	add	r1, sp, #4
 800155e:	2010      	movs	r0, #16
 8001560:	f7ff fe46 	bl	80011f0 <nm_spi_read_reg_with_ret>
		if(ret != M2M_SUCCESS) goto ERR1;
 8001564:	2800      	cmp	r0, #0
 8001566:	d0f6      	beq.n	8001556 <hif_chip_sleep+0x26>
}
 8001568:	b003      	add	sp, #12
 800156a:	f85d fb04 	ldr.w	pc, [sp], #4
 800156e:	a901      	add	r1, sp, #4
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fe3d 	bl	80011f0 <nm_spi_read_reg_with_ret>
	}

	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
 8001576:	2800      	cmp	r0, #0
 8001578:	d1f6      	bne.n	8001568 <hif_chip_sleep+0x38>
	if(reg & NBIT1)
 800157a:	9901      	ldr	r1, [sp, #4]
 800157c:	078a      	lsls	r2, r1, #30
 800157e:	d40f      	bmi.n	80015a0 <hif_chip_sleep+0x70>
 8001580:	a901      	add	r1, sp, #4
 8001582:	200b      	movs	r0, #11
 8001584:	f7ff fe34 	bl	80011f0 <nm_spi_read_reg_with_ret>
		ret = nm_write_reg(WAKE_CLK_REG, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
	}

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
 8001588:	2800      	cmp	r0, #0
 800158a:	d1ed      	bne.n	8001568 <hif_chip_sleep+0x38>
	if(reg & NBIT0)
 800158c:	9901      	ldr	r1, [sp, #4]
 800158e:	07cb      	lsls	r3, r1, #31
 8001590:	d5ea      	bpl.n	8001568 <hif_chip_sleep+0x38>
	{
		reg &= ~NBIT0;
 8001592:	f021 0101 	bic.w	r1, r1, #1
	return nm_spi_write_reg(u32Addr,u32Val);
 8001596:	200b      	movs	r0, #11
 8001598:	9101      	str	r1, [sp, #4]
 800159a:	f7ff ff99 	bl	80014d0 <nm_spi_write_reg>
	return ret;
 800159e:	e7e3      	b.n	8001568 <hif_chip_sleep+0x38>
		reg &=~NBIT1;
 80015a0:	f021 0102 	bic.w	r1, r1, #2
 80015a4:	2001      	movs	r0, #1
 80015a6:	9101      	str	r1, [sp, #4]
 80015a8:	f7ff ff92 	bl	80014d0 <nm_spi_write_reg>
		if(ret != M2M_SUCCESS)goto ERR1;
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d0e7      	beq.n	8001580 <hif_chip_sleep+0x50>
 80015b0:	e7da      	b.n	8001568 <hif_chip_sleep+0x38>
 80015b2:	bf00      	nop
 80015b4:	20000bf8 	.word	0x20000bf8
	...

080015c0 <hif_send.constprop.0>:
*				Packet buffer Allocated by the caller.
*	@param [in]	u16DataSize
				Packet buffer size (including the HIF header).
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 80015c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c4:	b088      	sub	sp, #32
 80015c6:	4604      	mov	r4, r0
	sint8	ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
	strHif.u8Gid		= u8Gid;
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 80015c8:	2308      	movs	r3, #8
	strHif.u8Gid		= u8Gid;
 80015ca:	2001      	movs	r0, #1
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
 80015cc:	f88d 4011 	strb.w	r4, [sp, #17]
	strHif.u8Gid		= u8Gid;
 80015d0:	f88d 0010 	strb.w	r0, [sp, #16]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
 80015d4:	f8ad 3012 	strh.w	r3, [sp, #18]
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
 80015d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	if(gstrHifCxt.u8HifRXDone)
 80015dc:	4d81      	ldr	r5, [pc, #516]	; (80017e4 <hif_send.constprop.0+0x224>)
		strHif.u16Length += u16CtrlBufSize;
 80015de:	fa12 f383 	uxtah	r3, r2, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f8ad 3012 	strh.w	r3, [sp, #18]
	if(gstrHifCxt.u8HifRXDone)
 80015e8:	78ab      	ldrb	r3, [r5, #2]
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 80015ea:	4616      	mov	r6, r2
 80015ec:	460f      	mov	r7, r1
	if(gstrHifCxt.u8HifRXDone)
 80015ee:	b963      	cbnz	r3, 800160a <hif_send.constprop.0+0x4a>
	if(gstrHifCxt.u8ChipSleep == 0)
 80015f0:	786b      	ldrb	r3, [r5, #1]
 80015f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d164      	bne.n	80016c4 <hif_send.constprop.0+0x104>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80015fa:	782b      	ldrb	r3, [r5, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 80a0 	bne.w	8001742 <hif_send.constprop.0+0x182>
	gstrHifCxt.u8ChipSleep++;
 8001602:	786b      	ldrb	r3, [r5, #1]
 8001604:	3301      	adds	r3, #1
 8001606:	b2db      	uxtb	r3, r3
 8001608:	706b      	strb	r3, [r5, #1]
	}
	ret = hif_chip_wake();
	if(ret == M2M_SUCCESS)
	{
		volatile uint32 reg, dma_addr = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	9306      	str	r3, [sp, #24]
		volatile uint16 cnt = 0;
 800160e:	f8ad 300e 	strh.w	r3, [sp, #14]
//#define OPTIMIZE_BUS
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
 8001612:	9305      	str	r3, [sp, #20]
        temp = (uint16)strHif.u16Length;
 8001614:	f8bd 1012 	ldrh.w	r1, [sp, #18]
		reg |= (uint32)u8Gid;
 8001618:	9a05      	ldr	r2, [sp, #20]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	9205      	str	r2, [sp, #20]
		reg |= ((uint32)u8Opcode<<8);
 8001620:	9805      	ldr	r0, [sp, #20]
 8001622:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
 8001626:	9405      	str	r4, [sp, #20]
		reg |= ((uint32)temp<<16);
 8001628:	9b05      	ldr	r3, [sp, #20]
 800162a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800162e:	9305      	str	r3, [sp, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
 8001630:	9905      	ldr	r1, [sp, #20]
 8001632:	f241 008c 	movw	r0, #4236	; 0x108c
 8001636:	f7ff ff4b 	bl	80014d0 <nm_spi_write_reg>
 800163a:	4603      	mov	r3, r0
		if(M2M_SUCCESS != ret) goto ERR1;
 800163c:	b148      	cbz	r0, 8001652 <hif_send.constprop.0+0x92>
	if(gstrHifCxt.u8ChipSleep >= 1)
 800163e:	786a      	ldrb	r2, [r5, #1]
 8001640:	b11a      	cbz	r2, 800164a <hif_send.constprop.0+0x8a>
		gstrHifCxt.u8ChipSleep--;
 8001642:	786a      	ldrb	r2, [r5, #1]
 8001644:	3a01      	subs	r2, #1
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	706a      	strb	r2, [r5, #1]
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
ERR2:
	/*logical error*/
	return ret;
}
 800164a:	4618      	mov	r0, r3
 800164c:	b008      	add	sp, #32
 800164e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reg = 0UL;
 8001652:	9005      	str	r0, [sp, #20]
		reg |= NBIT1;
 8001654:	9b05      	ldr	r3, [sp, #20]
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	9305      	str	r3, [sp, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 800165c:	9905      	ldr	r1, [sp, #20]
 800165e:	f241 0078 	movw	r0, #4216	; 0x1078
 8001662:	f7ff ff35 	bl	80014d0 <nm_spi_write_reg>
 8001666:	4603      	mov	r3, r0
		if(M2M_SUCCESS != ret) goto ERR1;
 8001668:	2800      	cmp	r0, #0
 800166a:	d1e8      	bne.n	800163e <hif_send.constprop.0+0x7e>
		dma_addr = 0;
 800166c:	9006      	str	r0, [sp, #24]
		for(cnt = 0; cnt < 1000; cnt ++)
 800166e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8001672:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800167c:	d310      	bcc.n	80016a0 <hif_send.constprop.0+0xe0>
 800167e:	e02d      	b.n	80016dc <hif_send.constprop.0+0x11c>
			if (!(reg & NBIT1))
 8001680:	9c05      	ldr	r4, [sp, #20]
 8001682:	f014 0402 	ands.w	r4, r4, #2
 8001686:	d022      	beq.n	80016ce <hif_send.constprop.0+0x10e>
		for(cnt = 0; cnt < 1000; cnt ++)
 8001688:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001694:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001698:	b29b      	uxth	r3, r3
 800169a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800169e:	d21d      	bcs.n	80016dc <hif_send.constprop.0+0x11c>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 80016a0:	a905      	add	r1, sp, #20
 80016a2:	f241 0078 	movw	r0, #4216	; 0x1078
 80016a6:	f7ff fda3 	bl	80011f0 <nm_spi_read_reg_with_ret>
			if(ret != M2M_SUCCESS) break;
 80016aa:	b9b8      	cbnz	r0, 80016dc <hif_send.constprop.0+0x11c>
			if(cnt >= 500) {
 80016ac:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016b6:	d3e3      	bcc.n	8001680 <hif_send.constprop.0+0xc0>
 80016b8:	200a      	movs	r0, #10
				if(cnt < 501) {
 80016ba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80016be:	f7ff fb07 	bl	8000cd0 <chThdSleep>
 80016c2:	e7dd      	b.n	8001680 <hif_send.constprop.0+0xc0>
	gstrHifCxt.u8ChipSleep++;
 80016c4:	786b      	ldrb	r3, [r5, #1]
 80016c6:	4403      	add	r3, r0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	706b      	strb	r3, [r5, #1]
 80016cc:	e79d      	b.n	800160a <hif_send.constprop.0+0x4a>
 80016ce:	4846      	ldr	r0, [pc, #280]	; (80017e8 <hif_send.constprop.0+0x228>)
 80016d0:	a906      	add	r1, sp, #24
 80016d2:	f7ff fd8d 	bl	80011f0 <nm_spi_read_reg_with_ret>
				if(ret != M2M_SUCCESS) {
 80016d6:	4603      	mov	r3, r0
 80016d8:	2800      	cmp	r0, #0
 80016da:	d169      	bne.n	80017b0 <hif_send.constprop.0+0x1f0>
		if (dma_addr != 0)
 80016dc:	9b06      	ldr	r3, [sp, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d07b      	beq.n	80017da <hif_send.constprop.0+0x21a>
			u32CurrAddr = dma_addr;
 80016e2:	9b06      	ldr	r3, [sp, #24]
 80016e4:	9307      	str	r3, [sp, #28]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 80016e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f8ad 3012 	strh.w	r3, [sp, #18]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
 80016f0:	9807      	ldr	r0, [sp, #28]
 80016f2:	2208      	movs	r2, #8
 80016f4:	a904      	add	r1, sp, #16
 80016f6:	f7ff fe83 	bl	8001400 <nm_write_block>
			if(M2M_SUCCESS != ret) goto ERR1;
 80016fa:	4603      	mov	r3, r0
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d19e      	bne.n	800163e <hif_send.constprop.0+0x7e>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8001700:	9b07      	ldr	r3, [sp, #28]
 8001702:	3308      	adds	r3, #8
 8001704:	9307      	str	r3, [sp, #28]
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8001706:	9807      	ldr	r0, [sp, #28]
 8001708:	4639      	mov	r1, r7
 800170a:	4632      	mov	r2, r6
 800170c:	f7ff fe78 	bl	8001400 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
 8001710:	4603      	mov	r3, r0
 8001712:	2800      	cmp	r0, #0
 8001714:	d193      	bne.n	800163e <hif_send.constprop.0+0x7e>
				u32CurrAddr += u16CtrlBufSize;
 8001716:	9b07      	ldr	r3, [sp, #28]
 8001718:	441e      	add	r6, r3
 800171a:	9607      	str	r6, [sp, #28]
			reg = dma_addr << 2;
 800171c:	9b06      	ldr	r3, [sp, #24]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	9305      	str	r3, [sp, #20]
			reg |= NBIT1;
 8001722:	9b05      	ldr	r3, [sp, #20]
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	9305      	str	r3, [sp, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 800172a:	9905      	ldr	r1, [sp, #20]
	return nm_spi_write_reg(u32Addr,u32Val);
 800172c:	f241 006c 	movw	r0, #4204	; 0x106c
 8001730:	f7ff fece 	bl	80014d0 <nm_spi_write_reg>
			if(M2M_SUCCESS != ret) goto ERR1;
 8001734:	4603      	mov	r3, r0
 8001736:	2800      	cmp	r0, #0
 8001738:	d181      	bne.n	800163e <hif_send.constprop.0+0x7e>
 	ret = hif_chip_sleep();
 800173a:	f7ff fef9 	bl	8001530 <hif_chip_sleep>
 800173e:	4603      	mov	r3, r0
 8001740:	e783      	b.n	800164a <hif_send.constprop.0+0x8a>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8001742:	a906      	add	r1, sp, #24
 8001744:	200b      	movs	r0, #11
	return ret;
}
sint8 chip_wake(void)
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
 8001746:	e9cd 2206 	strd	r2, r2, [sp, #24]
 800174a:	f7ff fd51 	bl	80011f0 <nm_spi_read_reg_with_ret>

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 800174e:	4603      	mov	r3, r0
 8001750:	2800      	cmp	r0, #0
 8001752:	f47f af7a 	bne.w	800164a <hif_send.constprop.0+0x8a>

	if(!(reg & NBIT0))
 8001756:	9906      	ldr	r1, [sp, #24]
 8001758:	07cb      	lsls	r3, r1, #31
 800175a:	d408      	bmi.n	800176e <hif_send.constprop.0+0x1ae>
	return nm_spi_write_reg(u32Addr,u32Val);
 800175c:	f041 0101 	orr.w	r1, r1, #1
 8001760:	200b      	movs	r0, #11
 8001762:	f7ff feb5 	bl	80014d0 <nm_spi_write_reg>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8001766:	4603      	mov	r3, r0
 8001768:	2800      	cmp	r0, #0
 800176a:	f47f af6e 	bne.w	800164a <hif_send.constprop.0+0x8a>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800176e:	a906      	add	r1, sp, #24
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fd3d 	bl	80011f0 <nm_spi_read_reg_with_ret>
	}

	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 8001776:	4603      	mov	r3, r0
 8001778:	2800      	cmp	r0, #0
 800177a:	f47f af66 	bne.w	800164a <hif_send.constprop.0+0x8a>
	/* Set bit 1 */
	if(!(reg & NBIT1))
 800177e:	9906      	ldr	r1, [sp, #24]
 8001780:	0788      	lsls	r0, r1, #30
 8001782:	d521      	bpl.n	80017c8 <hif_send.constprop.0+0x208>
sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
 8001784:	f04f 0805 	mov.w	r8, #5
 8001788:	a907      	add	r1, sp, #28
 800178a:	200f      	movs	r0, #15
 800178c:	f7ff fd30 	bl	80011f0 <nm_spi_read_reg_with_ret>
 8001790:	4603      	mov	r3, r0
 8001792:	2014      	movs	r0, #20
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
		if(ret != M2M_SUCCESS) {
 8001794:	2b00      	cmp	r3, #0
 8001796:	f47f af58 	bne.w	800164a <hif_send.constprop.0+0x8a>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
 800179a:	9a07      	ldr	r2, [sp, #28]
 800179c:	0752      	lsls	r2, r2, #29
 800179e:	d409      	bmi.n	80017b4 <hif_send.constprop.0+0x1f4>
 80017a0:	f7ff fa96 	bl	8000cd0 <chThdSleep>
			break;
		}
		nm_bsp_sleep(2);
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
 80017a4:	f1b8 0801 	subs.w	r8, r8, #1
 80017a8:	d1ee      	bne.n	8001788 <hif_send.constprop.0+0x1c8>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
 80017aa:	f06f 0303 	mvn.w	r3, #3
 80017ae:	e74c      	b.n	800164a <hif_send.constprop.0+0x8a>
					dma_addr = 0;
 80017b0:	9406      	str	r4, [sp, #24]
 80017b2:	e744      	b.n	800163e <hif_send.constprop.0+0x7e>
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	20cf      	movs	r0, #207	; 0xcf
 80017bc:	f7ff fbb8 	bl	8000f30 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
 80017c0:	20cf      	movs	r0, #207	; 0xcf
 80017c2:	f7ff fb65 	bl	8000e90 <spi_cmd_rsp>
 80017c6:	e71c      	b.n	8001602 <hif_send.constprop.0+0x42>
	return nm_spi_write_reg(u32Addr,u32Val);
 80017c8:	f041 0102 	orr.w	r1, r1, #2
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fe7f 	bl	80014d0 <nm_spi_write_reg>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 80017d2:	4603      	mov	r3, r0
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d0d5      	beq.n	8001784 <hif_send.constprop.0+0x1c4>
 80017d8:	e737      	b.n	800164a <hif_send.constprop.0+0x8a>
			ret = hif_chip_sleep();
 80017da:	f7ff fea9 	bl	8001530 <hif_chip_sleep>
			ret = M2M_ERR_MEM_ALLOC;
 80017de:	f06f 0302 	mvn.w	r3, #2
 80017e2:	e732      	b.n	800164a <hif_send.constprop.0+0x8a>
 80017e4:	20000bf8 	.word	0x20000bf8
 80017e8:	00150400 	.word	0x00150400
 80017ec:	00000000 	.word	0x00000000

080017f0 <m2m_wifi_request_scan.constprop.0>:
	tstrM2MScanRegion strScanRegion;
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
 80017f0:	b510      	push	{r4, lr}
{
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
 80017f2:	4c0a      	ldr	r4, [pc, #40]	; (800181c <m2m_wifi_request_scan.constprop.0+0x2c>)
 80017f4:	7823      	ldrb	r3, [r4, #0]
sint8 m2m_wifi_request_scan(uint8 ch)
 80017f6:	b082      	sub	sp, #8
	if(!gu8scanInProgress)
 80017f8:	b96b      	cbnz	r3, 8001816 <m2m_wifi_request_scan.constprop.0+0x26>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 80017fa:	2204      	movs	r2, #4
			strtmp.u8ChNum = ch;
 80017fc:	23ff      	movs	r3, #255	; 0xff
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 80017fe:	eb0d 0102 	add.w	r1, sp, r2
 8001802:	2010      	movs	r0, #16
			strtmp.u8ChNum = ch;
 8001804:	f88d 3004 	strb.w	r3, [sp, #4]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
 8001808:	f7ff feda 	bl	80015c0 <hif_send.constprop.0>
			if(s8Ret == M2M_SUCCESS)
 800180c:	b908      	cbnz	r0, 8001812 <m2m_wifi_request_scan.constprop.0+0x22>
			{
				gu8scanInProgress = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	7023      	strb	r3, [r4, #0]
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
 8001812:	b002      	add	sp, #8
 8001814:	bd10      	pop	{r4, pc}
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
 8001816:	f06f 000d 	mvn.w	r0, #13
 800181a:	e7fa      	b.n	8001812 <m2m_wifi_request_scan.constprop.0+0x22>
 800181c:	20000c22 	.word	0x20000c22

08001820 <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request,
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 8001820:	b500      	push	{lr}
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 8001822:	2204      	movs	r2, #4
{
 8001824:	b083      	sub	sp, #12
 8001826:	4603      	mov	r3, r0
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 8001828:	eb0d 0102 	add.w	r1, sp, r2
 800182c:	2012      	movs	r0, #18
	strReqScanRlt.u8Index = index;
 800182e:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 8001832:	f7ff fec5 	bl	80015c0 <hif_send.constprop.0>
	return ret;
}
 8001836:	b003      	add	sp, #12
 8001838:	f85d fb04 	ldr.w	pc, [sp], #4
 800183c:	0000      	movs	r0, r0
	...

08001840 <hif_set_rx_done>:
{
 8001840:	b500      	push	{lr}
	gstrHifCxt.u8HifRXDone = 0;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <hif_set_rx_done+0x30>)
{
 8001844:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
 8001846:	2200      	movs	r2, #0
 8001848:	709a      	strb	r2, [r3, #2]
	if (1 == u8Enable)
 800184a:	f7fe ff11 	bl	8000670 <nm_bsp_interrupt_ctrl.part.0>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 800184e:	a901      	add	r1, sp, #4
 8001850:	f241 0070 	movw	r0, #4208	; 0x1070
 8001854:	f7ff fccc 	bl	80011f0 <nm_spi_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
 8001858:	b938      	cbnz	r0, 800186a <hif_set_rx_done+0x2a>
	reg |= NBIT1;
 800185a:	9901      	ldr	r1, [sp, #4]
	return nm_spi_write_reg(u32Addr,u32Val);
 800185c:	f241 0070 	movw	r0, #4208	; 0x1070
 8001860:	f041 0102 	orr.w	r1, r1, #2
 8001864:	9101      	str	r1, [sp, #4]
 8001866:	f7ff fe33 	bl	80014d0 <nm_spi_write_reg>
}
 800186a:	b003      	add	sp, #12
 800186c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001870:	20000bf8 	.word	0x20000bf8
	...

08001880 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	461e      	mov	r6, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
 8001884:	b1e8      	cbz	r0, 80018c2 <hif_receive+0x42>
 8001886:	b1e1      	cbz	r1, 80018c2 <hif_receive+0x42>
 8001888:	b1da      	cbz	r2, 80018c2 <hif_receive+0x42>
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
 800188a:	4f10      	ldr	r7, [pc, #64]	; (80018cc <hif_receive+0x4c>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	d819      	bhi.n	80018c6 <hif_receive+0x46>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
		goto ERR1;
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4298      	cmp	r0, r3
 8001896:	4604      	mov	r4, r0
 8001898:	d315      	bcc.n	80018c6 <hif_receive+0x46>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80018a0:	4414      	add	r4, r2
 80018a2:	4463      	add	r3, ip
 80018a4:	429c      	cmp	r4, r3
 80018a6:	d80e      	bhi.n	80018c6 <hif_receive+0x46>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
	}

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 80018a8:	f7ff fc32 	bl	8001110 <nm_read_block>
	if(ret != M2M_SUCCESS)goto ERR1;
 80018ac:	b968      	cbnz	r0, 80018ca <hif_receive+0x4a>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	429c      	cmp	r4, r3
 80018b6:	d000      	beq.n	80018ba <hif_receive+0x3a>
 80018b8:	b13e      	cbz	r6, 80018ca <hif_receive+0x4a>
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
 80018ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = hif_set_rx_done();
 80018be:	f7ff bfbf 	b.w	8001840 <hif_set_rx_done>
		if(isDone)
 80018c2:	2e00      	cmp	r6, #0
 80018c4:	d1f9      	bne.n	80018ba <hif_receive+0x3a>
			ret = M2M_ERR_FAIL;
 80018c6:	f06f 000b 	mvn.w	r0, #11
}
 80018ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018cc:	20000bf8 	.word	0x20000bf8

080018d0 <m2m_wifi_cb>:
{
 80018d0:	b530      	push	{r4, r5, lr}
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 80018d2:	282c      	cmp	r0, #44	; 0x2c
{
 80018d4:	b09b      	sub	sp, #108	; 0x6c
 80018d6:	4604      	mov	r4, r0
 80018d8:	4615      	mov	r5, r2
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 80018da:	d034      	beq.n	8001946 <m2m_wifi_cb+0x76>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 80018dc:	281b      	cmp	r0, #27
 80018de:	d03c      	beq.n	800195a <m2m_wifi_cb+0x8a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 80018e0:	2806      	cmp	r0, #6
 80018e2:	d043      	beq.n	800196c <m2m_wifi_cb+0x9c>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 80018e4:	280e      	cmp	r0, #14
 80018e6:	d02c      	beq.n	8001942 <m2m_wifi_cb+0x72>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 80018e8:	2832      	cmp	r0, #50	; 0x32
 80018ea:	d048      	beq.n	800197e <m2m_wifi_cb+0xae>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 80018ec:	282f      	cmp	r0, #47	; 0x2f
 80018ee:	d04f      	beq.n	8001990 <m2m_wifi_cb+0xc0>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 80018f0:	2834      	cmp	r0, #52	; 0x34
 80018f2:	d065      	beq.n	80019c0 <m2m_wifi_cb+0xf0>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 80018f4:	2811      	cmp	r0, #17
 80018f6:	d07d      	beq.n	80019f4 <m2m_wifi_cb+0x124>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 80018f8:	2813      	cmp	r0, #19
 80018fa:	f000 8092 	beq.w	8001a22 <m2m_wifi_cb+0x152>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 80018fe:	2804      	cmp	r0, #4
 8001900:	f000 80a0 	beq.w	8001a44 <m2m_wifi_cb+0x174>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 8001904:	2865      	cmp	r0, #101	; 0x65
 8001906:	d01e      	beq.n	8001946 <m2m_wifi_cb+0x76>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 8001908:	2809      	cmp	r0, #9
 800190a:	f000 80ad 	beq.w	8001a68 <m2m_wifi_cb+0x198>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 800190e:	282a      	cmp	r0, #42	; 0x2a
 8001910:	d067      	beq.n	80019e2 <m2m_wifi_cb+0x112>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 8001912:	2820      	cmp	r0, #32
 8001914:	d115      	bne.n	8001942 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
 8001916:	a901      	add	r1, sp, #4
 8001918:	2300      	movs	r3, #0
 800191a:	2208      	movs	r2, #8
 800191c:	4628      	mov	r0, r5
 800191e:	f7ff ffaf 	bl	8001880 <hif_receive>
 8001922:	b970      	cbnz	r0, 8001942 <m2m_wifi_cb+0x72>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 8001924:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001928:	9901      	ldr	r1, [sp, #4]
 800192a:	f105 0008 	add.w	r0, r5, #8
 800192e:	2301      	movs	r3, #1
 8001930:	f7ff ffa6 	bl	8001880 <hif_receive>
 8001934:	b928      	cbnz	r0, 8001942 <m2m_wifi_cb+0x72>
				if(gpfAppWifiCb)
 8001936:	4b51      	ldr	r3, [pc, #324]	; (8001a7c <m2m_wifi_cb+0x1ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b113      	cbz	r3, 8001942 <m2m_wifi_cb+0x72>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
 800193c:	a901      	add	r1, sp, #4
 800193e:	4620      	mov	r0, r4
 8001940:	4798      	blx	r3
}
 8001942:	b01b      	add	sp, #108	; 0x6c
 8001944:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8001946:	4628      	mov	r0, r5
 8001948:	a901      	add	r1, sp, #4
 800194a:	2300      	movs	r3, #0
 800194c:	2204      	movs	r2, #4
 800194e:	f7ff ff97 	bl	8001880 <hif_receive>
 8001952:	2800      	cmp	r0, #0
 8001954:	d0ef      	beq.n	8001936 <m2m_wifi_cb+0x66>
}
 8001956:	b01b      	add	sp, #108	; 0x6c
 8001958:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 800195a:	4610      	mov	r0, r2
 800195c:	a901      	add	r1, sp, #4
 800195e:	2300      	movs	r3, #0
 8001960:	2208      	movs	r2, #8
 8001962:	f7ff ff8d 	bl	8001880 <hif_receive>
 8001966:	2800      	cmp	r0, #0
 8001968:	d1eb      	bne.n	8001942 <m2m_wifi_cb+0x72>
 800196a:	e7e4      	b.n	8001936 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 800196c:	4610      	mov	r0, r2
 800196e:	a901      	add	r1, sp, #4
 8001970:	2301      	movs	r3, #1
 8001972:	2230      	movs	r2, #48	; 0x30
 8001974:	f7ff ff84 	bl	8001880 <hif_receive>
 8001978:	2800      	cmp	r0, #0
 800197a:	d1e2      	bne.n	8001942 <m2m_wifi_cb+0x72>
 800197c:	e7db      	b.n	8001936 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 800197e:	4610      	mov	r0, r2
 8001980:	a901      	add	r1, sp, #4
 8001982:	2300      	movs	r3, #0
 8001984:	2214      	movs	r2, #20
 8001986:	f7ff ff7b 	bl	8001880 <hif_receive>
 800198a:	2800      	cmp	r0, #0
 800198c:	d1d9      	bne.n	8001942 <m2m_wifi_cb+0x72>
 800198e:	e7d2      	b.n	8001936 <m2m_wifi_cb+0x66>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
 8001990:	ac01      	add	r4, sp, #4
 8001992:	4623      	mov	r3, r4
void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
	do
	{
		*pBuf = val;
 8001994:	2200      	movs	r2, #0
 8001996:	f803 2b01 	strb.w	r2, [r3], #1
		pBuf++;
	}while(--sz);
 800199a:	a91a      	add	r1, sp, #104	; 0x68
 800199c:	428b      	cmp	r3, r1
 800199e:	d1fa      	bne.n	8001996 <m2m_wifi_cb+0xc6>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 80019a0:	4628      	mov	r0, r5
 80019a2:	2300      	movs	r3, #0
 80019a4:	2264      	movs	r2, #100	; 0x64
 80019a6:	4621      	mov	r1, r4
 80019a8:	f7ff ff6a 	bl	8001880 <hif_receive>
 80019ac:	2800      	cmp	r0, #0
 80019ae:	d1c8      	bne.n	8001942 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 80019b0:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <m2m_wifi_cb+0x1ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0c4      	beq.n	8001942 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 80019b8:	4621      	mov	r1, r4
 80019ba:	202f      	movs	r0, #47	; 0x2f
 80019bc:	4798      	blx	r3
 80019be:	e7c0      	b.n	8001942 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 80019c0:	4610      	mov	r0, r2
 80019c2:	2204      	movs	r2, #4
 80019c4:	2300      	movs	r3, #0
 80019c6:	eb0d 0102 	add.w	r1, sp, r2
 80019ca:	f7ff ff59 	bl	8001880 <hif_receive>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d1b7      	bne.n	8001942 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <m2m_wifi_cb+0x1ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0b3      	beq.n	8001942 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 80019da:	4601      	mov	r1, r0
 80019dc:	4620      	mov	r0, r4
 80019de:	4798      	blx	r3
 80019e0:	e7af      	b.n	8001942 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 80019e2:	4610      	mov	r0, r2
 80019e4:	a901      	add	r1, sp, #4
 80019e6:	2301      	movs	r3, #1
 80019e8:	2204      	movs	r2, #4
 80019ea:	f7ff ff49 	bl	8001880 <hif_receive>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1a7      	bne.n	8001942 <m2m_wifi_cb+0x72>
 80019f2:	e7a0      	b.n	8001936 <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <m2m_wifi_cb+0x1b0>)
 80019f6:	2300      	movs	r3, #0
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 80019f8:	ac01      	add	r4, sp, #4
		gu8scanInProgress = 0;
 80019fa:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 80019fc:	4628      	mov	r0, r5
 80019fe:	4621      	mov	r1, r4
 8001a00:	2204      	movs	r2, #4
 8001a02:	f7ff ff3d 	bl	8001880 <hif_receive>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d19b      	bne.n	8001942 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <m2m_wifi_cb+0x1ac>)
			gu8ChNum = strState.u8NumofCh;
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <m2m_wifi_cb+0x1b4>)
			if (gpfAppWifiCb)
 8001a0e:	681b      	ldr	r3, [r3, #0]
			gu8ChNum = strState.u8NumofCh;
 8001a10:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001a14:	7011      	strb	r1, [r2, #0]
			if (gpfAppWifiCb)
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d093      	beq.n	8001942 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	4798      	blx	r3
 8001a20:	e78f      	b.n	8001942 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 8001a22:	ac01      	add	r4, sp, #4
 8001a24:	4610      	mov	r0, r2
 8001a26:	4621      	mov	r1, r4
 8001a28:	2300      	movs	r3, #0
 8001a2a:	222c      	movs	r2, #44	; 0x2c
 8001a2c:	f7ff ff28 	bl	8001880 <hif_receive>
 8001a30:	2800      	cmp	r0, #0
 8001a32:	d186      	bne.n	8001942 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <m2m_wifi_cb+0x1ac>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d082      	beq.n	8001942 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	2013      	movs	r0, #19
 8001a40:	4798      	blx	r3
 8001a42:	e77e      	b.n	8001942 <m2m_wifi_cb+0x72>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 8001a44:	4610      	mov	r0, r2
 8001a46:	a901      	add	r1, sp, #4
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	f7ff ff18 	bl	8001880 <hif_receive>
 8001a50:	2800      	cmp	r0, #0
 8001a52:	f47f af76 	bne.w	8001942 <m2m_wifi_cb+0x72>
			if (gpfAppWifiCb)
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <m2m_wifi_cb+0x1ac>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f43f af71 	beq.w	8001942 <m2m_wifi_cb+0x72>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 8001a60:	a901      	add	r1, sp, #4
 8001a62:	2004      	movs	r0, #4
 8001a64:	4798      	blx	r3
 8001a66:	e76c      	b.n	8001942 <m2m_wifi_cb+0x72>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 8001a68:	4610      	mov	r0, r2
 8001a6a:	a901      	add	r1, sp, #4
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2264      	movs	r2, #100	; 0x64
 8001a70:	f7ff ff06 	bl	8001880 <hif_receive>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f47f af64 	bne.w	8001942 <m2m_wifi_cb+0x72>
 8001a7a:	e75c      	b.n	8001936 <m2m_wifi_cb+0x66>
 8001a7c:	20000bf4 	.word	0x20000bf4
 8001a80:	20000c22 	.word	0x20000c22
 8001a84:	20000c20 	.word	0x20000c20
	...

08001a90 <myPrintf>:

/**
 * wrapper for chprintf. Doesn't need the BaseSequentialStream implementing object as input
 */
int myPrintf(const char* fmt, ...)
{
 8001a90:	b40f      	push	{r0, r1, r2, r3}
 8001a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	ab10      	add	r3, sp, #64	; 0x40
 8001a9a:	f853 4b04 	ldr.w	r4, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8001a9e:	9302      	str	r3, [sp, #8]
    c = *fmt++;
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	f000 823e 	beq.w	8001f28 <myPrintf+0x498>
 8001aac:	4dc0      	ldr	r5, [pc, #768]	; (8001db0 <myPrintf+0x320>)
 8001aae:	469a      	mov	sl, r3
  int n = 0;
 8001ab0:	f04f 0b00 	mov.w	fp, #0
 8001ab4:	e00c      	b.n	8001ad0 <myPrintf+0x40>
      streamPut(chp, (uint8_t)c);
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	48bd      	ldr	r0, [pc, #756]	; (8001db0 <myPrintf+0x320>)
 8001aba:	68db      	ldr	r3, [r3, #12]
      n++;
 8001abc:	f10b 0b01 	add.w	fp, fp, #1
 8001ac0:	4614      	mov	r4, r2
      streamPut(chp, (uint8_t)c);
 8001ac2:	4798      	blx	r3
    c = *fmt++;
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001aca:	2900      	cmp	r1, #0
 8001acc:	f000 80be 	beq.w	8001c4c <myPrintf+0x1bc>
    if (c != '%') {
 8001ad0:	2925      	cmp	r1, #37	; 0x25
 8001ad2:	d1f0      	bne.n	8001ab6 <myPrintf+0x26>
    if (*fmt == '-') {
 8001ad4:	7863      	ldrb	r3, [r4, #1]
 8001ad6:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8001ad8:	bf04      	itt	eq
 8001ada:	1ca2      	addeq	r2, r4, #2
      left_align = true;
 8001adc:	2001      	moveq	r0, #1
    if (*fmt == '+') {
 8001ade:	7813      	ldrb	r3, [r2, #0]
    left_align = false;
 8001ae0:	bf18      	it	ne
 8001ae2:	2000      	movne	r0, #0
    if (*fmt == '+') {
 8001ae4:	2b2b      	cmp	r3, #43	; 0x2b
 8001ae6:	bf03      	ittte	eq
 8001ae8:	7853      	ldrbeq	r3, [r2, #1]
      do_sign = true;
 8001aea:	f04f 0e01 	moveq.w	lr, #1
      fmt++;
 8001aee:	4472      	addeq	r2, lr
    do_sign = false;
 8001af0:	f04f 0e00 	movne.w	lr, #0
    if (*fmt == '0') {
 8001af4:	2b30      	cmp	r3, #48	; 0x30
      filler = '0';
 8001af6:	bf05      	ittet	eq
 8001af8:	461f      	moveq	r7, r3
      fmt++;
 8001afa:	7853      	ldrbeq	r3, [r2, #1]
    filler = ' ';
 8001afc:	2720      	movne	r7, #32
      fmt++;
 8001afe:	3201      	addeq	r2, #1
    if ( *fmt == '*') {
 8001b00:	2b2a      	cmp	r3, #42	; 0x2a
 8001b02:	f040 80ac 	bne.w	8001c5e <myPrintf+0x1ce>
      width = va_arg(ap, int);
 8001b06:	f85a 1b04 	ldr.w	r1, [sl], #4
      c = *fmt++;
 8001b0a:	7853      	ldrb	r3, [r2, #1]
 8001b0c:	1c94      	adds	r4, r2, #2
    if (c == '.') {
 8001b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b10:	f000 8130 	beq.w	8001d74 <myPrintf+0x2e4>
    precision = 0;
 8001b14:	2200      	movs	r2, #0
    if (c == 'l' || c == 'L') {
 8001b16:	f003 06df 	and.w	r6, r3, #223	; 0xdf
 8001b1a:	2e4c      	cmp	r6, #76	; 0x4c
 8001b1c:	f000 80b2 	beq.w	8001c84 <myPrintf+0x1f4>
 8001b20:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
 8001b24:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8001b28:	f200 819b 	bhi.w	8001e62 <myPrintf+0x3d2>
 8001b2c:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8001b30:	01990161 	.word	0x01990161
 8001b34:	01990199 	.word	0x01990199
 8001b38:	01610199 	.word	0x01610199
 8001b3c:	01990199 	.word	0x01990199
 8001b40:	01990199 	.word	0x01990199
 8001b44:	019d0199 	.word	0x019d0199
 8001b48:	01990035 	.word	0x01990035
 8001b4c:	01990199 	.word	0x01990199
 8001b50:	00940199 	.word	0x00940199
 8001b54:	01990199 	.word	0x01990199
 8001b58:	01990035 	.word	0x01990035
 8001b5c:	01990199 	.word	0x01990199
 8001b60:	01990199 	.word	0x01990199
 8001b64:	01990199 	.word	0x01990199
 8001b68:	01990199 	.word	0x01990199
 8001b6c:	01500199 	.word	0x01500199
 8001b70:	01990161 	.word	0x01990161
 8001b74:	01990199 	.word	0x01990199
 8001b78:	01610199 	.word	0x01610199
 8001b7c:	01990199 	.word	0x01990199
 8001b80:	01990199 	.word	0x01990199
 8001b84:	019d0199 	.word	0x019d0199
 8001b88:	01990035 	.word	0x01990035
 8001b8c:	012d0199 	.word	0x012d0199
 8001b90:	00940199 	.word	0x00940199
 8001b94:	01990199 	.word	0x01990199
 8001b98:	0035      	.short	0x0035
      if (c == 0) {
 8001b9a:	f04f 0e10 	mov.w	lr, #16
        l = va_arg(ap, unsigned int);
 8001b9e:	f85a 6b04 	ldr.w	r6, [sl], #4
  q = p + MAX_FILLER;
 8001ba2:	f10d 0317 	add.w	r3, sp, #23
 8001ba6:	e000      	b.n	8001baa <myPrintf+0x11a>
  } while ((ll /= radix) != 0);
 8001ba8:	4663      	mov	r3, ip
    i = (int)(l % radix);
 8001baa:	46b0      	mov	r8, r6
 8001bac:	fbb6 f6fe 	udiv	r6, r6, lr
 8001bb0:	fb0e 8916 	mls	r9, lr, r6, r8
    i += '0';
 8001bb4:	f109 0230 	add.w	r2, r9, #48	; 0x30
    if (i > '9') {
 8001bb8:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 8001bba:	bfc8      	it	gt
 8001bbc:	f109 0237 	addgt.w	r2, r9, #55	; 0x37
    *--q = i;
 8001bc0:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8001bc2:	45f0      	cmp	r8, lr
    *--q = i;
 8001bc4:	f103 3cff 	add.w	ip, r3, #4294967295
 8001bc8:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 8001bcc:	d2ec      	bcs.n	8001ba8 <myPrintf+0x118>
  i = (int)(p + MAX_FILLER - q);
 8001bce:	f10d 080c 	add.w	r8, sp, #12
 8001bd2:	f10d 0617 	add.w	r6, sp, #23
 8001bd6:	eba6 060c 	sub.w	r6, r6, ip
 8001bda:	46c6      	mov	lr, r8
 8001bdc:	f10d 0c17 	add.w	ip, sp, #23
 8001be0:	e001      	b.n	8001be6 <myPrintf+0x156>
 8001be2:	f813 2b01 	ldrb.w	r2, [r3], #1
    *p++ = *q++;
 8001be6:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 8001bea:	4563      	cmp	r3, ip
 8001bec:	d1f9      	bne.n	8001be2 <myPrintf+0x152>
 8001bee:	1b89      	subs	r1, r1, r6
 8001bf0:	3e01      	subs	r6, #1
 8001bf2:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8001bf6:	b920      	cbnz	r0, 8001c02 <myPrintf+0x172>
    if (width < 0) {
 8001bf8:	2900      	cmp	r1, #0
      width = -width;
 8001bfa:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8001bfe:	f300 8148 	bgt.w	8001e92 <myPrintf+0x402>
    while (--i >= 0) {
 8001c02:	2e00      	cmp	r6, #0
 8001c04:	db0f      	blt.n	8001c26 <myPrintf+0x196>
 8001c06:	1c73      	adds	r3, r6, #1
 8001c08:	4443      	add	r3, r8
 8001c0a:	9401      	str	r4, [sp, #4]
 8001c0c:	461c      	mov	r4, r3
      streamPut(chp, (uint8_t)*s++);
 8001c0e:	682a      	ldr	r2, [r5, #0]
 8001c10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	4628      	mov	r0, r5
 8001c18:	4790      	blx	r2
    while (--i >= 0) {
 8001c1a:	45a0      	cmp	r8, r4
 8001c1c:	d1f7      	bne.n	8001c0e <myPrintf+0x17e>
 8001c1e:	f10b 0b01 	add.w	fp, fp, #1
 8001c22:	9c01      	ldr	r4, [sp, #4]
 8001c24:	44b3      	add	fp, r6
    while (width) {
 8001c26:	f1b9 0f00 	cmp.w	r9, #0
 8001c2a:	f43f af4b 	beq.w	8001ac4 <myPrintf+0x34>
 8001c2e:	464e      	mov	r6, r9
      streamPut(chp, (uint8_t)filler);
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	4639      	mov	r1, r7
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	4628      	mov	r0, r5
 8001c38:	4798      	blx	r3
    while (width) {
 8001c3a:	3e01      	subs	r6, #1
 8001c3c:	d1f8      	bne.n	8001c30 <myPrintf+0x1a0>
    c = *fmt++;
 8001c3e:	4622      	mov	r2, r4
 8001c40:	44cb      	add	fp, r9
 8001c42:	f812 1b01 	ldrb.w	r1, [r2], #1
    if (c == 0) {
 8001c46:	2900      	cmp	r1, #0
 8001c48:	f47f af42 	bne.w	8001ad0 <myPrintf+0x40>
  formatted_bytes = chvprintf((BaseSequentialStream*) &myPrintfSD, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8001c4c:	4658      	mov	r0, fp
 8001c4e:	b007      	add	sp, #28
 8001c50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c54:	b004      	add	sp, #16
 8001c56:	4770      	bx	lr
      if (c == 0) {
 8001c58:	f04f 0e0a 	mov.w	lr, #10
 8001c5c:	e79f      	b.n	8001b9e <myPrintf+0x10e>
        c = *fmt++;
 8001c5e:	1c54      	adds	r4, r2, #1
        if (c == 0) {
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f3      	beq.n	8001c4c <myPrintf+0x1bc>
      width = 0;
 8001c64:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8001c66:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	2a09      	cmp	r2, #9
          width = width * 10 + c;
 8001c6e:	eb01 0681 	add.w	r6, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8001c72:	f63f af4c 	bhi.w	8001b0e <myPrintf+0x7e>
        c = *fmt++;
 8001c76:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8001c7a:	eb02 0146 	add.w	r1, r2, r6, lsl #1
        if (c == 0) {
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f1      	bne.n	8001c66 <myPrintf+0x1d6>
 8001c82:	e7e3      	b.n	8001c4c <myPrintf+0x1bc>
      c = *fmt++;
 8001c84:	f814 3b01 	ldrb.w	r3, [r4], #1
      if (c == 0) {
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0df      	beq.n	8001c4c <myPrintf+0x1bc>
 8001c8c:	f1a3 0644 	sub.w	r6, r3, #68	; 0x44
 8001c90:	2e34      	cmp	r6, #52	; 0x34
 8001c92:	f200 80e6 	bhi.w	8001e62 <myPrintf+0x3d2>
 8001c96:	f20f 0c08 	addw	ip, pc, #8
 8001c9a:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001c9e:	bf00      	nop
 8001ca0:	08001df3 	.word	0x08001df3
 8001ca4:	08001e63 	.word	0x08001e63
 8001ca8:	08001e63 	.word	0x08001e63
 8001cac:	08001e63 	.word	0x08001e63
 8001cb0:	08001e63 	.word	0x08001e63
 8001cb4:	08001df3 	.word	0x08001df3
 8001cb8:	08001e63 	.word	0x08001e63
 8001cbc:	08001e63 	.word	0x08001e63
 8001cc0:	08001e63 	.word	0x08001e63
 8001cc4:	08001e63 	.word	0x08001e63
 8001cc8:	08001e63 	.word	0x08001e63
 8001ccc:	08001e6b 	.word	0x08001e6b
 8001cd0:	08001b9b 	.word	0x08001b9b
 8001cd4:	08001e63 	.word	0x08001e63
 8001cd8:	08001e63 	.word	0x08001e63
 8001cdc:	08001e63 	.word	0x08001e63
 8001ce0:	08001e63 	.word	0x08001e63
 8001ce4:	08001c59 	.word	0x08001c59
 8001ce8:	08001e63 	.word	0x08001e63
 8001cec:	08001e63 	.word	0x08001e63
 8001cf0:	08001b9b 	.word	0x08001b9b
 8001cf4:	08001e63 	.word	0x08001e63
 8001cf8:	08001e63 	.word	0x08001e63
 8001cfc:	08001e63 	.word	0x08001e63
 8001d00:	08001e63 	.word	0x08001e63
 8001d04:	08001e63 	.word	0x08001e63
 8001d08:	08001e63 	.word	0x08001e63
 8001d0c:	08001e63 	.word	0x08001e63
 8001d10:	08001e63 	.word	0x08001e63
 8001d14:	08001e63 	.word	0x08001e63
 8001d18:	08001e63 	.word	0x08001e63
 8001d1c:	08001dd1 	.word	0x08001dd1
 8001d20:	08001df3 	.word	0x08001df3
 8001d24:	08001e63 	.word	0x08001e63
 8001d28:	08001e63 	.word	0x08001e63
 8001d2c:	08001e63 	.word	0x08001e63
 8001d30:	08001e63 	.word	0x08001e63
 8001d34:	08001df3 	.word	0x08001df3
 8001d38:	08001e63 	.word	0x08001e63
 8001d3c:	08001e63 	.word	0x08001e63
 8001d40:	08001e63 	.word	0x08001e63
 8001d44:	08001e63 	.word	0x08001e63
 8001d48:	08001e63 	.word	0x08001e63
 8001d4c:	08001e6b 	.word	0x08001e6b
 8001d50:	08001b9b 	.word	0x08001b9b
 8001d54:	08001e63 	.word	0x08001e63
 8001d58:	08001e63 	.word	0x08001e63
 8001d5c:	08001d8b 	.word	0x08001d8b
 8001d60:	08001e63 	.word	0x08001e63
 8001d64:	08001c59 	.word	0x08001c59
 8001d68:	08001e63 	.word	0x08001e63
 8001d6c:	08001e63 	.word	0x08001e63
 8001d70:	08001b9b 	.word	0x08001b9b
      c = *fmt++;
 8001d74:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f43f af68 	beq.w	8001c4c <myPrintf+0x1bc>
      if (c == '*') {
 8001d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d7e:	d177      	bne.n	8001e70 <myPrintf+0x3e0>
        c = *fmt++;
 8001d80:	7863      	ldrb	r3, [r4, #1]
        precision = va_arg(ap, int);
 8001d82:	f85a 2b04 	ldr.w	r2, [sl], #4
        c = *fmt++;
 8001d86:	3402      	adds	r4, #2
 8001d88:	e6c5      	b.n	8001b16 <myPrintf+0x86>
      if ((s = va_arg(ap, char *)) == 0) {
 8001d8a:	f85a 8b04 	ldr.w	r8, [sl], #4
 8001d8e:	f1b8 0f00 	cmp.w	r8, #0
 8001d92:	f000 80bf 	beq.w	8001f14 <myPrintf+0x484>
 8001d96:	f898 3000 	ldrb.w	r3, [r8]
      if (precision == 0) {
 8001d9a:	2a00      	cmp	r2, #0
 8001d9c:	f040 80ad 	bne.w	8001efa <myPrintf+0x46a>
      for (p = s; *p && (--precision >= 0); p++)
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ae 	beq.w	8001f02 <myPrintf+0x472>
 8001da6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001daa:	4646      	mov	r6, r8
 8001dac:	e004      	b.n	8001db8 <myPrintf+0x328>
 8001dae:	bf00      	nop
 8001db0:	20000800 	.word	0x20000800
 8001db4:	42d3      	cmn	r3, r2
 8001db6:	d405      	bmi.n	8001dc4 <myPrintf+0x334>
 8001db8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8001dbc:	eba8 0306 	sub.w	r3, r8, r6
 8001dc0:	2f00      	cmp	r7, #0
 8001dc2:	d1f7      	bne.n	8001db4 <myPrintf+0x324>
 8001dc4:	eba6 0608 	sub.w	r6, r6, r8
 8001dc8:	1b89      	subs	r1, r1, r6
      filler = ' ';
 8001dca:	2720      	movs	r7, #32
 8001dcc:	3e01      	subs	r6, #1
 8001dce:	e710      	b.n	8001bf2 <myPrintf+0x162>
      *p++ = va_arg(ap, int);
 8001dd0:	f85a 3b04 	ldr.w	r3, [sl], #4
 8001dd4:	f88d 300c 	strb.w	r3, [sp, #12]
 8001dd8:	3901      	subs	r1, #1
      filler = ' ';
 8001dda:	2720      	movs	r7, #32
 8001ddc:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8001de0:	b918      	cbnz	r0, 8001dea <myPrintf+0x35a>
    if (width < 0) {
 8001de2:	2900      	cmp	r1, #0
      width = -width;
 8001de4:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8001de8:	dc72      	bgt.n	8001ed0 <myPrintf+0x440>
    if (left_align == false) {
 8001dea:	2600      	movs	r6, #0
 8001dec:	f10d 080c 	add.w	r8, sp, #12
 8001df0:	e709      	b.n	8001c06 <myPrintf+0x176>
        l = va_arg(ap, int);
 8001df2:	f85a cb04 	ldr.w	ip, [sl], #4
      if (l < 0) {
 8001df6:	f1bc 0f00 	cmp.w	ip, #0
 8001dfa:	db5f      	blt.n	8001ebc <myPrintf+0x42c>
        if (do_sign) {
 8001dfc:	f1be 0f00 	cmp.w	lr, #0
 8001e00:	f000 808e 	beq.w	8001f20 <myPrintf+0x490>
          *p++ = '+';
 8001e04:	232b      	movs	r3, #43	; 0x2b
 8001e06:	f88d 300c 	strb.w	r3, [sp, #12]
 8001e0a:	f10d 060d 	add.w	r6, sp, #13
 8001e0e:	f10d 080c 	add.w	r8, sp, #12
  q = p + MAX_FILLER;
 8001e12:	f106 030b 	add.w	r3, r6, #11
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	461a      	mov	r2, r3
    i = (int)(l % radix);
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <myPrintf+0x4a8>)
 8001e1c:	fba3 e30c 	umull	lr, r3, r3, ip
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8001e26:	469e      	mov	lr, r3
 8001e28:	ebac 0349 	sub.w	r3, ip, r9, lsl #1
    i += '0';
 8001e2c:	3330      	adds	r3, #48	; 0x30
    i = (int)(l % radix);
 8001e2e:	46e1      	mov	r9, ip
    *--q = i;
 8001e30:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 8001e32:	f1b9 0f09 	cmp.w	r9, #9
    *--q = i;
 8001e36:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 8001e3a:	46f4      	mov	ip, lr
  } while ((ll /= radix) != 0);
 8001e3c:	dced      	bgt.n	8001e1a <myPrintf+0x38a>
 8001e3e:	469e      	mov	lr, r3
  i = (int)(p + MAX_FILLER - q);
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	eba3 0c02 	sub.w	ip, r3, r2
 8001e46:	44b4      	add	ip, r6
 8001e48:	4673      	mov	r3, lr
 8001e4a:	e001      	b.n	8001e50 <myPrintf+0x3c0>
 8001e4c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 8001e50:	f806 3b01 	strb.w	r3, [r6], #1
  while (--i);
 8001e54:	4566      	cmp	r6, ip
 8001e56:	d1f9      	bne.n	8001e4c <myPrintf+0x3bc>
 8001e58:	eba6 0608 	sub.w	r6, r6, r8
 8001e5c:	1b89      	subs	r1, r1, r6
 8001e5e:	3e01      	subs	r6, #1
 8001e60:	e6c7      	b.n	8001bf2 <myPrintf+0x162>
      *p++ = c;
 8001e62:	f88d 300c 	strb.w	r3, [sp, #12]
 8001e66:	3901      	subs	r1, #1
 8001e68:	e7b8      	b.n	8001ddc <myPrintf+0x34c>
      if (c == 0) {
 8001e6a:	f04f 0e08 	mov.w	lr, #8
 8001e6e:	e696      	b.n	8001b9e <myPrintf+0x10e>
      c = *fmt++;
 8001e70:	3401      	adds	r4, #1
    precision = 0;
 8001e72:	2200      	movs	r2, #0
        while (c >= '0' && c <= '9') {
 8001e74:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8001e78:	b2f6      	uxtb	r6, r6
 8001e7a:	2e09      	cmp	r6, #9
          precision = precision * 10 + c;
 8001e7c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
        while (c >= '0' && c <= '9') {
 8001e80:	f63f ae49 	bhi.w	8001b16 <myPrintf+0x86>
          c = *fmt++;
 8001e84:	f814 3b01 	ldrb.w	r3, [r4], #1
          precision = precision * 10 + c;
 8001e88:	eb06 024c 	add.w	r2, r6, ip, lsl #1
          if (c == 0) {
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f1      	bne.n	8001e74 <myPrintf+0x3e4>
 8001e90:	e6dc      	b.n	8001c4c <myPrintf+0x1bc>
      width = -width;
 8001e92:	f8cd 9004 	str.w	r9, [sp, #4]
      if (*s == '-' && filler == '0') {
 8001e96:	f898 1000 	ldrb.w	r1, [r8]
 8001e9a:	292d      	cmp	r1, #45	; 0x2d
 8001e9c:	d021      	beq.n	8001ee2 <myPrintf+0x452>
        streamPut(chp, (uint8_t)filler);
 8001e9e:	682b      	ldr	r3, [r5, #0]
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	4798      	blx	r3
      } while (++width != 0);
 8001ea8:	f119 0901 	adds.w	r9, r9, #1
 8001eac:	d1f7      	bne.n	8001e9e <myPrintf+0x40e>
 8001eae:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8001eb0:	2e00      	cmp	r6, #0
 8001eb2:	ebab 0b03 	sub.w	fp, fp, r3
 8001eb6:	f6bf aea6 	bge.w	8001c06 <myPrintf+0x176>
 8001eba:	e603      	b.n	8001ac4 <myPrintf+0x34>
        *p++ = '-';
 8001ebc:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001ebe:	f1cc 0c00 	rsb	ip, ip, #0
        *p++ = '-';
 8001ec2:	f88d 300c 	strb.w	r3, [sp, #12]
 8001ec6:	f10d 060d 	add.w	r6, sp, #13
 8001eca:	f10d 080c 	add.w	r8, sp, #12
 8001ece:	e7a0      	b.n	8001e12 <myPrintf+0x382>
      if (*s == '-' && filler == '0') {
 8001ed0:	f89d 100c 	ldrb.w	r1, [sp, #12]
      width = -width;
 8001ed4:	f8cd 9004 	str.w	r9, [sp, #4]
      if (*s == '-' && filler == '0') {
 8001ed8:	292d      	cmp	r1, #45	; 0x2d
    if (width < 0) {
 8001eda:	f10d 080c 	add.w	r8, sp, #12
 8001ede:	4606      	mov	r6, r0
      if (*s == '-' && filler == '0') {
 8001ee0:	d1dd      	bne.n	8001e9e <myPrintf+0x40e>
 8001ee2:	2f30      	cmp	r7, #48	; 0x30
 8001ee4:	d1db      	bne.n	8001e9e <myPrintf+0x40e>
        streamPut(chp, (uint8_t)*s++);
 8001ee6:	682a      	ldr	r2, [r5, #0]
 8001ee8:	4814      	ldr	r0, [pc, #80]	; (8001f3c <myPrintf+0x4ac>)
 8001eea:	68d2      	ldr	r2, [r2, #12]
 8001eec:	4790      	blx	r2
 8001eee:	f108 0801 	add.w	r8, r8, #1
        n++;
 8001ef2:	f10b 0b01 	add.w	fp, fp, #1
 8001ef6:	3e01      	subs	r6, #1
 8001ef8:	e7d1      	b.n	8001e9e <myPrintf+0x40e>
      for (p = s; *p && (--precision >= 0); p++)
 8001efa:	b113      	cbz	r3, 8001f02 <myPrintf+0x472>
 8001efc:	3a01      	subs	r2, #1
 8001efe:	f57f af54 	bpl.w	8001daa <myPrintf+0x31a>
 8001f02:	ea21 79e1 	bic.w	r9, r1, r1, asr #31
    if (left_align == false) {
 8001f06:	b918      	cbnz	r0, 8001f10 <myPrintf+0x480>
    if (width < 0) {
 8001f08:	2900      	cmp	r1, #0
      width = -width;
 8001f0a:	f1c9 0900 	rsb	r9, r9, #0
    if (width < 0) {
 8001f0e:	dc0d      	bgt.n	8001f2c <myPrintf+0x49c>
    if (left_align == false) {
 8001f10:	2720      	movs	r7, #32
 8001f12:	e688      	b.n	8001c26 <myPrintf+0x196>
        s = "(null)";
 8001f14:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001f40 <myPrintf+0x4b0>
      if (precision == 0) {
 8001f18:	2a00      	cmp	r2, #0
 8001f1a:	f43f af44 	beq.w	8001da6 <myPrintf+0x316>
 8001f1e:	e7ed      	b.n	8001efc <myPrintf+0x46c>
    p = tmpbuf;
 8001f20:	f10d 080c 	add.w	r8, sp, #12
 8001f24:	4646      	mov	r6, r8
 8001f26:	e774      	b.n	8001e12 <myPrintf+0x382>
  int n = 0;
 8001f28:	468b      	mov	fp, r1
  return formatted_bytes;
 8001f2a:	e68f      	b.n	8001c4c <myPrintf+0x1bc>
      width = -width;
 8001f2c:	f8cd 9004 	str.w	r9, [sp, #4]
    if (width < 0) {
 8001f30:	2720      	movs	r7, #32
 8001f32:	f04f 36ff 	mov.w	r6, #4294967295
 8001f36:	e7ae      	b.n	8001e96 <myPrintf+0x406>
 8001f38:	cccccccd 	.word	0xcccccccd
 8001f3c:	20000800 	.word	0x20000800
 8001f40:	08003b20 	.word	0x08003b20
	...

08001f50 <wifi_cb>:
static uint8_t scan_request_index = 0;
/** Number of APs found. */
static uint8_t num_founded_ap = 0;

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
 8001f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (u8MsgType) {
 8001f52:	282c      	cmp	r0, #44	; 0x2c
{
 8001f54:	b09f      	sub	sp, #124	; 0x7c
 8001f56:	460c      	mov	r4, r1
    switch (u8MsgType) {
 8001f58:	d02e      	beq.n	8001fb8 <wifi_cb+0x68>
 8001f5a:	d81e      	bhi.n	8001f9a <wifi_cb+0x4a>
 8001f5c:	2811      	cmp	r0, #17
 8001f5e:	d034      	beq.n	8001fca <wifi_cb+0x7a>
 8001f60:	2813      	cmp	r0, #19
 8001f62:	d127      	bne.n	8001fb4 <wifi_cb+0x64>

    case M2M_WIFI_RESP_SCAN_RESULT:
    {
        tstrM2mWifiscanResult *pstrScanResult = (tstrM2mWifiscanResult *)pvMsg;
        uint16_t demo_ssid_len;
        uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 8001f64:	f101 060a 	add.w	r6, r1, #10
 8001f68:	4630      	mov	r0, r6
 8001f6a:	f7fe fa69 	bl	8000440 <strlen>
        /* display founded AP. */
        myPrintf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
 8001f6e:	4f54      	ldr	r7, [pc, #336]	; (80020c0 <wifi_cb+0x170>)
        uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
 8001f70:	4605      	mov	r5, r0
        myPrintf("[%d] SSID:%s\r\n", scan_request_index, pstrScanResult->au8SSID);
 8001f72:	7839      	ldrb	r1, [r7, #0]
 8001f74:	4853      	ldr	r0, [pc, #332]	; (80020c4 <wifi_cb+0x174>)
 8001f76:	4632      	mov	r2, r6
 8001f78:	f7ff fd8a 	bl	8001a90 <myPrintf>
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
 8001f7c:	4b52      	ldr	r3, [pc, #328]	; (80020c8 <wifi_cb+0x178>)
        num_founded_ap = m2m_wifi_get_num_ap_found();
        if (scan_ssid_len) {
            /* check same SSID. */
            demo_ssid_len = strlen((const char *)MAIN_WLAN_SSID);
            if
            (
 8001f7e:	b2ad      	uxth	r5, r5
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2d04      	cmp	r5, #4
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	d034      	beq.n	8001ff2 <wifi_cb+0xa2>
                        M2M_WIFI_CH_ALL);
                break;
            }
        }

        if (scan_request_index < num_founded_ap) {
 8001f88:	7838      	ldrb	r0, [r7, #0]
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d229      	bcs.n	8001fe2 <wifi_cb+0x92>
            m2m_wifi_req_scan_result(scan_request_index);
 8001f8e:	f7ff fc47 	bl	8001820 <m2m_wifi_req_scan_result>
            scan_request_index++;
 8001f92:	783b      	ldrb	r3, [r7, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	703b      	strb	r3, [r7, #0]
 8001f98:	e00c      	b.n	8001fb4 <wifi_cb+0x64>
    switch (u8MsgType) {
 8001f9a:	2832      	cmp	r0, #50	; 0x32
 8001f9c:	d10a      	bne.n	8001fb4 <wifi_cb+0x64>
    }

    case M2M_WIFI_REQ_DHCP_CONF:
    {
        uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
        myPrintf("Wi-Fi connected\r\n");
 8001f9e:	484b      	ldr	r0, [pc, #300]	; (80020cc <wifi_cb+0x17c>)
 8001fa0:	f7ff fd76 	bl	8001a90 <myPrintf>
        myPrintf("Wi-Fi IP is %u.%u.%u.%u\r\n",
 8001fa4:	78e3      	ldrb	r3, [r4, #3]
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	78a3      	ldrb	r3, [r4, #2]
 8001faa:	7862      	ldrb	r2, [r4, #1]
 8001fac:	7821      	ldrb	r1, [r4, #0]
 8001fae:	4848      	ldr	r0, [pc, #288]	; (80020d0 <wifi_cb+0x180>)
 8001fb0:	f7ff fd6e 	bl	8001a90 <myPrintf>
    default:
    {
        break;
    }
    }
}
 8001fb4:	b01f      	add	sp, #124	; 0x7c
 8001fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8001fb8:	780b      	ldrb	r3, [r1, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1fa      	bne.n	8001fb4 <wifi_cb+0x64>
            myPrintf("Wi-Fi disconnected\r\n");
 8001fbe:	4845      	ldr	r0, [pc, #276]	; (80020d4 <wifi_cb+0x184>)
 8001fc0:	f7ff fd66 	bl	8001a90 <myPrintf>
            m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8001fc4:	f7ff fc14 	bl	80017f0 <m2m_wifi_request_scan.constprop.0>
 8001fc8:	e7f4      	b.n	8001fb4 <wifi_cb+0x64>
        scan_request_index = 0;
 8001fca:	4c3d      	ldr	r4, [pc, #244]	; (80020c0 <wifi_cb+0x170>)
        if (pstrInfo->u8NumofCh >= 1) {
 8001fcc:	780b      	ldrb	r3, [r1, #0]
        scan_request_index = 0;
 8001fce:	2000      	movs	r0, #0
 8001fd0:	7020      	strb	r0, [r4, #0]
        if (pstrInfo->u8NumofCh >= 1) {
 8001fd2:	b153      	cbz	r3, 8001fea <wifi_cb+0x9a>
            m2m_wifi_req_scan_result(scan_request_index);
 8001fd4:	f7ff fc24 	bl	8001820 <m2m_wifi_req_scan_result>
            scan_request_index++;
 8001fd8:	7823      	ldrb	r3, [r4, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	7023      	strb	r3, [r4, #0]
}
 8001fde:	b01f      	add	sp, #124	; 0x7c
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            myPrintf("can not find AP %s\r\n", MAIN_WLAN_SSID);
 8001fe2:	493d      	ldr	r1, [pc, #244]	; (80020d8 <wifi_cb+0x188>)
 8001fe4:	483d      	ldr	r0, [pc, #244]	; (80020dc <wifi_cb+0x18c>)
 8001fe6:	f7ff fd53 	bl	8001a90 <myPrintf>
            m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8001fea:	f7ff fc01 	bl	80017f0 <m2m_wifi_request_scan.constprop.0>
}
 8001fee:	b01f      	add	sp, #124	; 0x7c
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                (!memcmp(pstrScanResult->au8SSID, (uint8_t *)MAIN_WLAN_SSID, demo_ssid_len))
 8001ff2:	7aa2      	ldrb	r2, [r4, #10]
 8001ff4:	2a44      	cmp	r2, #68	; 0x44
 8001ff6:	d1c7      	bne.n	8001f88 <wifi_cb+0x38>
 8001ff8:	7ae2      	ldrb	r2, [r4, #11]
 8001ffa:	2a49      	cmp	r2, #73	; 0x49
 8001ffc:	d1c4      	bne.n	8001f88 <wifi_cb+0x38>
 8001ffe:	7b22      	ldrb	r2, [r4, #12]
 8002000:	2a41      	cmp	r2, #65	; 0x41
 8002002:	d1c1      	bne.n	8001f88 <wifi_cb+0x38>
 8002004:	7b62      	ldrb	r2, [r4, #13]
 8002006:	2a53      	cmp	r2, #83	; 0x53
 8002008:	d1be      	bne.n	8001f88 <wifi_cb+0x38>
                myPrintf("Found %s \r\n", MAIN_WLAN_SSID);
 800200a:	4933      	ldr	r1, [pc, #204]	; (80020d8 <wifi_cb+0x188>)
 800200c:	4834      	ldr	r0, [pc, #208]	; (80020e0 <wifi_cb+0x190>)
 800200e:	f7ff fd3f 	bl	8001a90 <myPrintf>
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
 8002012:	4834      	ldr	r0, [pc, #208]	; (80020e4 <wifi_cb+0x194>)
 8002014:	2269      	movs	r2, #105	; 0x69
 8002016:	4601      	mov	r1, r0
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	e001      	b.n	8002020 <wifi_cb+0xd0>
 800201c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
	while(*pcStr)
	{
		u16StrLen ++;
 8002020:	3301      	adds	r3, #1
 8002022:	b29b      	uxth	r3, r3
	while(*pcStr)
 8002024:	2a00      	cmp	r2, #0
 8002026:	d1f9      	bne.n	800201c <wifi_cb+0xcc>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d033      	beq.n	8002094 <wifi_cb+0x144>
 800202c:	492a      	ldr	r1, [pc, #168]	; (80020d8 <wifi_cb+0x188>)
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 800202e:	2244      	movs	r2, #68	; 0x44
 8002030:	f10d 0352 	add.w	r3, sp, #82	; 0x52
 8002034:	f10d 0457 	add.w	r4, sp, #87	; 0x57
 8002038:	e001      	b.n	800203e <wifi_cb+0xee>
 800203a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		*pDst = *pSrc;
 800203e:	f803 2b01 	strb.w	r2, [r3], #1
	}while(--sz);
 8002042:	42a3      	cmp	r3, r4
 8002044:	d1f9      	bne.n	800203a <wifi_cb+0xea>
	strConnect.au8SSID[u8SsidLen]	= 0;
 8002046:	2200      	movs	r2, #0
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 8002048:	21ff      	movs	r1, #255	; 0xff
	pstrAuthInfo->u8SecType		= u8SecType;
 800204a:	2302      	movs	r3, #2
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
 800204c:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
	strConnect.au8SSID[u8SsidLen]	= 0;
 8002050:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
 8002054:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
	pstrAuthInfo->u8SecType		= u8SecType;
 8002058:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 800205c:	2169      	movs	r1, #105	; 0x69
 800205e:	e002      	b.n	8002066 <wifi_cb+0x116>
 8002060:	f810 1f01 	ldrb.w	r1, [r0, #1]!
		u16StrLen ++;
 8002064:	461a      	mov	r2, r3
 8002066:	1c53      	adds	r3, r2, #1
 8002068:	b29b      	uxth	r3, r3
	while(*pcStr)
 800206a:	2900      	cmp	r1, #0
 800206c:	d1f8      	bne.n	8002060 <wifi_cb+0x110>
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
 800206e:	2a3f      	cmp	r2, #63	; 0x3f
 8002070:	d8a0      	bhi.n	8001fb4 <wifi_cb+0x64>
	if(sz == 0) return;
 8002072:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <wifi_cb+0x198>)
 8002074:	a903      	add	r1, sp, #12
 8002076:	4413      	add	r3, r2
 8002078:	2064      	movs	r0, #100	; 0x64
 800207a:	e001      	b.n	8002080 <wifi_cb+0x130>
 800207c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
		*pDst = *pSrc;
 8002080:	f801 0b01 	strb.w	r0, [r1], #1
	}while(--sz);
 8002084:	4293      	cmp	r3, r2
 8002086:	d1f9      	bne.n	800207c <wifi_cb+0x12c>
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
 8002088:	a903      	add	r1, sp, #12
 800208a:	226c      	movs	r2, #108	; 0x6c
 800208c:	2028      	movs	r0, #40	; 0x28
 800208e:	f7ff fa97 	bl	80015c0 <hif_send.constprop.0>
 8002092:	e78f      	b.n	8001fb4 <wifi_cb+0x64>
 8002094:	4914      	ldr	r1, [pc, #80]	; (80020e8 <wifi_cb+0x198>)
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 8002096:	2364      	movs	r3, #100	; 0x64
 8002098:	f101 053f 	add.w	r5, r1, #63	; 0x3f
 800209c:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
 80020a0:	2a06      	cmp	r2, #6
 80020a2:	f1a3 0447 	sub.w	r4, r3, #71	; 0x47
 80020a6:	d985      	bls.n	8001fb4 <wifi_cb+0x64>
 80020a8:	2c19      	cmp	r4, #25
 80020aa:	d983      	bls.n	8001fb4 <wifi_cb+0x64>
 80020ac:	2b66      	cmp	r3, #102	; 0x66
 80020ae:	d881      	bhi.n	8001fb4 <wifi_cb+0x64>
			while(i < (M2M_MAX_PSK_LEN-1))
 80020b0:	428d      	cmp	r5, r1
 80020b2:	d0bb      	beq.n	800202c <wifi_cb+0xdc>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
 80020b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80020b8:	2b2f      	cmp	r3, #47	; 0x2f
 80020ba:	d8ef      	bhi.n	800209c <wifi_cb+0x14c>
 80020bc:	e77a      	b.n	8001fb4 <wifi_cb+0x64>
 80020be:	bf00      	nop
 80020c0:	20000c23 	.word	0x20000c23
 80020c4:	08003b28 	.word	0x08003b28
 80020c8:	20000c20 	.word	0x20000c20
 80020cc:	08003b88 	.word	0x08003b88
 80020d0:	08003b9c 	.word	0x08003b9c
 80020d4:	08003b70 	.word	0x08003b70
 80020d8:	08003b38 	.word	0x08003b38
 80020dc:	08003b58 	.word	0x08003b58
 80020e0:	08003b40 	.word	0x08003b40
 80020e4:	08003b4d 	.word	0x08003b4d
 80020e8:	08003b4c 	.word	0x08003b4c
 80020ec:	00000000 	.word	0x00000000

080020f0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	b085      	sub	sp, #20
 80020f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 80020fa:	69c7      	ldr	r7, [r0, #28]
 80020fc:	f04f 0920 	mov.w	r9, #32
 8002100:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8002104:	b3a2      	cbz	r2, 8002170 <oqWriteTimeout+0x80>
 8002106:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800210a:	4604      	mov	r4, r0
 800210c:	460e      	mov	r6, r1
 800210e:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 8002112:	68a2      	ldr	r2, [r4, #8]
 8002114:	4593      	cmp	fp, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002116:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 800211a:	bf8c      	ite	hi
 800211c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 800211e:	465d      	movls	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002120:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002124:	45a8      	cmp	r8, r5
 8002126:	d844      	bhi.n	80021b2 <oqWriteTimeout+0xc2>
  else if (n > s1) {
 8002128:	d229      	bcs.n	800217e <oqWriteTimeout+0x8e>
    s2 = n - s1;
 800212a:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 800212e:	4642      	mov	r2, r8
 8002130:	4631      	mov	r1, r6
    s2 = n - s1;
 8002132:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8002134:	f7fe f8ea 	bl	800030c <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8002138:	eb06 0108 	add.w	r1, r6, r8
 800213c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002140:	68e0      	ldr	r0, [r4, #12]
 8002142:	4642      	mov	r2, r8
 8002144:	f7fe f8e2 	bl	800030c <memcpy>
  oqp->q_counter -= n;
 8002148:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 800214a:	68e1      	ldr	r1, [r4, #12]
 800214c:	4643      	mov	r3, r8
 800214e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002150:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002152:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8002154:	60a2      	str	r2, [r4, #8]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002156:	b10f      	cbz	r7, 800215c <oqWriteTimeout+0x6c>
        nfy(oqp);
 8002158:	4620      	mov	r0, r4
 800215a:	47b8      	blx	r7
 800215c:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8002160:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002164:	442e      	add	r6, r5
 8002166:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800216a:	f1bb 0f00 	cmp.w	fp, #0
 800216e:	d1d0      	bne.n	8002112 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8002170:	9803      	ldr	r0, [sp, #12]
 8002172:	2300      	movs	r3, #0
 8002174:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002178:	b005      	add	sp, #20
 800217a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800217e:	462a      	mov	r2, r5
 8002180:	4631      	mov	r1, r6
 8002182:	f7fe f8c3 	bl	800030c <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002186:	68e2      	ldr	r2, [r4, #12]
 8002188:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 800218a:	68a2      	ldr	r2, [r4, #8]
 800218c:	1b52      	subs	r2, r2, r5
 800218e:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002190:	2d00      	cmp	r5, #0
 8002192:	d1e0      	bne.n	8002156 <oqWriteTimeout+0x66>
 8002194:	9902      	ldr	r1, [sp, #8]
 8002196:	4620      	mov	r0, r4
 8002198:	f7fe fd0a 	bl	8000bb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800219c:	2800      	cmp	r0, #0
 800219e:	d0b8      	beq.n	8002112 <oqWriteTimeout+0x22>
 80021a0:	9b03      	ldr	r3, [sp, #12]
 80021a2:	eba3 000b 	sub.w	r0, r3, fp
 80021a6:	2300      	movs	r3, #0
 80021a8:	f383 8811 	msr	BASEPRI, r3
}
 80021ac:	b005      	add	sp, #20
 80021ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80021b2:	462a      	mov	r2, r5
 80021b4:	4631      	mov	r1, r6
 80021b6:	f7fe f8a9 	bl	800030c <memcpy>
    oqp->q_wrptr += n;
 80021ba:	6962      	ldr	r2, [r4, #20]
 80021bc:	442a      	add	r2, r5
 80021be:	6162      	str	r2, [r4, #20]
 80021c0:	e7e3      	b.n	800218a <oqWriteTimeout+0x9a>
 80021c2:	bf00      	nop
	...

080021d0 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80021d0:	3030      	adds	r0, #48	; 0x30
 80021d2:	f7ff bf8d 	b.w	80020f0 <oqWriteTimeout>
 80021d6:	bf00      	nop
	...

080021e0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80021e0:	3030      	adds	r0, #48	; 0x30
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	f7ff bf83 	b.w	80020f0 <oqWriteTimeout>
 80021ea:	bf00      	nop
 80021ec:	0000      	movs	r0, r0
	...

080021f0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80021f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f4:	b085      	sub	sp, #20
 80021f6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 80021fa:	69c7      	ldr	r7, [r0, #28]
 80021fc:	f04f 0920 	mov.w	r9, #32
 8002200:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002204:	2a00      	cmp	r2, #0
 8002206:	d034      	beq.n	8002272 <iqReadTimeout+0x82>
 8002208:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800220c:	4604      	mov	r4, r0
 800220e:	460e      	mov	r6, r1
 8002210:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 8002214:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002216:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8002218:	4593      	cmp	fp, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800221a:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 800221c:	bf8c      	ite	hi
 800221e:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8002220:	465d      	movls	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002222:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002226:	45a8      	cmp	r8, r5
 8002228:	d844      	bhi.n	80022b4 <iqReadTimeout+0xc4>
  else if (n > s1) {
 800222a:	d229      	bcs.n	8002280 <iqReadTimeout+0x90>
    s2 = n - s1;
 800222c:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002230:	4642      	mov	r2, r8
 8002232:	4630      	mov	r0, r6
    s2 = n - s1;
 8002234:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8002236:	f7fe f869 	bl	800030c <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800223a:	eb06 0008 	add.w	r0, r6, r8
 800223e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002242:	68e1      	ldr	r1, [r4, #12]
 8002244:	4642      	mov	r2, r8
 8002246:	f7fe f861 	bl	800030c <memcpy>
  iqp->q_counter -= n;
 800224a:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 800224c:	68e1      	ldr	r1, [r4, #12]
 800224e:	4643      	mov	r3, r8
 8002250:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002252:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002254:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 8002256:	60a2      	str	r2, [r4, #8]
      if (nfy != NULL) {
 8002258:	b10f      	cbz	r7, 800225e <iqReadTimeout+0x6e>
        nfy(iqp);
 800225a:	4620      	mov	r0, r4
 800225c:	47b8      	blx	r7
 800225e:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 8002262:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002266:	442e      	add	r6, r5
 8002268:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 800226c:	f1bb 0f00 	cmp.w	fp, #0
 8002270:	d1d0      	bne.n	8002214 <iqReadTimeout+0x24>
  if (n > iqGetFullI(iqp)) {
 8002272:	9803      	ldr	r0, [sp, #12]
 8002274:	2300      	movs	r3, #0
 8002276:	f383 8811 	msr	BASEPRI, r3
}
 800227a:	b005      	add	sp, #20
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8002280:	462a      	mov	r2, r5
 8002282:	4630      	mov	r0, r6
 8002284:	f7fe f842 	bl	800030c <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002288:	68e2      	ldr	r2, [r4, #12]
 800228a:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 800228c:	68a2      	ldr	r2, [r4, #8]
 800228e:	1b52      	subs	r2, r2, r5
 8002290:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8002292:	2d00      	cmp	r5, #0
 8002294:	d1e0      	bne.n	8002258 <iqReadTimeout+0x68>
 8002296:	9902      	ldr	r1, [sp, #8]
 8002298:	4620      	mov	r0, r4
 800229a:	f7fe fc89 	bl	8000bb0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800229e:	2800      	cmp	r0, #0
 80022a0:	d0b8      	beq.n	8002214 <iqReadTimeout+0x24>
 80022a2:	9b03      	ldr	r3, [sp, #12]
 80022a4:	eba3 000b 	sub.w	r0, r3, fp
 80022a8:	2300      	movs	r3, #0
 80022aa:	f383 8811 	msr	BASEPRI, r3
}
 80022ae:	b005      	add	sp, #20
 80022b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80022b4:	462a      	mov	r2, r5
 80022b6:	4630      	mov	r0, r6
 80022b8:	f7fe f828 	bl	800030c <memcpy>
    iqp->q_rdptr += n;
 80022bc:	69a2      	ldr	r2, [r4, #24]
 80022be:	442a      	add	r2, r5
 80022c0:	61a2      	str	r2, [r4, #24]
 80022c2:	e7e3      	b.n	800228c <iqReadTimeout+0x9c>
	...

080022d0 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80022d0:	300c      	adds	r0, #12
 80022d2:	f7ff bf8d 	b.w	80021f0 <iqReadTimeout>
 80022d6:	bf00      	nop
	...

080022e0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80022e0:	300c      	adds	r0, #12
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	f7ff bf83 	b.w	80021f0 <iqReadTimeout>
 80022ea:	bf00      	nop
 80022ec:	0000      	movs	r0, r0
	...

080022f0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <main+0x88>)
  PWR->CR |= PWR_CR_DBP;
 80022f2:	4922      	ldr	r1, [pc, #136]	; (800237c <main+0x8c>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	f062 0287 	orn	r2, r2, #135	; 0x87


/*
 * Application entry point.
 */
int main(void) {
 80022fa:	b580      	push	{r7, lr}
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	f002 0287 	and.w	r2, r2, #135	; 0x87
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	691a      	ldr	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	f062 5280 	orn	r2, r2, #268435456	; 0x10000000
 800230e:	621a      	str	r2, [r3, #32]
 8002310:	6a1a      	ldr	r2, [r3, #32]
 8002312:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002316:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800231c:	6a18      	ldr	r0, [r3, #32]
  rccResetAPB2(~0);
 800231e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
 8002322:	2000      	movs	r0, #0
 8002324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002326:	6258      	str	r0, [r3, #36]	; 0x24
 8002328:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 800232a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
 8002332:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002338:	661a      	str	r2, [r3, #96]	; 0x60
 800233a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 800233c:	680a      	ldr	r2, [r1, #0]
 800233e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002342:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002346:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800234a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800234e:	b098      	sub	sp, #96	; 0x60
 8002350:	d003      	beq.n	800235a <main+0x6a>
    RCC->BDCR = RCC_BDCR_BDRST;
 8002352:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002356:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002358:	6718      	str	r0, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800235a:	4d08      	ldr	r5, [pc, #32]	; (800237c <main+0x8c>)
  dma.allocated_mask = 0U;
 800235c:	4c08      	ldr	r4, [pc, #32]	; (8002380 <main+0x90>)
 800235e:	6869      	ldr	r1, [r5, #4]
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <main+0x94>)
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <main+0x98>)
 8002364:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002368:	2200      	movs	r2, #0
 800236a:	6069      	str	r1, [r5, #4]
 800236c:	4621      	mov	r1, r4
 800236e:	6022      	str	r2, [r4, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002370:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8002374:	e00c      	b.n	8002390 <main+0xa0>
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40007000 	.word	0x40007000
 8002380:	20000b70 	.word	0x20000b70
 8002384:	08003d10 	.word	0x08003d10
 8002388:	40026010 	.word	0x40026010
 800238c:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002390:	6002      	str	r2, [r0, #0]
    dma.streams[i].func = NULL;
 8002392:	330c      	adds	r3, #12
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002394:	42a3      	cmp	r3, r4
    dma.streams[i].func = NULL;
 8002396:	604a      	str	r2, [r1, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002398:	f101 0108 	add.w	r1, r1, #8
 800239c:	d1f6      	bne.n	800238c <main+0x9c>
  DMA1->LIFCR = 0xFFFFFFFFU;
 800239e:	4cc9      	ldr	r4, [pc, #804]	; (80026c4 <main+0x3d4>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023a0:	49c9      	ldr	r1, [pc, #804]	; (80026c8 <main+0x3d8>)
  DMA2->LIFCR = 0xFFFFFFFFU;
 80023a2:	4dca      	ldr	r5, [pc, #808]	; (80026cc <main+0x3dc>)
 80023a4:	4aca      	ldr	r2, [pc, #808]	; (80026d0 <main+0x3e0>)
  DMA1->LIFCR = 0xFFFFFFFFU;
 80023a6:	f04f 30ff 	mov.w	r0, #4294967295
 80023aa:	60a0      	str	r0, [r4, #8]
 80023ac:	2360      	movs	r3, #96	; 0x60
  DMA1->HIFCR = 0xFFFFFFFFU;
 80023ae:	60e0      	str	r0, [r4, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023b0:	2440      	movs	r4, #64	; 0x40
  DMA2->LIFCR = 0xFFFFFFFFU;
 80023b2:	60a8      	str	r0, [r5, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80023b4:	60e8      	str	r0, [r5, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023b6:	f881 3306 	strb.w	r3, [r1, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023be:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
 80023c2:	2580      	movs	r5, #128	; 0x80
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023c4:	600c      	str	r4, [r1, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023c6:	f44f 7400 	mov.w	r4, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023ca:	f881 3307 	strb.w	r3, [r1, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023ce:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023d2:	600d      	str	r5, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023d4:	f881 3308 	strb.w	r3, [r1, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023d8:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80023dc:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023e0:	6008      	str	r0, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023e2:	f881 3309 	strb.w	r3, [r1, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023e6:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023ea:	600c      	str	r4, [r1, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023ec:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023f0:	f881 330a 	strb.w	r3, [r1, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023f4:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80023f8:	600d      	str	r5, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80023fa:	f881 3317 	strb.w	r3, [r1, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80023fe:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002402:	600c      	str	r4, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002404:	f881 3328 	strb.w	r3, [r1, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002408:	1814      	adds	r4, r2, r0
 800240a:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
    _pal_init_event(i);
 800240e:	2300      	movs	r3, #0
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002410:	6048      	str	r0, [r1, #4]
  tqp->prev = (thread_t *)tqp;
 8002412:	e9c2 2200 	strd	r2, r2, [r2]
 8002416:	e9c2 3302 	strd	r3, r3, [r2, #8]
  for (i = 0; i < 16; i++) {
 800241a:	3210      	adds	r2, #16
 800241c:	4294      	cmp	r4, r2
 800241e:	d1f8      	bne.n	8002412 <main+0x122>
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8002420:	4eac      	ldr	r6, [pc, #688]	; (80026d4 <main+0x3e4>)
 8002422:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 8002718 <main+0x428>
  spip->state = SPI_STOP;
 8002426:	4dac      	ldr	r5, [pc, #688]	; (80026d8 <main+0x3e8>)
  oqp->q_notify  = onfy;
 8002428:	4cac      	ldr	r4, [pc, #688]	; (80026dc <main+0x3ec>)
  SD1.usart = USART1;
#endif

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2, NULL, notify2);
  SD2.usart = USART2;
 800242a:	48ad      	ldr	r0, [pc, #692]	; (80026e0 <main+0x3f0>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800242c:	4aad      	ldr	r2, [pc, #692]	; (80026e4 <main+0x3f4>)
  iqp->q_counter = 0;
 800242e:	6173      	str	r3, [r6, #20]
 8002430:	4631      	mov	r1, r6
  oqp->q_counter = size;
 8002432:	2710      	movs	r7, #16
 8002434:	f841 cb04 	str.w	ip, [r1], #4
 8002438:	63b7      	str	r7, [r6, #56]	; 0x38
  oqp->q_notify  = onfy;
 800243a:	64f4      	str	r4, [r6, #76]	; 0x4c
  oqp->q_top     = bp + size;
 800243c:	f106 0774 	add.w	r7, r6, #116	; 0x74
  iqp->q_buffer  = bp;
 8002440:	f106 0454 	add.w	r4, r6, #84	; 0x54
 8002444:	6770      	str	r0, [r6, #116]	; 0x74
  iqp->q_top     = bp + size;
 8002446:	f106 0064 	add.w	r0, r6, #100	; 0x64
  iqp->q_wrptr   = bp;
 800244a:	e9c6 4408 	strd	r4, r4, [r6, #32]
  oqp->q_wrptr   = bp;
 800244e:	e9c6 0011 	strd	r0, r0, [r6, #68]	; 0x44
  SPID2.spi       = SPI2;
 8002452:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800271c <main+0x42c>
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8002456:	f8df e2c8 	ldr.w	lr, [pc, #712]	; 8002720 <main+0x430>
  oqp->q_top     = bp + size;
 800245a:	6437      	str	r7, [r6, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 800245c:	f106 0c0c 	add.w	ip, r6, #12
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8002460:	6071      	str	r1, [r6, #4]
 8002462:	f106 0730 	add.w	r7, r6, #48	; 0x30
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8002466:	2101      	movs	r1, #1
  iqp->q_buffer  = bp;
 8002468:	61b4      	str	r4, [r6, #24]
  iqp->q_top     = bp + size;
 800246a:	61f0      	str	r0, [r6, #28]
 800246c:	f105 040c 	add.w	r4, r5, #12
  oqp->q_buffer  = bp;
 8002470:	63f0      	str	r0, [r6, #60]	; 0x3c
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8002472:	489d      	ldr	r0, [pc, #628]	; (80026e8 <main+0x3f8>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8002474:	616b      	str	r3, [r5, #20]
  iqp->q_link    = link;
 8002476:	e9c6 360a 	strd	r3, r6, [r6, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 800247a:	e9c6 cc03 	strd	ip, ip, [r6, #12]
 800247e:	e9c6 770c 	strd	r7, r7, [r6, #48]	; 0x30
  spip->thread = NULL;
 8002482:	e9c5 3301 	strd	r3, r3, [r5, #4]
  SPID2.dmatx     = NULL;
 8002486:	e9c5 3308 	strd	r3, r3, [r5, #32]
 800248a:	e9c5 4403 	strd	r4, r4, [r5, #12]
  SPID2.spi       = SPI2;
 800248e:	f8c5 801c 	str.w	r8, [r5, #28]
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8002492:	f8c5 e028 	str.w	lr, [r5, #40]	; 0x28
 8002496:	7231      	strb	r1, [r6, #8]
  spip->state = SPI_STOP;
 8002498:	7029      	strb	r1, [r5, #0]
  oqp->q_link    = link;
 800249a:	6536      	str	r6, [r6, #80]	; 0x50
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 800249c:	62e8      	str	r0, [r5, #44]	; 0x2c
 800249e:	6c10      	ldr	r0, [r2, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
 80024a0:	4c92      	ldr	r4, [pc, #584]	; (80026ec <main+0x3fc>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80024a2:	f8df e280 	ldr.w	lr, [pc, #640]	; 8002724 <main+0x434>
  tqp->prev = (thread_t *)tqp;
 80024a6:	6064      	str	r4, [r4, #4]
  ST_ENABLE_CLOCK();
 80024a8:	f040 0008 	orr.w	r0, r0, #8
 80024ac:	6410      	str	r0, [r2, #64]	; 0x40
 80024ae:	6e10      	ldr	r0, [r2, #96]	; 0x60
  ch.rlist.prio = NOPRIO;
 80024b0:	60a3      	str	r3, [r4, #8]
 80024b2:	f040 0008 	orr.w	r0, r0, #8
 80024b6:	6610      	str	r0, [r2, #96]	; 0x60
 80024b8:	6e12      	ldr	r2, [r2, #96]	; 0x60
  ST_ENABLE_STOP();
 80024ba:	f8de c008 	ldr.w	ip, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024be:	4a8c      	ldr	r2, [pc, #560]	; (80026f0 <main+0x400>)
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80024c0:	6124      	str	r4, [r4, #16]
  ST_ENABLE_STOP();
 80024c2:	f04c 0c08 	orr.w	ip, ip, #8
 80024c6:	f8ce c008 	str.w	ip, [lr, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80024ca:	4f8a      	ldr	r7, [pc, #552]	; (80026f4 <main+0x404>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024cc:	487e      	ldr	r0, [pc, #504]	; (80026c8 <main+0x3d8>)
  ch_memcore.basemem = __heap_base__;
 80024ce:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8002728 <main+0x438>
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80024d2:	f242 7c0f 	movw	ip, #9999	; 0x270f
 80024d6:	f8c2 c028 	str.w	ip, [r2, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80024da:	f04f 3cff 	mov.w	ip, #4294967295
 80024de:	f8c2 c02c 	str.w	ip, [r2, #44]	; 0x2c
  ch.rlist.older = (thread_t *)&ch.rlist;
 80024e2:	6164      	str	r4, [r4, #20]
  STM32_ST_TIM->CCMR1  = 0;
 80024e4:	6193      	str	r3, [r2, #24]
  ch.vtlist.delta = (sysinterval_t)-1;
 80024e6:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
  STM32_ST_TIM->CCR[0] = 0;
 80024ea:	6353      	str	r3, [r2, #52]	; 0x34
  ch.vtlist.lasttime = (systime_t)0;
 80024ec:	62a3      	str	r3, [r4, #40]	; 0x28
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80024ee:	60d3      	str	r3, [r2, #12]
  H_NEXT(&default_heap.header) = NULL;
 80024f0:	607b      	str	r3, [r7, #4]
  STM32_ST_TIM->CR2    = 0;
 80024f2:	6053      	str	r3, [r2, #4]
  H_PAGES(&default_heap.header) = 0;
 80024f4:	60bb      	str	r3, [r7, #8]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80024f6:	6151      	str	r1, [r2, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80024f8:	6011      	str	r1, [r2, #0]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	f880 2332 	strb.w	r2, [r0, #818]	; 0x332
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002500:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8002504:	f104 021c 	add.w	r2, r4, #28
 8002508:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
 800250c:	61e2      	str	r2, [r4, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800250e:	6041      	str	r1, [r0, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8002510:	4979      	ldr	r1, [pc, #484]	; (80026f8 <main+0x408>)
 8002512:	6039      	str	r1, [r7, #0]
 8002514:	4879      	ldr	r0, [pc, #484]	; (80026fc <main+0x40c>)
  ch_memcore.topmem  = __heap_end__;
 8002516:	497a      	ldr	r1, [pc, #488]	; (8002700 <main+0x410>)
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8002518:	6222      	str	r2, [r4, #32]
  tqp->next = (thread_t *)tqp;
 800251a:	4a7a      	ldr	r2, [pc, #488]	; (8002704 <main+0x414>)
  ch_memcore.basemem = __heap_base__;
 800251c:	f8c8 0000 	str.w	r0, [r8]
 8002520:	f107 0e0c 	add.w	lr, r7, #12
  ch_memcore.topmem  = __heap_end__;
 8002524:	f8c8 1004 	str.w	r1, [r8, #4]
  tmp->cumulative = (rttime_t)0;
 8002528:	2000      	movs	r0, #0
 800252a:	2100      	movs	r1, #0
 800252c:	6024      	str	r4, [r4, #0]
 800252e:	f8c7 e00c 	str.w	lr, [r7, #12]
 8002532:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8002536:	f102 0010 	add.w	r0, r2, #16
  tmp->best       = (rtcnt_t)-1;
 800253a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800253e:	6110      	str	r0, [r2, #16]
 8002540:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 8002544:	f102 0040 	add.w	r0, r2, #64	; 0x40
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8002548:	2114      	movs	r1, #20
  tqp->prev = (thread_t *)tqp;
 800254a:	e9c2 2200 	strd	r2, r2, [r2]
 800254e:	e9c2 c00f 	strd	ip, r0, [r2, #60]	; 0x3c
 8002552:	f8c7 e010 	str.w	lr, [r7, #16]
 8002556:	617b      	str	r3, [r7, #20]
  tmp->last       = (rtcnt_t)0;
 8002558:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  mp->align = align;
 800255c:	2704      	movs	r7, #4
 800255e:	f102 0924 	add.w	r9, r2, #36	; 0x24
 8002562:	f102 0828 	add.w	r8, r2, #40	; 0x28
  mp->object_size = size;
 8002566:	f04f 0e1c 	mov.w	lr, #28
  ch.tm.offset = (rtcnt_t)0;
 800256a:	6763      	str	r3, [r4, #116]	; 0x74
  tmp->n          = (ucnt_t)0;
 800256c:	9311      	str	r3, [sp, #68]	; 0x44
 800256e:	6093      	str	r3, [r2, #8]
  mp->next = NULL;
 8002570:	6153      	str	r3, [r2, #20]
 8002572:	62d3      	str	r3, [r2, #44]	; 0x2c
  mp->object_size = size;
 8002574:	6191      	str	r1, [r2, #24]
  mp->provider = provider;
 8002576:	4b64      	ldr	r3, [pc, #400]	; (8002708 <main+0x418>)
 8002578:	f8c2 9024 	str.w	r9, [r2, #36]	; 0x24
 800257c:	f102 0144 	add.w	r1, r2, #68	; 0x44
 8002580:	f8c2 8028 	str.w	r8, [r2, #40]	; 0x28
  mp->object_size = size;
 8002584:	f8c2 e030 	str.w	lr, [r2, #48]	; 0x30
 8002588:	6451      	str	r1, [r2, #68]	; 0x44
  mp->align = align;
 800258a:	61d7      	str	r7, [r2, #28]
 800258c:	6357      	str	r7, [r2, #52]	; 0x34
  mp->provider = provider;
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	6393      	str	r3, [r2, #56]	; 0x38
    chTMStartMeasurementX(&tm);
 8002592:	a80e      	add	r0, sp, #56	; 0x38
 8002594:	f7fe f8e4 	bl	8000760 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8002598:	a80e      	add	r0, sp, #56	; 0x38
 800259a:	f7fe f8b9 	bl	8000710 <chTMStopMeasurementX>
  } while (i > 0U);
 800259e:	3f01      	subs	r7, #1
 80025a0:	d1f7      	bne.n	8002592 <main+0x2a2>
  REG_INSERT(tp);
 80025a2:	4a5a      	ldr	r2, [pc, #360]	; (800270c <main+0x41c>)
 80025a4:	f8d4 c014 	ldr.w	ip, [r4, #20]
  ch.tm.offset = tm.best;
 80025a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025aa:	6763      	str	r3, [r4, #116]	; 0x74
  tp->prio      = prio;
 80025ac:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 80025ae:	2101      	movs	r1, #1
  tqp->next = (thread_t *)tqp;
 80025b0:	f102 032c 	add.w	r3, r2, #44	; 0x2c
  tp->name      = name;
 80025b4:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800272c <main+0x43c>
  tp->prio      = prio;
 80025b8:	63a0      	str	r0, [r4, #56]	; 0x38
  tlp->next = (thread_t *)tlp;
 80025ba:	f102 0e28 	add.w	lr, r2, #40	; 0x28
  tp->realprio  = prio;
 80025be:	66e0      	str	r0, [r4, #108]	; 0x6c
  tp->epending  = (eventmask_t)0;
 80025c0:	e9c4 7719 	strd	r7, r7, [r4, #100]	; 0x64
  REG_INSERT(tp);
 80025c4:	e9c4 4c10 	strd	r4, ip, [r4, #64]	; 0x40
  tp->flags     = CH_FLAG_MODE_STATIC;
 80025c8:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  tp->refs      = (trefs_t)1;
 80025cc:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tp->name      = name;
 80025d0:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80025d4:	2020      	movs	r0, #32
  REG_INSERT(tp);
 80025d6:	f8cc 2010 	str.w	r2, [ip, #16]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80025da:	e9c4 2205 	strd	r2, r2, [r4, #20]
  tqp->next = (thread_t *)tqp;
 80025de:	e9c4 e316 	strd	lr, r3, [r4, #88]	; 0x58
  currp->state = CH_STATE_CURRENT;
 80025e2:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 80025e6:	64e7      	str	r7, [r4, #76]	; 0x4c
  tqp->prev = (thread_t *)tqp;
 80025e8:	6623      	str	r3, [r4, #96]	; 0x60
 80025ea:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 80025ee:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b47      	ldr	r3, [pc, #284]	; (8002710 <main+0x420>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80025f2:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8002730 <main+0x440>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	f64f 08ff 	movw	r8, #63743	; 0xf8ff
 80025fe:	ea0e 0e08 	and.w	lr, lr, r8
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002602:	f108 4860 	add.w	r8, r8, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 8002606:	ea4e 0c0c 	orr.w	ip, lr, ip
 800260a:	f6a8 380f 	subw	r8, r8, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800260e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8002612:	f8d8 c00c 	ldr.w	ip, [r8, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002616:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002734 <main+0x444>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800261a:	f04c 7c80 	orr.w	ip, ip, #16777216	; 0x1000000
 800261e:	f8c8 c00c 	str.w	ip, [r8, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002622:	f8de c000 	ldr.w	ip, [lr]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002626:	f04f 0810 	mov.w	r8, #16
 800262a:	ea4c 0c01 	orr.w	ip, ip, r1
 800262e:	f8ce c000 	str.w	ip, [lr]
 8002632:	f883 801f 	strb.w	r8, [r3, #31]
 8002636:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800263a:	f387 8811 	msr	BASEPRI, r7
  __ASM volatile ("cpsie i" : : : "memory");
 800263e:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002640:	f380 8811 	msr	BASEPRI, r0
  tp->wabase = tdp->wbase;
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <main+0x424>)
  REG_INSERT(tp);
 8002646:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
 8002648:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 800264c:	e9c3 7132 	strd	r7, r1, [r3, #200]	; 0xc8
  tp->refs      = (trefs_t)1;
 8002650:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002654:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8002738 <main+0x448>
 8002658:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800273c <main+0x44c>
  tp->name      = name;
 800265c:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8002740 <main+0x450>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002660:	f8c3 c06c 	str.w	ip, [r3, #108]	; 0x6c
 8002664:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8002668:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  REG_INSERT(tp);
 800266c:	f103 0c90 	add.w	ip, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
 8002670:	2102      	movs	r1, #2
 8002672:	f8a3 10b0 	strh.w	r1, [r3, #176]	; 0xb0
  REG_INSERT(tp);
 8002676:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->epending  = (eventmask_t)0;
 800267a:	f8c3 70c4 	str.w	r7, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800267e:	f8c3 808c 	str.w	r8, [r3, #140]	; 0x8c
  tp->name      = name;
 8002682:	f8c3 e0a8 	str.w	lr, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002686:	671f      	str	r7, [r3, #112]	; 0x70
  REG_INSERT(tp);
 8002688:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 800268c:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
 8002690:	f8c0 c010 	str.w	ip, [r0, #16]
  thread_t *otp = currp;
 8002694:	69a1      	ldr	r1, [r4, #24]
  ntp->u.rdymsg = msg;
 8002696:	f8c3 70b4 	str.w	r7, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
 800269a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800269e:	f8c4 c014 	str.w	ip, [r4, #20]
  tqp->next = (thread_t *)tqp;
 80026a2:	f103 00bc 	add.w	r0, r3, #188	; 0xbc
  tlp->next = (thread_t *)tlp;
 80026a6:	f103 08b8 	add.w	r8, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
 80026aa:	e9c3 802e 	strd	r8, r0, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80026ae:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80026b2:	f1be 0f00 	cmp.w	lr, #0
 80026b6:	f000 8317 	beq.w	8002ce8 <main+0x9f8>
  tp->state = CH_STATE_READY;
 80026ba:	f883 70b0 	strb.w	r7, [r3, #176]	; 0xb0
  cp = (thread_t *)&ch.rlist.queue;
 80026be:	3a30      	subs	r2, #48	; 0x30
 80026c0:	e040      	b.n	8002744 <main+0x454>
 80026c2:	bf00      	nop
 80026c4:	40026000 	.word	0x40026000
 80026c8:	e000e100 	.word	0xe000e100
 80026cc:	40026400 	.word	0x40026400
 80026d0:	200008ac 	.word	0x200008ac
 80026d4:	20000800 	.word	0x20000800
 80026d8:	2000087c 	.word	0x2000087c
 80026dc:	08000661 	.word	0x08000661
 80026e0:	40004400 	.word	0x40004400
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00010046 	.word	0x00010046
 80026ec:	200009ac 	.word	0x200009ac
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	20000b54 	.word	0x20000b54
 80026f8:	08000621 	.word	0x08000621
 80026fc:	20000d50 	.word	0x20000d50
 8002700:	20008000 	.word	0x20008000
 8002704:	20000a24 	.word	0x20000a24
 8002708:	080006e1 	.word	0x080006e1
 800270c:	200009dc 	.word	0x200009dc
 8002710:	e000ed00 	.word	0xe000ed00
 8002714:	20000a70 	.word	0x20000a70
 8002718:	08003f70 	.word	0x08003f70
 800271c:	40003800 	.word	0x40003800
 8002720:	00010016 	.word	0x00010016
 8002724:	e0042000 	.word	0xe0042000
 8002728:	20000b48 	.word	0x20000b48
 800272c:	08003dc4 	.word	0x08003dc4
 8002730:	05fa0300 	.word	0x05fa0300
 8002734:	e0001000 	.word	0xe0001000
 8002738:	08000891 	.word	0x08000891
 800273c:	080002f1 	.word	0x080002f1
 8002740:	08003bb8 	.word	0x08003bb8
    cp = cp->queue.next;
 8002744:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 8002746:	6891      	ldr	r1, [r2, #8]
 8002748:	2900      	cmp	r1, #0
 800274a:	d1fb      	bne.n	8002744 <main+0x454>
  tp->queue.next             = cp;
 800274c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
 8002750:	6851      	ldr	r1, [r2, #4]
 8002752:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
 8002756:	f8c1 c000 	str.w	ip, [r1]
  cp->queue.prev             = tp;
 800275a:	f8c2 c004 	str.w	ip, [r2, #4]
 800275e:	2300      	movs	r3, #0
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	2320      	movs	r3, #32
 8002766:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800276a:	7a33      	ldrb	r3, [r6, #8]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d111      	bne.n	8002794 <main+0x4a4>
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccEnableUSART2(true);
 8002770:	4b9e      	ldr	r3, [pc, #632]	; (80029ec <main+0x6fc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002772:	4a9f      	ldr	r2, [pc, #636]	; (80029f0 <main+0x700>)
 8002774:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002776:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800277a:	6419      	str	r1, [r3, #64]	; 0x40
 800277c:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800277e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002782:	6619      	str	r1, [r3, #96]	; 0x60
 8002784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002786:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002788:	2340      	movs	r3, #64	; 0x40
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800278a:	f882 1326 	strb.w	r1, [r2, #806]	; 0x326
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800278e:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002792:	6053      	str	r3, [r2, #4]
  USART_TypeDef *u = sdp->usart;
 8002794:	6f73      	ldr	r3, [r6, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8002796:	4a97      	ldr	r2, [pc, #604]	; (80029f4 <main+0x704>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f000 831e 	beq.w	8002dda <main+0xaea>
 800279e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    fck = STM32_PCLK1 / config->speed;
 80027a2:	4293      	cmp	r3, r2
 80027a4:	bf0c      	ite	eq
 80027a6:	f44f 7259 	moveq.w	r2, #868	; 0x364
 80027aa:	f44f 72d9 	movne.w	r2, #434	; 0x1b2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80027ae:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80027b0:	f04f 0a01 	mov.w	sl, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80027b4:	f242 112c 	movw	r1, #8492	; 0x212c
  u->SR = 0;
 80027b8:	f04f 0800 	mov.w	r8, #0
  u->BRR = fck;
 80027bc:	609a      	str	r2, [r3, #8]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 80027be:	f04f 0902 	mov.w	r9, #2
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80027c2:	6118      	str	r0, [r3, #16]
    sdp->rxmask = 0xFF;
 80027c4:	22ff      	movs	r2, #255	; 0xff
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80027c6:	f8c3 a014 	str.w	sl, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80027ca:	60d9      	str	r1, [r3, #12]
  u->SR = 0;
 80027cc:	f8c3 8000 	str.w	r8, [r3]
  (void)u->SR;  /* SR reset step 1.*/
 80027d0:	6819      	ldr	r1, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80027d2:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80027d4:	f886 2078 	strb.w	r2, [r6, #120]	; 0x78
 80027d8:	f886 9008 	strb.w	r9, [r6, #8]
 80027dc:	f388 8811 	msr	BASEPRI, r8
   * sleeping in a loop and check the button state.
   */
  sdStart(&SD2, &myserialcfg);
  tstrWifiInitParam param;
  int8_t ret;
  myPrintf("Bismillah\n");
 80027e0:	4885      	ldr	r0, [pc, #532]	; (80029f8 <main+0x708>)
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 80027e2:	4c86      	ldr	r4, [pc, #536]	; (80029fc <main+0x70c>)


  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));

  /* Initialize Wi-Fi driver with data and status callbacks. */
  param.pfAppWifiCb = wifi_cb;
 80027e4:	4e86      	ldr	r6, [pc, #536]	; (8002a00 <main+0x710>)
  myPrintf("Bismillah\n");
 80027e6:	f7ff f953 	bl	8001a90 <myPrintf>
  myPrintf("initializing bsp_init\n");
 80027ea:	4886      	ldr	r0, [pc, #536]	; (8002a04 <main+0x714>)
 80027ec:	f7ff f950 	bl	8001a90 <myPrintf>
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_RESET);
 80027f0:	4642      	mov	r2, r8
 80027f2:	4649      	mov	r1, r9
 80027f4:	4884      	ldr	r0, [pc, #528]	; (8002a08 <main+0x718>)
 80027f6:	f7fe f8cb 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_RESET);
 80027fa:	4620      	mov	r0, r4
 80027fc:	4642      	mov	r2, r8
 80027fe:	4649      	mov	r1, r9
 8002800:	f7fe f8c6 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_RESET);
 8002804:	4642      	mov	r2, r8
 8002806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800280a:	f7fe f8c1 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_RESET);
 800280e:	4642      	mov	r2, r8
 8002810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002814:	f7fe f8bc 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_CS_PORT,SPI_WIFI_CS_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8002818:	4652      	mov	r2, sl
 800281a:	4649      	mov	r1, r9
 800281c:	487a      	ldr	r0, [pc, #488]	; (8002a08 <main+0x718>)
 800281e:	f7fe f8b7 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8002822:	4620      	mov	r0, r4
 8002824:	4652      	mov	r2, sl
 8002826:	4649      	mov	r1, r9
 8002828:	f7fe f8b2 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_WAKE_PORT,CONF_WINC_WAKE_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 800282c:	4652      	mov	r2, sl
 800282e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002832:	f7fe f8ad 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8002836:	4652      	mov	r2, sl
 8002838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800283c:	f7fe f8a8 	bl	8000990 <_pal_lld_setgroupmode>
  palClearPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 8002840:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  palSetPadMode(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_MODE_INPUT_PULLUP);
 8002844:	2220      	movs	r2, #32
 8002846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284a:	f7fe f8a1 	bl	8000990 <_pal_lld_setgroupmode>
  palClearPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 800284e:	f8a4 901a 	strh.w	r9, [r4, #26]
  chThdSleepMilliseconds(u32TimeMsec);
 8002852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  palClearPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 8002856:	f8a4 a01a 	strh.w	sl, [r4, #26]
  chThdSleepMilliseconds(u32TimeMsec);
 800285a:	f7fe fa39 	bl	8000cd0 <chThdSleep>
  palSetPad(CONF_WINC_ENABLE_PORT,CONF_WINC_ENABLE_PIN);
 800285e:	f8a4 9018 	strh.w	r9, [r4, #24]
  chThdSleepMilliseconds(u32TimeMsec);
 8002862:	2064      	movs	r0, #100	; 0x64
 8002864:	f7fe fa34 	bl	8000cd0 <chThdSleep>
  palSetPad(CONF_WINC_RESET_PORT,CONF_WINC_RESET_PIN);
 8002868:	f8a4 a018 	strh.w	sl, [r4, #24]
  chThdSleepMilliseconds(u32TimeMsec);
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	f7fe fa2f 	bl	8000cd0 <chThdSleep>
  myPrintf("initializing wifi_init\n");
 8002872:	4866      	ldr	r0, [pc, #408]	; (8002a0c <main+0x71c>)
  memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
 8002874:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8002878:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
 800287c:	e9cd 880b 	strd	r8, r8, [sp, #44]	; 0x2c
  param.pfAppWifiCb = wifi_cb;
 8002880:	9608      	str	r6, [sp, #32]
  myPrintf("initializing wifi_init\n");
 8002882:	f7ff f905 	bl	8001a90 <myPrintf>
	gu8scanInProgress = 0;
 8002886:	4a62      	ldr	r2, [pc, #392]	; (8002a10 <main+0x720>)
	gpfAppWifiCb = param->pfAppWifiCb;
 8002888:	4b62      	ldr	r3, [pc, #392]	; (8002a14 <main+0x724>)
	gu8scanInProgress = 0;
 800288a:	f882 8000 	strb.w	r8, [r2]
  palSetPadMode(SPI_WIFI_MISO_PORT, SPI_WIFI_MISO_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 800288e:	485e      	ldr	r0, [pc, #376]	; (8002a08 <main+0x718>)
	gpfAppWifiCb = param->pfAppWifiCb;
 8002890:	601e      	str	r6, [r3, #0]
 8002892:	f240 229a 	movw	r2, #666	; 0x29a
 8002896:	2104      	movs	r1, #4
 8002898:	f7fe f87a 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_MOSI_PORT, SPI_WIFI_MOSI_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 800289c:	485a      	ldr	r0, [pc, #360]	; (8002a08 <main+0x718>)
 800289e:	f240 229a 	movw	r2, #666	; 0x29a
 80028a2:	2108      	movs	r1, #8
 80028a4:	f7fe f874 	bl	8000990 <_pal_lld_setgroupmode>
  palSetPadMode(SPI_WIFI_SCK_PORT, SPI_WIFI_SCK_PIN,PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);
 80028a8:	4620      	mov	r0, r4
 80028aa:	f240 229a 	movw	r2, #666	; 0x29a
 80028ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028b2:	f7fe f86d 	bl	8000990 <_pal_lld_setgroupmode>
 80028b6:	2320      	movs	r3, #32
 80028b8:	f383 8811 	msr	BASEPRI, r3
  if (spip->state == SPI_STOP) {
 80028bc:	782b      	ldrb	r3, [r5, #0]
  spip->config = config;
 80028be:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <main+0x728>)
 80028c0:	606a      	str	r2, [r5, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	f000 824c 	beq.w	8002d60 <main+0xa70>
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80028c8:	214c      	movs	r1, #76	; 0x4c
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80028ca:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80028ce:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80028d2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80028d6:	e9c5 030a 	strd	r0, r3, [r5, #40]	; 0x28
  if (spip->config->circular) {
 80028da:	7813      	ldrb	r3, [r2, #0]
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80028dc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  if (spip->config->circular) {
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8217 	beq.w	8002d12 <main+0xa22>
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80028e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80028e6:	f440 7084 	orr.w	r0, r0, #264	; 0x108
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 80028ea:	f443 7384 	orr.w	r3, r3, #264	; 0x108
 80028ee:	e9c5 030a 	strd	r0, r3, [r5, #40]	; 0x28
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80028f2:	69eb      	ldr	r3, [r5, #28]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80028f4:	8a52      	ldrh	r2, [r2, #18]
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 80028f6:	6818      	ldr	r0, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80028f8:	f042 0207 	orr.w	r2, r2, #7
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80028fc:	f441 7141 	orr.w	r1, r1, #772	; 0x304
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002900:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002904:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8002906:	6019      	str	r1, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8002908:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 800290a:	681a      	ldr	r2, [r3, #0]
  spip->state = SPI_READY;
 800290c:	2102      	movs	r1, #2
 800290e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	2600      	movs	r6, #0
 8002916:	7029      	strb	r1, [r5, #0]
 8002918:	f386 8811 	msr	BASEPRI, r6
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	myPrintf("Chip ID %lx\n", nmi_get_chipid());
 800291c:	f7fe fc78 	bl	8001210 <nmi_get_chipid>
	gu8Crc_off = 0;
 8002920:	4c3e      	ldr	r4, [pc, #248]	; (8002a1c <main+0x72c>)
 8002922:	4601      	mov	r1, r0
 8002924:	483e      	ldr	r0, [pc, #248]	; (8002a20 <main+0x730>)
 8002926:	f7ff f8b3 	bl	8001a90 <myPrintf>
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 800292a:	a90e      	add	r1, sp, #56	; 0x38
 800292c:	f64e 0024 	movw	r0, #59428	; 0xe824
	uint32 reg = 0;
 8002930:	960e      	str	r6, [sp, #56]	; 0x38
	gu8Crc_off = 0;
 8002932:	7026      	strb	r6, [r4, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
 8002934:	f7fe fc14 	bl	8001160 <spi_read_reg>
 8002938:	2800      	cmp	r0, #0
 800293a:	f000 825c 	beq.w	8002df6 <main+0xb06>
	if(gu8Crc_off == 0)
 800293e:	7823      	ldrb	r3, [r4, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 823c 	beq.w	8002dbe <main+0xace>
	if (!spi_read_reg(0x1000, &chipid)) {
 8002946:	ae06      	add	r6, sp, #24
 8002948:	4631      	mov	r1, r6
 800294a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800294e:	f7fe fc07 	bl	8001160 <spi_read_reg>
 8002952:	e001      	b.n	8002958 <main+0x668>
 8002954:	f7fe f9bc 	bl	8000cd0 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002958:	a90e      	add	r1, sp, #56	; 0x38
 800295a:	f241 0014 	movw	r0, #4116	; 0x1014
 800295e:	f7fe fbff 	bl	8001160 <spi_read_reg>
	return u32Val;
 8002962:	9b0e      	ldr	r3, [sp, #56]	; 0x38


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
 8002964:	2b00      	cmp	r3, #0
 8002966:	f04f 000a 	mov.w	r0, #10
 800296a:	daf3      	bge.n	8002954 <main+0x664>
	spi_read_reg(u32Addr, &u32Val);
 800296c:	482d      	ldr	r0, [pc, #180]	; (8002a24 <main+0x734>)
 800296e:	a90e      	add	r1, sp, #56	; 0x38
 8002970:	f7fe fbf6 	bl	8001160 <spi_read_reg>
	return u32Val;
 8002974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
 8002976:	07da      	lsls	r2, r3, #31
 8002978:	d41b      	bmi.n	80029b2 <main+0x6c2>
 800297a:	200a      	movs	r0, #10
 800297c:	f7fe f9a8 	bl	8000cd0 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002980:	a90e      	add	r1, sp, #56	; 0x38
 8002982:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 8002986:	f7fe fbeb 	bl	8001160 <spi_read_reg>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
 800298a:	4d27      	ldr	r5, [pc, #156]	; (8002a28 <main+0x738>)
	return u32Val;
 800298c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		{
			nm_bsp_sleep(1);
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > (uint32)TIMEOUT)
 800298e:	f644 6420 	movw	r4, #20000	; 0x4e20
 8002992:	e00a      	b.n	80029aa <main+0x6ba>
 8002994:	f7fe f99c 	bl	8000cd0 <chThdSleep>
	spi_read_reg(u32Addr, &u32Val);
 8002998:	a90e      	add	r1, sp, #56	; 0x38
 800299a:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 800299e:	f7fe fbdf 	bl	8001160 <spi_read_reg>
 80029a2:	3c01      	subs	r4, #1
	return u32Val;
 80029a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029a6:	f000 821f 	beq.w	8002de8 <main+0xaf8>
		while(reg != M2M_FINISH_BOOT_ROM)
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	f04f 000a 	mov.w	r0, #10
 80029b0:	d1f0      	bne.n	8002994 <main+0x6a4>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
 80029b2:	491e      	ldr	r1, [pc, #120]	; (8002a2c <main+0x73c>)
 80029b4:	f241 008c 	movw	r0, #4236	; 0x108c
 80029b8:	f7fe fd9a 	bl	80014f0 <nm_write_reg>
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
 80029bc:	f7fe fc28 	bl	8001210 <nmi_get_chipid>
 80029c0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80029c4:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 80029c8:	f0c0 820a 	bcc.w	8002de0 <main+0xaf0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 80029cc:	2002      	movs	r0, #2
 80029ce:	f7fe fd97 	bl	8001500 <chip_apply_conf>
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
 80029d2:	4917      	ldr	r1, [pc, #92]	; (8002a30 <main+0x740>)
 80029d4:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 80029d8:	f7fe fd8a 	bl	80014f0 <nm_write_reg>
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <main+0x744>)
	volatile uint32 regAddress = NMI_STATE_REG;
 80029de:	f241 028c 	movw	r2, #4236	; 0x108c
 80029e2:	9203      	str	r2, [sp, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 80029e4:	f644 6420 	movw	r4, #20000	; 0x4e20
 80029e8:	9304      	str	r3, [sp, #16]

	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
 80029ea:	e02f      	b.n	8002a4c <main+0x75c>
 80029ec:	40023800 	.word	0x40023800
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	40011000 	.word	0x40011000
 80029f8:	08003bc0 	.word	0x08003bc0
 80029fc:	40020400 	.word	0x40020400
 8002a00:	08001f51 	.word	0x08001f51
 8002a04:	08003bcc 	.word	0x08003bcc
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	08003be4 	.word	0x08003be4
 8002a10:	20000c22 	.word	0x20000c22
 8002a14:	20000bf4 	.word	0x20000bf4
 8002a18:	08003f5c 	.word	0x08003f5c
 8002a1c:	20000c21 	.word	0x20000c21
 8002a20:	08003bfc 	.word	0x08003bfc
 8002a24:	000207bc 	.word	0x000207bc
 8002a28:	10add09e 	.word	0x10add09e
 8002a2c:	13541354 	.word	0x13541354
 8002a30:	ef522f61 	.word	0xef522f61
 8002a34:	02532636 	.word	0x02532636
 8002a38:	f7fe f94a 	bl	8000cd0 <chThdSleep>

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
 8002a3c:	9803      	ldr	r0, [sp, #12]
	spi_read_reg(u32Addr, &u32Val);
 8002a3e:	a90e      	add	r1, sp, #56	; 0x38
 8002a40:	f7fe fb8e 	bl	8001160 <spi_read_reg>
		if(++cnt >= u32Timeout)
 8002a44:	3c01      	subs	r4, #1
	return u32Val;
 8002a46:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8002a48:	f000 81ce 	beq.w	8002de8 <main+0xaf8>
	while (checkValue != reg)
 8002a4c:	9b04      	ldr	r3, [sp, #16]
 8002a4e:	42bb      	cmp	r3, r7
 8002a50:	f04f 0014 	mov.w	r0, #20
 8002a54:	d1f0      	bne.n	8002a38 <main+0x748>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
 8002a56:	9a04      	ldr	r2, [sp, #16]
 8002a58:	4bb2      	ldr	r3, [pc, #712]	; (8002d24 <main+0xa34>)
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	f000 81d7 	beq.w	8002e0e <main+0xb1e>
	uint32 reg = 0;
 8002a60:	2300      	movs	r3, #0
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002a62:	a90e      	add	r1, sp, #56	; 0x38
 8002a64:	f241 4008 	movw	r0, #5128	; 0x1408
 8002a68:	930e      	str	r3, [sp, #56]	; 0x38
 8002a6a:	f7fe fbc1 	bl	80011f0 <nm_spi_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002a6e:	4605      	mov	r5, r0
 8002a70:	2800      	cmp	r0, #0
 8002a72:	f040 81bb 	bne.w	8002dec <main+0xafc>
	reg |= ((uint32) 1 << 8);
 8002a76:	990e      	ldr	r1, [sp, #56]	; 0x38
	return nm_spi_write_reg(u32Addr,u32Val);
 8002a78:	f241 4008 	movw	r0, #5128	; 0x1408
 8002a7c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002a80:	910e      	str	r1, [sp, #56]	; 0x38
 8002a82:	f7fe fd25 	bl	80014d0 <nm_spi_write_reg>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002a86:	4605      	mov	r5, r0
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	f040 81af 	bne.w	8002dec <main+0xafc>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002a8e:	a90e      	add	r1, sp, #56	; 0x38
 8002a90:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002a94:	f7fe fbac 	bl	80011f0 <nm_spi_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
 8002a98:	4605      	mov	r5, r0
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	f040 81a6 	bne.w	8002dec <main+0xafc>
	reg |= ((uint32) 1 << 16);
 8002aa0:	990e      	ldr	r1, [sp, #56]	; 0x38
	return nm_spi_write_reg(u32Addr,u32Val);
 8002aa2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002aa6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002aaa:	910e      	str	r1, [sp, #56]	; 0x38
 8002aac:	f7fe fd10 	bl	80014d0 <nm_spi_write_reg>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
 8002ab0:	4605      	mov	r5, r0
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	f040 819a 	bne.w	8002dec <main+0xafc>
 8002ab8:	4c9b      	ldr	r4, [pc, #620]	; (8002d28 <main+0xa38>)
 8002aba:	4623      	mov	r3, r4
 8002abc:	f104 0228 	add.w	r2, r4, #40	; 0x28
		*pBuf = val;
 8002ac0:	f803 5b01 	strb.w	r5, [r3], #1
	}while(--sz);
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d1fb      	bne.n	8002ac0 <main+0x7d0>
 8002ac8:	2320      	movs	r3, #32
 8002aca:	f383 8811 	msr	BASEPRI, r3
  palEnablePadEvent(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN,PAL_EVENT_MODE_FALLING_EDGE);
 8002ace:	f7fd fd7f 	bl	80005d0 <_pal_lld_enablepadevent.constprop.0>
 8002ad2:	f385 8811 	msr	BASEPRI, r5
	tstrGpRegs strgp = {0};
 8002ad6:	e9cd 5505 	strd	r5, r5, [sp, #20]
			break;
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
 8002ada:	4b94      	ldr	r3, [pc, #592]	; (8002d2c <main+0xa3c>)
			gstrHifCxt.pfWifiCb = fn;
 8002adc:	4a94      	ldr	r2, [pc, #592]	; (8002d30 <main+0xa40>)
			gstrHifCxt.pfHifCb = fn;
 8002ade:	61e3      	str	r3, [r4, #28]
 8002ae0:	6075      	str	r5, [r6, #4]
			gstrHifCxt.pfWifiCb = fn;
 8002ae2:	60e2      	str	r2, [r4, #12]
 8002ae4:	ab0e      	add	r3, sp, #56	; 0x38
		*pBuf = val;
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f803 2b01 	strb.w	r2, [r3], #1
	}while(--sz);
 8002aec:	a918      	add	r1, sp, #96	; 0x60
 8002aee:	428b      	cmp	r3, r1
 8002af0:	d1fa      	bne.n	8002ae8 <main+0x7f8>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002af2:	4890      	ldr	r0, [pc, #576]	; (8002d34 <main+0xa44>)
 8002af4:	a905      	add	r1, sp, #20
 8002af6:	f7fe fb7b 	bl	80011f0 <nm_spi_read_reg_with_ret>
		if(ret == M2M_SUCCESS)
 8002afa:	4605      	mov	r5, r0
 8002afc:	2800      	cmp	r0, #0
 8002afe:	f040 81c8 	bne.w	8002e92 <main+0xba2>
			if(reg != 0)
 8002b02:	9805      	ldr	r0, [sp, #20]
 8002b04:	2800      	cmp	r0, #0
 8002b06:	f000 81bb 	beq.w	8002e80 <main+0xb90>
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
 8002b0a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4631      	mov	r1, r6
 8002b12:	f7fe fafd 	bl	8001110 <nm_read_block>
				if(ret == M2M_SUCCESS)
 8002b16:	4605      	mov	r5, r0
 8002b18:	2800      	cmp	r0, #0
 8002b1a:	f040 81ba 	bne.w	8002e92 <main+0xba2>
					reg &= 0x0000ffff;
 8002b1e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8002b22:	9005      	str	r0, [sp, #20]
					if(reg != 0)
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f000 81ab 	beq.w	8002e80 <main+0xb90>
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
 8002b2a:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
 8002b2e:	2228      	movs	r2, #40	; 0x28
 8002b30:	a90e      	add	r1, sp, #56	; 0x38
 8002b32:	f7fe faed 	bl	8001110 <nm_read_block>
						if(ret == M2M_SUCCESS)
 8002b36:	4605      	mov	r5, r0
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	f040 81aa 	bne.w	8002e92 <main+0xba2>
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b3e:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
 8002b42:	f89d e03f 	ldrb.w	lr, [sp, #63]	; 0x3f
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002b46:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002b4a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b4e:	f89d c040 	ldrb.w	ip, [sp, #64]	; 0x40
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002b52:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b56:	f000 000f 	and.w	r0, r0, #15
 8002b5a:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002b5e:	f003 070f 	and.w	r7, r3, #15
 8002b62:	ea4f 1e02 	mov.w	lr, r2, lsl #4
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b66:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
 8002b6a:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 8002b6e:	fa5f fe8e 	uxtb.w	lr, lr
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b72:	fa5f fc8c 	uxtb.w	ip, ip
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 8002b76:	ea57 070e 	orrs.w	r7, r7, lr
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
 8002b7a:	ea40 000c 	orr.w	r0, r0, ip
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
 8002b7e:	f000 8185 	beq.w	8002e8c <main+0xb9c>
 8002b82:	2800      	cmp	r0, #0
 8002b84:	f000 8182 	beq.w	8002e8c <main+0xb9c>
							if(curr_drv_ver <  min_req_drv_ver) {
 8002b88:	f241 3c54 	movw	ip, #4948	; 0x1354
 8002b8c:	4560      	cmp	r0, ip
 8002b8e:	f200 8174 	bhi.w	8002e7a <main+0xb8a>
							if(curr_drv_ver >  curr_firm_ver) {
 8002b92:	f241 3053 	movw	r0, #4947	; 0x1353
								ret = M2M_ERR_FW_VER_MISMATCH;
 8002b96:	4287      	cmp	r7, r0
 8002b98:	bf98      	it	ls
 8002b9a:	f06f 050c 	mvnls.w	r5, #12
	myPrintf("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
 8002b9e:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8002ba2:	9000      	str	r0, [sp, #0]
 8002ba4:	4864      	ldr	r0, [pc, #400]	; (8002d38 <main+0xa48>)
 8002ba6:	f7fe ff73 	bl	8001a90 <myPrintf>
	myPrintf("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
 8002baa:	f10d 024e 	add.w	r2, sp, #78	; 0x4e
 8002bae:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8002bb2:	4862      	ldr	r0, [pc, #392]	; (8002d3c <main+0xa4c>)
 8002bb4:	f7fe ff6c 	bl	8001a90 <myPrintf>
	myPrintf("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
 8002bb8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8002bbc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8002bc0:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8002bc4:	485e      	ldr	r0, [pc, #376]	; (8002d40 <main+0xa50>)
 8002bc6:	f7fe ff63 	bl	8001a90 <myPrintf>
	myPrintf("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
 8002bca:	2205      	movs	r2, #5
 8002bcc:	2113      	movs	r1, #19
 8002bce:	485d      	ldr	r0, [pc, #372]	; (8002d44 <main+0xa54>)
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	f7fe ff5d 	bl	8001a90 <myPrintf>
	myPrintf("Driver built at %s\t%s\n",__DATE__,__TIME__);
 8002bd6:	4a5c      	ldr	r2, [pc, #368]	; (8002d48 <main+0xa58>)
 8002bd8:	495c      	ldr	r1, [pc, #368]	; (8002d4c <main+0xa5c>)
 8002bda:	485d      	ldr	r0, [pc, #372]	; (8002d50 <main+0xa60>)
 8002bdc:	f7fe ff58 	bl	8001a90 <myPrintf>
  ret = m2m_wifi_init(&param);


  if (M2M_SUCCESS != ret) {
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	f040 8103 	bne.w	8002dec <main+0xafc>
      myPrintf("main: m2m_wifi_init call error!(%d)\r\n", ret);
      while (1) {
      }
  }
  myPrintf("initializing wifi_request_scan\n");
 8002be6:	485b      	ldr	r0, [pc, #364]	; (8002d54 <main+0xa64>)
	  palClearPad(CONF_WINC_IRQ_PORT,CONF_WINC_IRQ_PIN);
 8002be8:	4f5b      	ldr	r7, [pc, #364]	; (8002d58 <main+0xa68>)
 8002bea:	f7fe ff51 	bl	8001a90 <myPrintf>
  /* Request scan. */
  m2m_wifi_request_scan(M2M_WIFI_CH_ALL);
 8002bee:	f7fe fdff 	bl	80017f0 <m2m_wifi_request_scan.constprop.0>
	while (gstrHifCxt.u8Interrupt) {
 8002bf2:	78e3      	ldrb	r3, [r4, #3]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0fc      	beq.n	8002bf2 <main+0x902>
		gstrHifCxt.u8Interrupt--;
 8002bf8:	78e3      	ldrb	r3, [r4, #3]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	70e3      	strb	r3, [r4, #3]
 8002c00:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8002c04:	a905      	add	r1, sp, #20
 8002c06:	f241 0070 	movw	r0, #4208	; 0x1070
 8002c0a:	f7fe faf1 	bl	80011f0 <nm_spi_read_reg_with_ret>
	if(M2M_SUCCESS == ret)
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d1f8      	bne.n	8002c04 <main+0x914>
		if(reg & 0x1)	/* New interrupt has been received */
 8002c12:	9905      	ldr	r1, [sp, #20]
 8002c14:	07cb      	lsls	r3, r1, #31
 8002c16:	d5f5      	bpl.n	8002c04 <main+0x914>
			reg &= ~NBIT0;
 8002c18:	f021 0101 	bic.w	r1, r1, #1
 8002c1c:	f8a7 801a 	strh.w	r8, [r7, #26]
	return nm_spi_write_reg(u32Addr,u32Val);
 8002c20:	f241 0070 	movw	r0, #4208	; 0x1070
 8002c24:	9105      	str	r1, [sp, #20]
 8002c26:	f7fe fc53 	bl	80014d0 <nm_spi_write_reg>
			if(ret != M2M_SUCCESS)goto ERR1;
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d1e9      	bne.n	8002c04 <main+0x914>
			size = (uint16)((reg >> 2) & 0xfff);
 8002c30:	9d05      	ldr	r5, [sp, #20]
			gstrHifCxt.u8HifRXDone = 1;
 8002c32:	2201      	movs	r2, #1
			size = (uint16)((reg >> 2) & 0xfff);
 8002c34:	f3c5 058b 	ubfx	r5, r5, #2, #12
			gstrHifCxt.u8HifRXDone = 1;
 8002c38:	70a2      	strb	r2, [r4, #2]
			if (size > 0) {
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d0e2      	beq.n	8002c04 <main+0x914>
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
 8002c3e:	a90e      	add	r1, sp, #56	; 0x38
 8002c40:	f241 0084 	movw	r0, #4228	; 0x1084
				uint32 address = 0;
 8002c44:	930e      	str	r3, [sp, #56]	; 0x38
 8002c46:	f7fe fad3 	bl	80011f0 <nm_spi_read_reg_with_ret>
				if(M2M_SUCCESS != ret)
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	f040 8109 	bne.w	8002e62 <main+0xb72>
				gstrHifCxt.u32RxAddr = address;
 8002c50:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002c52:	6060      	str	r0, [r4, #4]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8002c54:	2204      	movs	r2, #4
 8002c56:	4631      	mov	r1, r6
				gstrHifCxt.u32RxSize = size;
 8002c58:	60a5      	str	r5, [r4, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
 8002c5a:	f7fe fa59 	bl	8001110 <nm_read_block>
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8002c5e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f8ad 301a 	strh.w	r3, [sp, #26]
				if(M2M_SUCCESS != ret)
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	f040 80fa 	bne.w	8002e62 <main+0xb72>
				if(strHif.u16Length != size)
 8002c6e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	429d      	cmp	r5, r3
 8002c76:	d006      	beq.n	8002c86 <main+0x996>
					if((size - strHif.u16Length) > 4)
 8002c78:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	1aed      	subs	r5, r5, r3
 8002c80:	2d04      	cmp	r5, #4
 8002c82:	f300 80ee 	bgt.w	8002e62 <main+0xb72>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 8002c86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	f000 80e0 	beq.w	8002e50 <main+0xb60>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 8002c90:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f000 80d2 	beq.w	8002e3e <main+0xb4e>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8002c9a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	f000 80c4 	beq.w	8002e2c <main+0xb3c>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
 8002ca4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	f000 80b6 	beq.w	8002e1a <main+0xb2a>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8002cae:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002cb2:	2b07      	cmp	r3, #7
 8002cb4:	f000 80d8 	beq.w	8002e68 <main+0xb78>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8002cb8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d1a1      	bne.n	8002c04 <main+0x914>
				    if(gstrHifCxt.pfSslCb)
 8002cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cc2:	b14b      	cbz	r3, 8002cd8 <main+0x9e8>
					    temp = (uint16)strHif.u16Length;
 8002cc4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfSslCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ccc:	f89d 0019 	ldrb.w	r0, [sp, #25]
 8002cd0:	3908      	subs	r1, #8
 8002cd2:	b289      	uxth	r1, r1
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
 8002cd8:	78a3      	ldrb	r3, [r4, #2]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d089      	beq.n	8002bf2 <main+0x902>
					ret = hif_set_rx_done();
 8002cde:	f7fe fdaf 	bl	8001840 <hif_set_rx_done>
					if(ret != M2M_SUCCESS) goto ERR1;
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d085      	beq.n	8002bf2 <main+0x902>
 8002ce6:	e78d      	b.n	8002c04 <main+0x914>
  tp->state = CH_STATE_READY;
 8002ce8:	f881 7020 	strb.w	r7, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002cec:	3a30      	subs	r2, #48	; 0x30
    cp = cp->queue.next;
 8002cee:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 8002cf0:	6890      	ldr	r0, [r2, #8]
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d1fb      	bne.n	8002cee <main+0x9fe>
  tp->queue.prev             = cp->queue.prev;
 8002cf6:	6850      	ldr	r0, [r2, #4]
 8002cf8:	e9c1 2000 	strd	r2, r0, [r1]
  tp->queue.prev->queue.next = tp;
 8002cfc:	6001      	str	r1, [r0, #0]
  cp->queue.prev             = tp;
 8002cfe:	6051      	str	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8002d00:	2201      	movs	r2, #1
    chSysSwitch(ntp, otp);
 8002d02:	4816      	ldr	r0, [pc, #88]	; (8002d5c <main+0xa6c>)
    ntp->state = CH_STATE_CURRENT;
 8002d04:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    currp = ntp;
 8002d08:	f8c4 c018 	str.w	ip, [r4, #24]
    chSysSwitch(ntp, otp);
 8002d0c:	f7fd fae8 	bl	80002e0 <_port_switch>
 8002d10:	e525      	b.n	800275e <main+0x46e>
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002d12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002d14:	f420 7084 	bic.w	r0, r0, #264	; 0x108
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002d18:	f423 7384 	bic.w	r3, r3, #264	; 0x108
 8002d1c:	e9c5 030a 	strd	r0, r3, [r5, #40]	; 0x28
 8002d20:	e5e7      	b.n	80028f2 <main+0x602>
 8002d22:	bf00      	nop
 8002d24:	02532636 	.word	0x02532636
 8002d28:	20000bf8 	.word	0x20000bf8
 8002d2c:	08000611 	.word	0x08000611
 8002d30:	080018d1 	.word	0x080018d1
 8002d34:	000c0008 	.word	0x000c0008
 8002d38:	08003c0c 	.word	0x08003c0c
 8002d3c:	08003c34 	.word	0x08003c34
 8002d40:	08003c50 	.word	0x08003c50
 8002d44:	08003c74 	.word	0x08003c74
 8002d48:	08003c8c 	.word	0x08003c8c
 8002d4c:	08003c98 	.word	0x08003c98
 8002d50:	08003ca4 	.word	0x08003ca4
 8002d54:	08003ce4 	.word	0x08003ce4
 8002d58:	40020400 	.word	0x40020400
 8002d5c:	20000b00 	.word	0x20000b00
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
 8002d60:	494f      	ldr	r1, [pc, #316]	; (8002ea0 <main+0xbb0>)
 8002d62:	2003      	movs	r0, #3
 8002d64:	f7fd fbdc 	bl	8000520 <dmaStreamAllocI.part.0.constprop.0>
 8002d68:	494e      	ldr	r1, [pc, #312]	; (8002ea4 <main+0xbb4>)
      spip->dmarx = dmaStreamAllocI(STM32_SPI_SPI2_RX_DMA_STREAM,
 8002d6a:	6228      	str	r0, [r5, #32]
 8002d6c:	2004      	movs	r0, #4
 8002d6e:	f7fd fbd7 	bl	8000520 <dmaStreamAllocI.part.0.constprop.0>
      rccEnableSPI2(true);
 8002d72:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <main+0xbb8>)
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002d74:	6a29      	ldr	r1, [r5, #32]
      rccEnableSPI2(true);
 8002d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002d78:	f8d1 c000 	ldr.w	ip, [r1]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002d7c:	6806      	ldr	r6, [r0, #0]
      rccEnableSPI2(true);
 8002d7e:	ea42 020a 	orr.w	r2, r2, sl
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
 8002d84:	6e1c      	ldr	r4, [r3, #96]	; 0x60
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002d86:	686a      	ldr	r2, [r5, #4]
      spip->dmatx = dmaStreamAllocI(STM32_SPI_SPI2_TX_DMA_STREAM,
 8002d88:	6268      	str	r0, [r5, #36]	; 0x24
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002d8a:	69e8      	ldr	r0, [r5, #28]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002d8c:	8a11      	ldrh	r1, [r2, #16]
      rccEnableSPI2(true);
 8002d8e:	ea44 040a 	orr.w	r4, r4, sl
 8002d92:	661c      	str	r4, [r3, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002d94:	300c      	adds	r0, #12
      rccEnableSPI2(true);
 8002d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002d98:	f8cc 0008 	str.w	r0, [ip, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002d9c:	60b0      	str	r0, [r6, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8002d9e:	0508      	lsls	r0, r1, #20
 8002da0:	f57f ad93 	bpl.w	80028ca <main+0x5da>
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002da4:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002da8:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002dac:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002db0:	f440 5020 	orr.w	r0, r0, #10240	; 0x2800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002db4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002db8:	e9c5 030a 	strd	r0, r3, [r5, #40]	; 0x28
 8002dbc:	e58d      	b.n	80028da <main+0x5ea>
		reg &= ~0x70;
 8002dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dc0:	f023 037c 	bic.w	r3, r3, #124	; 0x7c
		reg |= (0x5 << 4);
 8002dc4:	f043 0150 	orr.w	r1, r3, #80	; 0x50
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 8002dc8:	f64e 0024 	movw	r0, #59428	; 0xe824
		reg |= (0x5 << 4);
 8002dcc:	910e      	str	r1, [sp, #56]	; 0x38
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
 8002dce:	f7fe fb3f 	bl	8001450 <spi_write_reg>
 8002dd2:	b1d0      	cbz	r0, 8002e0a <main+0xb1a>
		gu8Crc_off = 1;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	7023      	strb	r3, [r4, #0]
 8002dd8:	e5b5      	b.n	8002946 <main+0x656>
    fck = STM32_PCLK2 / config->speed;
 8002dda:	f44f 7259 	mov.w	r2, #868	; 0x364
 8002dde:	e4e6      	b.n	80027ae <main+0x4be>
		chip_apply_conf(u32GpReg1);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fe fb8d 	bl	8001500 <chip_apply_conf>
 8002de6:	e5f4      	b.n	80029d2 <main+0x6e2>
 8002de8:	f06f 0504 	mvn.w	r5, #4
      myPrintf("main: m2m_wifi_init call error!(%d)\r\n", ret);
 8002dec:	482f      	ldr	r0, [pc, #188]	; (8002eac <main+0xbbc>)
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fe fe4e 	bl	8001a90 <myPrintf>
      while (1) {
 8002df4:	e7fe      	b.n	8002df4 <main+0xb04>
		gu8Crc_off = 1;
 8002df6:	2301      	movs	r3, #1
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8002df8:	a90e      	add	r1, sp, #56	; 0x38
 8002dfa:	f64e 0024 	movw	r0, #59428	; 0xe824
		gu8Crc_off = 1;
 8002dfe:	7023      	strb	r3, [r4, #0]
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
 8002e00:	f7fe f9ae 	bl	8001160 <spi_read_reg>
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f47f ad9a 	bne.w	800293e <main+0x64e>
 8002e0a:	ae06      	add	r6, sp, #24
 8002e0c:	e5a4      	b.n	8002958 <main+0x668>
	{
		nm_write_reg(NMI_STATE_REG, 0);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f241 008c 	movw	r0, #4236	; 0x108c
 8002e14:	f7fe fb6c 	bl	80014f0 <nm_write_reg>
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}

	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
 8002e18:	e622      	b.n	8002a60 <main+0x770>
					if(gstrHifCxt.pfCryptoCb)
 8002e1a:	6a23      	ldr	r3, [r4, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f43f af5b 	beq.w	8002cd8 <main+0x9e8>
                        temp = (uint16)strHif.u16Length;
 8002e22:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e28:	6a23      	ldr	r3, [r4, #32]
 8002e2a:	e74f      	b.n	8002ccc <main+0x9dc>
					if(gstrHifCxt.pfOtaCb)
 8002e2c:	6963      	ldr	r3, [r4, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f43f af52 	beq.w	8002cd8 <main+0x9e8>
                            temp = (uint16)strHif.u16Length;
 8002e34:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfOtaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e3a:	6963      	ldr	r3, [r4, #20]
 8002e3c:	e746      	b.n	8002ccc <main+0x9dc>
					if(gstrHifCxt.pfIpCb)
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f43f af49 	beq.w	8002cd8 <main+0x9e8>
                        temp = (uint16)strHif.u16Length;
 8002e46:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfIpCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	e73d      	b.n	8002ccc <main+0x9dc>
					if(gstrHifCxt.pfWifiCb)
 8002e50:	68e3      	ldr	r3, [r4, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f43f af40 	beq.w	8002cd8 <main+0x9e8>
                        temp = (uint16)strHif.u16Length;
 8002e58:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfWifiCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	e734      	b.n	8002ccc <main+0x9dc>
	if (1 == u8Enable)
 8002e62:	f7fd fc05 	bl	8000670 <nm_bsp_interrupt_ctrl.part.0>
			if(ret == M2M_SUCCESS) {
 8002e66:	e6cd      	b.n	8002c04 <main+0x914>
					if(gstrHifCxt.pfSigmaCb)
 8002e68:	69a3      	ldr	r3, [r4, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f43f af34 	beq.w	8002cd8 <main+0x9e8>
                        temp = (uint16)strHif.u16Length;
 8002e70:	f8bd 101a 	ldrh.w	r1, [sp, #26]
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode, temp - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8002e74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e76:	69a3      	ldr	r3, [r4, #24]
 8002e78:	e728      	b.n	8002ccc <main+0x9dc>
								ret = M2M_ERR_FW_VER_MISMATCH;
 8002e7a:	f06f 050c 	mvn.w	r5, #12
 8002e7e:	e68e      	b.n	8002b9e <main+0x8ae>
 8002e80:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8002e84:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002e88:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
				ret = M2M_ERR_FAIL;
 8002e8c:	f06f 050b 	mvn.w	r5, #11
 8002e90:	e685      	b.n	8002b9e <main+0x8ae>
 8002e92:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8002e96:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8002e9a:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8002e9e:	e67e      	b.n	8002b9e <main+0x8ae>
 8002ea0:	080008c1 	.word	0x080008c1
 8002ea4:	080008a1 	.word	0x080008a1
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08003cbc 	.word	0x08003cbc

08002eb0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002eb0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8002eb4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002eb6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f383 8811 	msr	BASEPRI, r3
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
	...

08002ed0 <chThdExit>:
void chThdExit(msg_t msg) {
 8002ed0:	b538      	push	{r3, r4, r5, lr}
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 8002eda:	4a0f      	ldr	r2, [pc, #60]	; (8002f18 <chThdExit+0x48>)
 8002edc:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 8002ede:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8002ee0:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8002ee2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002ee6:	42a8      	cmp	r0, r5
 8002ee8:	d006      	beq.n	8002ef8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002eee:	f7fd fc77 	bl	80007e0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8002ef2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8002ef4:	42a8      	cmp	r0, r5
 8002ef6:	d1f8      	bne.n	8002eea <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8002ef8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002efc:	b93b      	cbnz	r3, 8002f0e <chThdExit+0x3e>
 8002efe:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002f02:	079b      	lsls	r3, r3, #30
 8002f04:	d103      	bne.n	8002f0e <chThdExit+0x3e>
    REG_REMOVE(tp);
 8002f06:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002f0a:	6113      	str	r3, [r2, #16]
 8002f0c:	615a      	str	r2, [r3, #20]
}
 8002f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 8002f12:	200f      	movs	r0, #15
 8002f14:	f7fd bdac 	b.w	8000a70 <chSchGoSleepS>
 8002f18:	200009ac 	.word	0x200009ac
 8002f1c:	00000000 	.word	0x00000000

08002f20 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 8002f20:	4a0d      	ldr	r2, [pc, #52]	; (8002f58 <chSchDoReschedule+0x38>)
  thread_t *tp = tqp->next;
 8002f22:	6810      	ldr	r0, [r2, #0]
 8002f24:	6991      	ldr	r1, [r2, #24]
  tqp->next             = tp->queue.next;
 8002f26:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
 8002f28:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002f2a:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002f2c:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 8002f2e:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 8002f30:	f880 4020 	strb.w	r4, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 8002f34:	688c      	ldr	r4, [r1, #8]
  tqp->next             = tp->queue.next;
 8002f36:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002f38:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 8002f3a:	f881 5020 	strb.w	r5, [r1, #32]
  cp = (thread_t *)&ch.rlist.queue;
 8002f3e:	e000      	b.n	8002f42 <chSchDoReschedule+0x22>
 8002f40:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4294      	cmp	r4, r2
 8002f46:	d3fb      	bcc.n	8002f40 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 8002f48:	685a      	ldr	r2, [r3, #4]
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
}
 8002f4a:	bc30      	pop	{r4, r5}
  tp->queue.prev             = cp->queue.prev;
 8002f4c:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 8002f50:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 8002f52:	6059      	str	r1, [r3, #4]
  chSysSwitch(currp, otp);
 8002f54:	f7fd b9c4 	b.w	80002e0 <_port_switch>
 8002f58:	200009ac 	.word	0x200009ac
 8002f5c:	00000000 	.word	0x00000000

08002f60 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f60:	4b58      	ldr	r3, [pc, #352]	; (80030c4 <__early_init+0x164>)
  gpiop->OTYPER  = config->otyper;
 8002f62:	4859      	ldr	r0, [pc, #356]	; (80030c8 <__early_init+0x168>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f64:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8002f66:	4959      	ldr	r1, [pc, #356]	; (80030cc <__early_init+0x16c>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f68:	f042 0287 	orr.w	r2, r2, #135	; 0x87
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8002f6c:	b4f0      	push	{r4, r5, r6, r7}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f6e:	611a      	str	r2, [r3, #16]
 8002f70:	691a      	ldr	r2, [r3, #16]
  gpiop->OTYPER  = config->otyper;
 8002f72:	4d57      	ldr	r5, [pc, #348]	; (80030d0 <__early_init+0x170>)
  gpiop->PUPDR   = config->pupdr;
 8002f74:	4e57      	ldr	r6, [pc, #348]	; (80030d4 <__early_init+0x174>)
  gpiop->OTYPER  = config->otyper;
 8002f76:	4c58      	ldr	r4, [pc, #352]	; (80030d8 <__early_init+0x178>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8002f78:	f022 0287 	bic.w	r2, r2, #135	; 0x87
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	691a      	ldr	r2, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f82:	f042 0287 	orr.w	r2, r2, #135	; 0x87
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f8a:	f042 0287 	orr.w	r2, r2, #135	; 0x87
 8002f8e:	651a      	str	r2, [r3, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 8002f90:	f46f 678a 	mvn.w	r7, #1104	; 0x450
  gpiop->OTYPER  = config->otyper;
 8002f94:	2200      	movs	r2, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8002f96:	f8d3 c050 	ldr.w	ip, [r3, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8002f9a:	606a      	str	r2, [r5, #4]
  gpiop->ODR     = config->odr;
 8002f9c:	f64f 7cdf 	movw	ip, #65503	; 0xffdf
  gpiop->OSPEEDR = config->ospeedr;
 8002fa0:	60af      	str	r7, [r5, #8]
  gpiop->AFRL    = config->afrl;
 8002fa2:	f44f 47ee 	mov.w	r7, #30464	; 0x7700
  gpiop->PUPDR   = config->pupdr;
 8002fa6:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 8002fa8:	f8c5 c014 	str.w	ip, [r5, #20]
  gpiop->AFRH    = config->afrh;
 8002fac:	f44f 262a 	mov.w	r6, #696320	; 0xaa000
  gpiop->AFRL    = config->afrl;
 8002fb0:	622f      	str	r7, [r5, #32]
  gpiop->MODER   = config->moder;
 8002fb2:	4f4a      	ldr	r7, [pc, #296]	; (80030dc <__early_init+0x17c>)
  gpiop->AFRH    = config->afrh;
 8002fb4:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002fb6:	602f      	str	r7, [r5, #0]
  gpiop->OSPEEDR = config->ospeedr;
 8002fb8:	f04f 36ff 	mov.w	r6, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8002fbc:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->OTYPER  = config->otyper;
 8002fc0:	6062      	str	r2, [r4, #4]
  gpiop->ODR     = config->odr;
 8002fc2:	f64f 75ff 	movw	r5, #65535	; 0xffff
  gpiop->OSPEEDR = config->ospeedr;
 8002fc6:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8002fc8:	60e7      	str	r7, [r4, #12]
  gpiop->MODER   = config->moder;
 8002fca:	2780      	movs	r7, #128	; 0x80
  gpiop->ODR     = config->odr;
 8002fcc:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8002fce:	6222      	str	r2, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8002fd0:	6262      	str	r2, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002fd2:	6027      	str	r7, [r4, #0]
  gpiop->PUPDR   = config->pupdr;
 8002fd4:	4f42      	ldr	r7, [pc, #264]	; (80030e0 <__early_init+0x180>)
  gpiop->OTYPER  = config->otyper;
 8002fd6:	6042      	str	r2, [r0, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002fd8:	f5a4 34ca 	sub.w	r4, r4, #103424	; 0x19400
  gpiop->OSPEEDR = config->ospeedr;
 8002fdc:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8002fde:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 8002fe0:	6145      	str	r5, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8002fe2:	6202      	str	r2, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8002fe4:	6242      	str	r2, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002fe6:	6002      	str	r2, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
 8002fe8:	483e      	ldr	r0, [pc, #248]	; (80030e4 <__early_init+0x184>)
  gpiop->OTYPER  = config->otyper;
 8002fea:	604a      	str	r2, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8002fec:	608e      	str	r6, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8002fee:	60c8      	str	r0, [r1, #12]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8002ff0:	4e3d      	ldr	r6, [pc, #244]	; (80030e8 <__early_init+0x188>)
  gpiop->ODR     = config->odr;
 8002ff2:	614d      	str	r5, [r1, #20]
  PWR->CR = STM32_VOS;
 8002ff4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
  gpiop->AFRL    = config->afrl;
 8002ff8:	620a      	str	r2, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8002ffa:	624a      	str	r2, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8002ffc:	600a      	str	r2, [r1, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCAPBEN;
 8002ffe:	641e      	str	r6, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8003000:	6020      	str	r0, [r4, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	0795      	lsls	r5, r2, #30
 800300e:	d5fc      	bpl.n	800300a <__early_init+0xaa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8003010:	6899      	ldr	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003012:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <__early_init+0x164>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8003014:	f021 0103 	bic.w	r1, r1, #3
 8003018:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800301a:	6891      	ldr	r1, [r2, #8]
 800301c:	f011 010c 	ands.w	r1, r1, #12
 8003020:	d1fb      	bne.n	800301a <__early_init+0xba>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003022:	6810      	ldr	r0, [r2, #0]
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003024:	4b27      	ldr	r3, [pc, #156]	; (80030c4 <__early_init+0x164>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8003026:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800302a:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800302c:	6091      	str	r1, [r2, #8]
  RCC->CSR |= RCC_CSR_LSION;
 800302e:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8003030:	f041 0101 	orr.w	r1, r1, #1
 8003034:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003036:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003038:	0794      	lsls	r4, r2, #30
 800303a:	d5fc      	bpl.n	8003036 <__early_init+0xd6>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800303c:	4a2b      	ldr	r2, [pc, #172]	; (80030ec <__early_init+0x18c>)
 800303e:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8003040:	681a      	ldr	r2, [r3, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8003042:	492b      	ldr	r1, [pc, #172]	; (80030f0 <__early_init+0x190>)
  RCC->CR |= RCC_CR_PLLON;
 8003044:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003048:	601a      	str	r2, [r3, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800304a:	684b      	ldr	r3, [r1, #4]
 800304c:	0458      	lsls	r0, r3, #17
 800304e:	d5fc      	bpl.n	800304a <__early_init+0xea>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <__early_init+0x164>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	0192      	lsls	r2, r2, #6
 8003056:	d5fc      	bpl.n	8003052 <__early_init+0xf2>
    ;
#endif /* STM32_ACTIVATE_PLLSAI */

  /* Other clock-related settings (dividers, MCO etc).*/
#if !defined(STM32F413xx)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8003058:	4926      	ldr	r1, [pc, #152]	; (80030f4 <__early_init+0x194>)
 800305a:	6099      	str	r1, [r3, #8]

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <__early_init+0x198>)
    RCC->DCKCFGR = dckcfgr |
 800305e:	2003      	movs	r0, #3
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003060:	2100      	movs	r1, #0
    RCC->DCKCFGR = dckcfgr |
 8003062:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_CK48MSEL;
 8003066:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <__early_init+0x19c>)
 800306e:	429a      	cmp	r2, r3
 8003070:	d01e      	beq.n	80030b0 <__early_init+0x150>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8003072:	4b23      	ldr	r3, [pc, #140]	; (8003100 <__early_init+0x1a0>)
 8003074:	f240 7203 	movw	r2, #1795	; 0x703
 8003078:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 800307a:	4a21      	ldr	r2, [pc, #132]	; (8003100 <__early_init+0x1a0>)
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2b03      	cmp	r3, #3
 8003084:	d1fa      	bne.n	800307c <__early_init+0x11c>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <__early_init+0x164>)
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	f042 0202 	orr.w	r2, r2, #2
 800308e:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	f002 020c 	and.w	r2, r2, #12
 8003096:	2a08      	cmp	r2, #8
 8003098:	d1fa      	bne.n	8003090 <__early_init+0x130>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 800309a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
 80030a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a8:	665a      	str	r2, [r3, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 80030aa:	bcf0      	pop	{r4, r5, r6, r7}
 80030ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ae:	4770      	bx	lr
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <__early_init+0x1a4>)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <__early_init+0x1a8>)
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d1db      	bne.n	8003072 <__early_init+0x112>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <__early_init+0x1a0>)
 80030bc:	f240 1203 	movw	r2, #259	; 0x103
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e7da      	b.n	800307a <__early_init+0x11a>
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40021c00 	.word	0x40021c00
 80030d0:	40020000 	.word	0x40020000
 80030d4:	64155105 	.word	0x64155105
 80030d8:	40020400 	.word	0x40020400
 80030dc:	2a8004a0 	.word	0x2a8004a0
 80030e0:	01555555 	.word	0x01555555
 80030e4:	55555550 	.word	0x55555550
 80030e8:	10000400 	.word	0x10000400
 80030ec:	08003210 	.word	0x08003210
 80030f0:	40007000 	.word	0x40007000
 80030f4:	38881000 	.word	0x38881000
 80030f8:	e0042000 	.word	0xe0042000
 80030fc:	20006411 	.word	0x20006411
 8003100:	40023c00 	.word	0x40023c00
 8003104:	e000ed00 	.word	0xe000ed00
 8003108:	410fc241 	.word	0x410fc241
 800310c:	00000000 	.word	0x00000000

08003110 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8003110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8003114:	4c66      	ldr	r4, [pc, #408]	; (80032b0 <VectorD8+0x1a0>)
 8003116:	6f66      	ldr	r6, [r4, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8003118:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 800311a:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800311c:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 800311e:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8003120:	d47b      	bmi.n	800321a <VectorD8+0x10a>
 8003122:	2320      	movs	r3, #32
 8003124:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003128:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 800312c:	d04d      	beq.n	80031ca <VectorD8+0xba>
  if (queue_notempty(tqp)) {
 800312e:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80032b8 <VectorD8+0x1a8>
  tp->u.rdymsg = msg;
 8003132:	f04f 0900 	mov.w	r9, #0
 8003136:	e008      	b.n	800314a <VectorD8+0x3a>
    if (sr & USART_SR_RXNE)
 8003138:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800313a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800313e:	d41d      	bmi.n	800317c <VectorD8+0x6c>
    sr = u->SR;
 8003140:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003142:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 8003146:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8003148:	d03f      	beq.n	80031ca <VectorD8+0xba>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800314a:	072b      	lsls	r3, r5, #28
 800314c:	d0f4      	beq.n	8003138 <VectorD8+0x28>
    sts |= SD_OVERRUN_ERROR;
 800314e:	f015 0f08 	tst.w	r5, #8
 8003152:	bf0c      	ite	eq
 8003154:	2000      	moveq	r0, #0
 8003156:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 8003158:	07e9      	lsls	r1, r5, #31
    sts |= SD_PARITY_ERROR;
 800315a:	bf48      	it	mi
 800315c:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 8003160:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8003162:	bf48      	it	mi
 8003164:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 8003168:	076b      	lsls	r3, r5, #29
    sts |= SD_NOISE_ERROR;
 800316a:	bf48      	it	mi
 800316c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003170:	f7fd fb4e 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
    if (sr & USART_SR_RXNE)
 8003174:	06ad      	lsls	r5, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8003176:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800317a:	d5e1      	bpl.n	8003140 <VectorD8+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800317c:	6963      	ldr	r3, [r4, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 800317e:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
 8003182:	2b00      	cmp	r3, #0
 8003184:	d03a      	beq.n	80031fc <VectorD8+0xec>
  if (!iqIsFullI(iqp)) {
 8003186:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800318a:	4293      	cmp	r3, r2
 800318c:	d03d      	beq.n	800320a <VectorD8+0xfa>
    iqp->q_counter++;
 800318e:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 8003190:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 8003192:	3201      	adds	r2, #1
 8003194:	ea05 050a 	and.w	r5, r5, sl
 8003198:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800319a:	6221      	str	r1, [r4, #32]
 800319c:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 800319e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d301      	bcc.n	80031aa <VectorD8+0x9a>
      iqp->q_wrptr = iqp->q_buffer;
 80031a6:	69a3      	ldr	r3, [r4, #24]
 80031a8:	6223      	str	r3, [r4, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 80031aa:	68e0      	ldr	r0, [r4, #12]
 80031ac:	4540      	cmp	r0, r8
 80031ae:	d0c7      	beq.n	8003140 <VectorD8+0x30>
  tqp->next             = tp->queue.next;
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	60e3      	str	r3, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 80031b4:	f8c3 8004 	str.w	r8, [r3, #4]
 80031b8:	f8c0 9024 	str.w	r9, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80031bc:	f7fd fb10 	bl	80007e0 <chSchReadyI>
    sr = u->SR;
 80031c0:	6833      	ldr	r3, [r6, #0]
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80031c2:	f013 0f2f 	tst.w	r3, #47	; 0x2f
    sr = u->SR;
 80031c6:	b29d      	uxth	r5, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 80031c8:	d1bf      	bne.n	800314a <VectorD8+0x3a>
 80031ca:	2300      	movs	r3, #0
 80031cc:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 80031d0:	0638      	lsls	r0, r7, #24
 80031d2:	d501      	bpl.n	80031d8 <VectorD8+0xc8>
 80031d4:	0629      	lsls	r1, r5, #24
 80031d6:	d42e      	bmi.n	8003236 <VectorD8+0x126>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 80031d8:	067a      	lsls	r2, r7, #25
 80031da:	d50b      	bpl.n	80031f4 <VectorD8+0xe4>
 80031dc:	066b      	lsls	r3, r5, #25
 80031de:	d509      	bpl.n	80031f4 <VectorD8+0xe4>
 80031e0:	2320      	movs	r3, #32
 80031e2:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 80031e6:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d049      	beq.n	8003282 <VectorD8+0x172>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f383 8811 	msr	BASEPRI, r3
}
 80031f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 80031f8:	f7fd ba4a 	b.w	8000690 <_port_irq_epilogue>
 80031fc:	2004      	movs	r0, #4
 80031fe:	f7fd fb07 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
  if (!iqIsFullI(iqp)) {
 8003202:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8003206:	4293      	cmp	r3, r2
 8003208:	d1c1      	bne.n	800318e <VectorD8+0x7e>
 800320a:	6962      	ldr	r2, [r4, #20]
 800320c:	2a00      	cmp	r2, #0
 800320e:	d0be      	beq.n	800318e <VectorD8+0x7e>
 8003210:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003214:	f7fd fafc 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
 8003218:	e792      	b.n	8003140 <VectorD8+0x30>
 800321a:	2320      	movs	r3, #32
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003224:	f7fd faf4 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
    u->SR = ~USART_SR_LBD;
 8003228:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800322c:	6033      	str	r3, [r6, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	e775      	b.n	8003122 <VectorD8+0x12>
 8003236:	2320      	movs	r3, #32
 8003238:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 800323c:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 8003240:	429a      	cmp	r2, r3
 8003242:	d029      	beq.n	8003298 <VectorD8+0x188>
    oqp->q_counter++;
 8003244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 8003246:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b = *oqp->q_rdptr++;
 8003248:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 800324a:	3201      	adds	r2, #1
 800324c:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800324e:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8003250:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 8003252:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8003256:	d301      	bcc.n	800325c <VectorD8+0x14c>
      oqp->q_rdptr = oqp->q_buffer;
 8003258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800325a:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 800325c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800325e:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <VectorD8+0x1a4>)
 8003260:	4298      	cmp	r0, r3
 8003262:	d006      	beq.n	8003272 <VectorD8+0x162>
  tqp->next             = tp->queue.next;
 8003264:	6802      	ldr	r2, [r0, #0]
 8003266:	6322      	str	r2, [r4, #48]	; 0x30
  tp->u.rdymsg = msg;
 8003268:	2100      	movs	r1, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 800326a:	6053      	str	r3, [r2, #4]
 800326c:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 800326e:	f7fd fab7 	bl	80007e0 <chSchReadyI>
      u->DR = b;
 8003272:	f8c6 8004 	str.w	r8, [r6, #4]
 8003276:	2300      	movs	r3, #0
 8003278:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800327c:	067a      	lsls	r2, r7, #25
 800327e:	d5b9      	bpl.n	80031f4 <VectorD8+0xe4>
 8003280:	e7ac      	b.n	80031dc <VectorD8+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 8003282:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0b2      	beq.n	80031ee <VectorD8+0xde>
 8003288:	2010      	movs	r0, #16
 800328a:	f7fd fac1 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 800328e:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8003292:	401f      	ands	r7, r3
 8003294:	60f7      	str	r7, [r6, #12]
 8003296:	e7aa      	b.n	80031ee <VectorD8+0xde>
  if (!oqIsEmptyI(oqp)) {
 8003298:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800329a:	2a00      	cmp	r2, #0
 800329c:	d0d2      	beq.n	8003244 <VectorD8+0x134>
 800329e:	2008      	movs	r0, #8
 80032a0:	f7fd fab6 	bl	8000810 <chEvtBroadcastFlagsI.constprop.0>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80032a4:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80032a8:	403b      	ands	r3, r7
 80032aa:	60f3      	str	r3, [r6, #12]
 80032ac:	e7e3      	b.n	8003276 <VectorD8+0x166>
 80032ae:	bf00      	nop
 80032b0:	20000800 	.word	0x20000800
 80032b4:	20000830 	.word	0x20000830
 80032b8:	2000080c 	.word	0x2000080c
 80032bc:	00000000 	.word	0x00000000

080032c0 <Vector108>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80032c4:	4c28      	ldr	r4, [pc, #160]	; (8003368 <Vector108+0xa8>)
 80032c6:	6923      	ldr	r3, [r4, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80032c8:	68e2      	ldr	r2, [r4, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 80032ce:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 80032d0:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80032d2:	6122      	str	r2, [r4, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80032d4:	d403      	bmi.n	80032de <Vector108+0x1e>
}
 80032d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80032da:	f7fd b9d9 	b.w	8000690 <_port_irq_epilogue>
 80032de:	2320      	movs	r3, #32
 80032e0:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80032e4:	4d21      	ldr	r5, [pc, #132]	; (800336c <Vector108+0xac>)
  return (systime_t)STM32_ST_TIM->CNT;
 80032e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80032e8:	69eb      	ldr	r3, [r5, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80032ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80032ec:	6899      	ldr	r1, [r3, #8]
  return (sysinterval_t)((systime_t)(end - start));
 80032ee:	1abe      	subs	r6, r7, r2
 80032f0:	42b1      	cmp	r1, r6
 80032f2:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80032f6:	bf98      	it	ls
 80032f8:	f04f 0800 	movls.w	r8, #0
    if (nowdelta < vtp->delta) {
 80032fc:	d820      	bhi.n	8003340 <Vector108+0x80>
 80032fe:	2720      	movs	r7, #32
 8003300:	e000      	b.n	8003304 <Vector108+0x44>
 8003302:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8003304:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 8003306:	440a      	add	r2, r1

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003308:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 800330a:	62aa      	str	r2, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 800330c:	eba6 0601 	sub.w	r6, r6, r1
      fn = vtp->func;
 8003310:	68da      	ldr	r2, [r3, #12]
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8003312:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8003316:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 8003318:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 800331c:	bf08      	it	eq
 800331e:	f8c4 800c 	streq.w	r8, [r4, #12]
 8003322:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8003326:	6918      	ldr	r0, [r3, #16]
 8003328:	4790      	blx	r2
 800332a:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800332e:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 8003330:	6899      	ldr	r1, [r3, #8]
 8003332:	428e      	cmp	r6, r1
 8003334:	d2e5      	bcs.n	8003302 <Vector108+0x42>
  return (systime_t)STM32_ST_TIM->CNT;
 8003336:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8003338:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800333a:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 800333c:	428e      	cmp	r6, r1
 800333e:	d2de      	bcs.n	80032fe <Vector108+0x3e>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8003340:	454b      	cmp	r3, r9
 8003342:	d00a      	beq.n	800335a <Vector108+0x9a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8003344:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.lasttime += nowdelta;
 8003346:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8003348:	1bc9      	subs	r1, r1, r7
 800334a:	440a      	add	r2, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800334c:	4906      	ldr	r1, [pc, #24]	; (8003368 <Vector108+0xa8>)
 800334e:	609a      	str	r2, [r3, #8]
  return systime + (systime_t)interval;
 8003350:	2a02      	cmp	r2, #2
 8003352:	bf2c      	ite	cs
 8003354:	18bf      	addcs	r7, r7, r2
 8003356:	3702      	addcc	r7, #2
 8003358:	634f      	str	r7, [r1, #52]	; 0x34
 800335a:	2300      	movs	r3, #0
 800335c:	f383 8811 	msr	BASEPRI, r3
}
 8003360:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 8003364:	f7fd b994 	b.w	8000690 <_port_irq_epilogue>
 8003368:	40000c00 	.word	0x40000c00
 800336c:	200009ac 	.word	0x200009ac

08003370 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003370:	4b08      	ldr	r3, [pc, #32]	; (8003394 <Vector158+0x24>)
  if (dma.streams[15].func)
 8003372:	4809      	ldr	r0, [pc, #36]	; (8003398 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003374:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 8003376:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003378:	0d89      	lsrs	r1, r1, #22
 800337a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800337e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
 8003380:	058c      	lsls	r4, r1, #22
 8003382:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 8003384:	b112      	cbz	r2, 800338c <Vector158+0x1c>
    dma.streams[15].func(dma.streams[15].param, flags);
 8003386:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800338a:	4790      	blx	r2
}
 800338c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8003390:	f7fd b97e 	b.w	8000690 <_port_irq_epilogue>
 8003394:	40026400 	.word	0x40026400
 8003398:	20000b70 	.word	0x20000b70
 800339c:	00000000 	.word	0x00000000

080033a0 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <Vector154+0x24>)
  if (dma.streams[14].func)
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80033a4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80033a6:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80033a8:	0c09      	lsrs	r1, r1, #16
 80033aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80033ae:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
 80033b0:	040c      	lsls	r4, r1, #16
 80033b2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80033b4:	b10a      	cbz	r2, 80033ba <Vector154+0x1a>
    dma.streams[14].func(dma.streams[14].param, flags);
 80033b6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80033b8:	4790      	blx	r2
}
 80033ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80033be:	f7fd b967 	b.w	8000690 <_port_irq_epilogue>
 80033c2:	bf00      	nop
 80033c4:	40026400 	.word	0x40026400
 80033c8:	20000b70 	.word	0x20000b70
 80033cc:	00000000 	.word	0x00000000

080033d0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <Vector150+0x24>)
  if (dma.streams[13].func)
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80033d4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 80033d6:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 80033d8:	0989      	lsrs	r1, r1, #6
 80033da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80033de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
 80033e0:	018c      	lsls	r4, r1, #6
 80033e2:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 80033e4:	b10a      	cbz	r2, 80033ea <Vector150+0x1a>
    dma.streams[13].func(dma.streams[13].param, flags);
 80033e6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80033e8:	4790      	blx	r2
}
 80033ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80033ee:	f7fd b94f 	b.w	8000690 <_port_irq_epilogue>
 80033f2:	bf00      	nop
 80033f4:	40026400 	.word	0x40026400
 80033f8:	20000b70 	.word	0x20000b70
 80033fc:	00000000 	.word	0x00000000

08003400 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8003400:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003402:	4b07      	ldr	r3, [pc, #28]	; (8003420 <Vector130+0x20>)
  if (dma.streams[12].func)
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003406:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 8003408:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800340a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 800340e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8003410:	b10a      	cbz	r2, 8003416 <Vector130+0x16>
    dma.streams[12].func(dma.streams[12].param, flags);
 8003412:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8003414:	4790      	blx	r2
}
 8003416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800341a:	f7fd b939 	b.w	8000690 <_port_irq_epilogue>
 800341e:	bf00      	nop
 8003420:	40026400 	.word	0x40026400
 8003424:	20000b70 	.word	0x20000b70
	...

08003430 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <Vector12C+0x24>)
  if (dma.streams[11].func)
 8003432:	4809      	ldr	r0, [pc, #36]	; (8003458 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003434:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 8003436:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8003438:	0d89      	lsrs	r1, r1, #22
 800343a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800343e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
 8003440:	058c      	lsls	r4, r1, #22
 8003442:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 8003444:	b10a      	cbz	r2, 800344a <Vector12C+0x1a>
    dma.streams[11].func(dma.streams[11].param, flags);
 8003446:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8003448:	4790      	blx	r2
}
 800344a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800344e:	f7fd b91f 	b.w	8000690 <_port_irq_epilogue>
 8003452:	bf00      	nop
 8003454:	40026400 	.word	0x40026400
 8003458:	20000b70 	.word	0x20000b70
 800345c:	00000000 	.word	0x00000000

08003460 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <Vector128+0x24>)
  if (dma.streams[10].func)
 8003462:	4809      	ldr	r0, [pc, #36]	; (8003488 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003464:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 8003466:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8003468:	0c09      	lsrs	r1, r1, #16
 800346a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800346e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
 8003470:	040c      	lsls	r4, r1, #16
 8003472:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 8003474:	b10a      	cbz	r2, 800347a <Vector128+0x1a>
    dma.streams[10].func(dma.streams[10].param, flags);
 8003476:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003478:	4790      	blx	r2
}
 800347a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800347e:	f7fd b907 	b.w	8000690 <_port_irq_epilogue>
 8003482:	bf00      	nop
 8003484:	40026400 	.word	0x40026400
 8003488:	20000b70 	.word	0x20000b70
 800348c:	00000000 	.word	0x00000000

08003490 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <Vector124+0x24>)
  if (dma.streams[9].func)
 8003492:	4809      	ldr	r0, [pc, #36]	; (80034b8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003494:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 8003496:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003498:	0989      	lsrs	r1, r1, #6
 800349a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800349e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
 80034a0:	018c      	lsls	r4, r1, #6
 80034a2:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 80034a4:	b10a      	cbz	r2, 80034aa <Vector124+0x1a>
    dma.streams[9].func(dma.streams[9].param, flags);
 80034a6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80034a8:	4790      	blx	r2
}
 80034aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80034ae:	f7fd b8ef 	b.w	8000690 <_port_irq_epilogue>
 80034b2:	bf00      	nop
 80034b4:	40026400 	.word	0x40026400
 80034b8:	20000b70 	.word	0x20000b70
 80034bc:	00000000 	.word	0x00000000

080034c0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 80034c0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <Vector120+0x20>)
  if (dma.streams[8].func)
 80034c4:	4807      	ldr	r0, [pc, #28]	; (80034e4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80034c6:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 80034c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 80034ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 80034ce:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 80034d0:	b10a      	cbz	r2, 80034d6 <Vector120+0x16>
    dma.streams[8].func(dma.streams[8].param, flags);
 80034d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80034d4:	4790      	blx	r2
}
 80034d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80034da:	f7fd b8d9 	b.w	8000690 <_port_irq_epilogue>
 80034de:	bf00      	nop
 80034e0:	40026400 	.word	0x40026400
 80034e4:	20000b70 	.word	0x20000b70
	...

080034f0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <VectorFC+0x24>)
  if (dma.streams[7].func)
 80034f2:	4809      	ldr	r0, [pc, #36]	; (8003518 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80034f4:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 80034f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80034f8:	0d89      	lsrs	r1, r1, #22
 80034fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80034fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
 8003500:	058c      	lsls	r4, r1, #22
 8003502:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 8003504:	b10a      	cbz	r2, 800350a <VectorFC+0x1a>
    dma.streams[7].func(dma.streams[7].param, flags);
 8003506:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003508:	4790      	blx	r2
}
 800350a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800350e:	f7fd b8bf 	b.w	8000690 <_port_irq_epilogue>
 8003512:	bf00      	nop
 8003514:	40026000 	.word	0x40026000
 8003518:	20000b70 	.word	0x20000b70
 800351c:	00000000 	.word	0x00000000

08003520 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <Vector84+0x24>)
  if (dma.streams[6].func)
 8003522:	4809      	ldr	r0, [pc, #36]	; (8003548 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003524:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 8003526:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003528:	0c09      	lsrs	r1, r1, #16
 800352a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800352e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
 8003530:	040c      	lsls	r4, r1, #16
 8003532:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 8003534:	b10a      	cbz	r2, 800353a <Vector84+0x1a>
    dma.streams[6].func(dma.streams[6].param, flags);
 8003536:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003538:	4790      	blx	r2
}
 800353a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800353e:	f7fd b8a7 	b.w	8000690 <_port_irq_epilogue>
 8003542:	bf00      	nop
 8003544:	40026000 	.word	0x40026000
 8003548:	20000b70 	.word	0x20000b70
 800354c:	00000000 	.word	0x00000000

08003550 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <Vector80+0x24>)
  if (dma.streams[5].func)
 8003552:	4809      	ldr	r0, [pc, #36]	; (8003578 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003554:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 8003556:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8003558:	0989      	lsrs	r1, r1, #6
 800355a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800355e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
 8003560:	018c      	lsls	r4, r1, #6
 8003562:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 8003564:	b10a      	cbz	r2, 800356a <Vector80+0x1a>
    dma.streams[5].func(dma.streams[5].param, flags);
 8003566:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003568:	4790      	blx	r2
}
 800356a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800356e:	f7fd b88f 	b.w	8000690 <_port_irq_epilogue>
 8003572:	bf00      	nop
 8003574:	40026000 	.word	0x40026000
 8003578:	20000b70 	.word	0x20000b70
 800357c:	00000000 	.word	0x00000000

08003580 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003580:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <Vector7C+0x20>)
  if (dma.streams[4].func)
 8003584:	4807      	ldr	r0, [pc, #28]	; (80035a4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8003586:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 8003588:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800358a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 800358e:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8003590:	b10a      	cbz	r2, 8003596 <Vector7C+0x16>
    dma.streams[4].func(dma.streams[4].param, flags);
 8003592:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003594:	4790      	blx	r2
}
 8003596:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800359a:	f7fd b879 	b.w	8000690 <_port_irq_epilogue>
 800359e:	bf00      	nop
 80035a0:	40026000 	.word	0x40026000
 80035a4:	20000b70 	.word	0x20000b70
	...

080035b0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <Vector78+0x24>)
  if (dma.streams[3].func)
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035b4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 80035b6:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80035b8:	0d89      	lsrs	r1, r1, #22
 80035ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 80035be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
 80035c0:	058c      	lsls	r4, r1, #22
 80035c2:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 80035c4:	b10a      	cbz	r2, 80035ca <Vector78+0x1a>
    dma.streams[3].func(dma.streams[3].param, flags);
 80035c6:	6a00      	ldr	r0, [r0, #32]
 80035c8:	4790      	blx	r2
}
 80035ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80035ce:	f7fd b85f 	b.w	8000690 <_port_irq_epilogue>
 80035d2:	bf00      	nop
 80035d4:	40026000 	.word	0x40026000
 80035d8:	20000b70 	.word	0x20000b70
 80035dc:	00000000 	.word	0x00000000

080035e0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80035e0:	4b08      	ldr	r3, [pc, #32]	; (8003604 <Vector74+0x24>)
  if (dma.streams[2].func)
 80035e2:	4809      	ldr	r0, [pc, #36]	; (8003608 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80035e4:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80035e6:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80035e8:	0c09      	lsrs	r1, r1, #16
 80035ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80035ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
 80035f0:	040c      	lsls	r4, r1, #16
 80035f2:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80035f4:	b10a      	cbz	r2, 80035fa <Vector74+0x1a>
    dma.streams[2].func(dma.streams[2].param, flags);
 80035f6:	6980      	ldr	r0, [r0, #24]
 80035f8:	4790      	blx	r2
}
 80035fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80035fe:	f7fd b847 	b.w	8000690 <_port_irq_epilogue>
 8003602:	bf00      	nop
 8003604:	40026000 	.word	0x40026000
 8003608:	20000b70 	.word	0x20000b70
 800360c:	00000000 	.word	0x00000000

08003610 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <Vector70+0x24>)
  if (dma.streams[1].func)
 8003612:	4809      	ldr	r0, [pc, #36]	; (8003638 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003614:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 8003616:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8003618:	0989      	lsrs	r1, r1, #6
 800361a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800361e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
 8003620:	018c      	lsls	r4, r1, #6
 8003622:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 8003624:	b10a      	cbz	r2, 800362a <Vector70+0x1a>
    dma.streams[1].func(dma.streams[1].param, flags);
 8003626:	6900      	ldr	r0, [r0, #16]
 8003628:	4790      	blx	r2
}
 800362a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800362e:	f7fd b82f 	b.w	8000690 <_port_irq_epilogue>
 8003632:	bf00      	nop
 8003634:	40026000 	.word	0x40026000
 8003638:	20000b70 	.word	0x20000b70
 800363c:	00000000 	.word	0x00000000

08003640 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8003640:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003642:	4b07      	ldr	r3, [pc, #28]	; (8003660 <Vector6C+0x20>)
  if (dma.streams[0].func)
 8003644:	4807      	ldr	r0, [pc, #28]	; (8003664 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8003646:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 8003648:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800364a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 800364e:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8003650:	b10a      	cbz	r2, 8003656 <Vector6C+0x16>
    dma.streams[0].func(dma.streams[0].param, flags);
 8003652:	6880      	ldr	r0, [r0, #8]
 8003654:	4790      	blx	r2
}
 8003656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800365a:	f7fd b819 	b.w	8000690 <_port_irq_epilogue>
 800365e:	bf00      	nop
 8003660:	40026000 	.word	0x40026000
 8003664:	20000b70 	.word	0x20000b70
	...

08003670 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <VectorE0+0xf0>)
OSAL_IRQ_HANDLER(VectorE0) {
 8003672:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8003674:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003676:	681c      	ldr	r4, [r3, #0]
 8003678:	4014      	ands	r4, r2
 800367a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800367e:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
 8003680:	0562      	lsls	r2, r4, #21
 8003682:	d50f      	bpl.n	80036a4 <VectorE0+0x34>
 8003684:	4a37      	ldr	r2, [pc, #220]	; (8003764 <VectorE0+0xf4>)
 8003686:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 800368a:	b113      	cbz	r3, 8003692 <VectorE0+0x22>
 800368c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
 8003690:	4798      	blx	r3
 8003692:	2320      	movs	r3, #32
 8003694:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 8003698:	4833      	ldr	r0, [pc, #204]	; (8003768 <VectorE0+0xf8>)
 800369a:	f7fd f8e9 	bl	8000870 <chThdDequeueAllI.constprop.0>
 800369e:	2300      	movs	r3, #0
 80036a0:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
 80036a4:	0523      	lsls	r3, r4, #20
 80036a6:	d50f      	bpl.n	80036c8 <VectorE0+0x58>
 80036a8:	4a2e      	ldr	r2, [pc, #184]	; (8003764 <VectorE0+0xf4>)
 80036aa:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
 80036ae:	b113      	cbz	r3, 80036b6 <VectorE0+0x46>
 80036b0:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 80036b4:	4798      	blx	r3
 80036b6:	2320      	movs	r3, #32
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	482b      	ldr	r0, [pc, #172]	; (800376c <VectorE0+0xfc>)
 80036be:	f7fd f8d7 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
 80036c8:	04e0      	lsls	r0, r4, #19
 80036ca:	d50f      	bpl.n	80036ec <VectorE0+0x7c>
 80036cc:	4a25      	ldr	r2, [pc, #148]	; (8003764 <VectorE0+0xf4>)
 80036ce:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80036d2:	b113      	cbz	r3, 80036da <VectorE0+0x6a>
 80036d4:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 80036d8:	4798      	blx	r3
 80036da:	2320      	movs	r3, #32
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	4823      	ldr	r0, [pc, #140]	; (8003770 <VectorE0+0x100>)
 80036e2:	f7fd f8c5 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
 80036ec:	04a1      	lsls	r1, r4, #18
 80036ee:	d50f      	bpl.n	8003710 <VectorE0+0xa0>
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <VectorE0+0xf4>)
 80036f2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
 80036f6:	b113      	cbz	r3, 80036fe <VectorE0+0x8e>
 80036f8:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 80036fc:	4798      	blx	r3
 80036fe:	2320      	movs	r3, #32
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	481b      	ldr	r0, [pc, #108]	; (8003774 <VectorE0+0x104>)
 8003706:	f7fd f8b3 	bl	8000870 <chThdDequeueAllI.constprop.0>
 800370a:	2300      	movs	r3, #0
 800370c:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
 8003710:	0462      	lsls	r2, r4, #17
 8003712:	d50f      	bpl.n	8003734 <VectorE0+0xc4>
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <VectorE0+0xf4>)
 8003716:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800371a:	b113      	cbz	r3, 8003722 <VectorE0+0xb2>
 800371c:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8003720:	4798      	blx	r3
 8003722:	2320      	movs	r3, #32
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	4813      	ldr	r0, [pc, #76]	; (8003778 <VectorE0+0x108>)
 800372a:	f7fd f8a1 	bl	8000870 <chThdDequeueAllI.constprop.0>
 800372e:	2300      	movs	r3, #0
 8003730:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
 8003734:	0423      	lsls	r3, r4, #16
 8003736:	d50f      	bpl.n	8003758 <VectorE0+0xe8>
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <VectorE0+0xf4>)
 800373a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
 800373e:	b113      	cbz	r3, 8003746 <VectorE0+0xd6>
 8003740:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
 8003744:	4798      	blx	r3
 8003746:	2320      	movs	r3, #32
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	480b      	ldr	r0, [pc, #44]	; (800377c <VectorE0+0x10c>)
 800374e:	f7fd f88f 	bl	8000870 <chThdDequeueAllI.constprop.0>
 8003752:	2300      	movs	r3, #0
 8003754:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
 8003758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800375c:	f7fc bf98 	b.w	8000690 <_port_irq_epilogue>
 8003760:	40013c00 	.word	0x40013c00
 8003764:	200008ac 	.word	0x200008ac
 8003768:	2000094c 	.word	0x2000094c
 800376c:	2000095c 	.word	0x2000095c
 8003770:	2000096c 	.word	0x2000096c
 8003774:	2000097c 	.word	0x2000097c
 8003778:	2000098c 	.word	0x2000098c
 800377c:	2000099c 	.word	0x2000099c

08003780 <Vector9C>:
  pr = EXTI->PR;
 8003780:	4b2f      	ldr	r3, [pc, #188]	; (8003840 <Vector9C+0xc0>)
OSAL_IRQ_HANDLER(Vector9C) {
 8003782:	b510      	push	{r4, lr}
  pr = EXTI->PR;
 8003784:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	4014      	ands	r4, r2
 800378a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
 800378e:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
 8003790:	06a3      	lsls	r3, r4, #26
 8003792:	d50d      	bpl.n	80037b0 <Vector9C+0x30>
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <Vector9C+0xc4>)
 8003796:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003798:	b10b      	cbz	r3, 800379e <Vector9C+0x1e>
 800379a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800379c:	4798      	blx	r3
 800379e:	2320      	movs	r3, #32
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	4828      	ldr	r0, [pc, #160]	; (8003848 <Vector9C+0xc8>)
 80037a6:	f7fd f863 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80037aa:	2300      	movs	r3, #0
 80037ac:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
 80037b0:	0660      	lsls	r0, r4, #25
 80037b2:	d50d      	bpl.n	80037d0 <Vector9C+0x50>
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <Vector9C+0xc4>)
 80037b6:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80037b8:	b10b      	cbz	r3, 80037be <Vector9C+0x3e>
 80037ba:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80037bc:	4798      	blx	r3
 80037be:	2320      	movs	r3, #32
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	4821      	ldr	r0, [pc, #132]	; (800384c <Vector9C+0xcc>)
 80037c6:	f7fd f853 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
 80037d0:	0621      	lsls	r1, r4, #24
 80037d2:	d50d      	bpl.n	80037f0 <Vector9C+0x70>
 80037d4:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <Vector9C+0xc4>)
 80037d6:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80037d8:	b10b      	cbz	r3, 80037de <Vector9C+0x5e>
 80037da:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 80037dc:	4798      	blx	r3
 80037de:	2320      	movs	r3, #32
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	481a      	ldr	r0, [pc, #104]	; (8003850 <Vector9C+0xd0>)
 80037e6:	f7fd f843 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80037ea:	2300      	movs	r3, #0
 80037ec:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
 80037f0:	05e2      	lsls	r2, r4, #23
 80037f2:	d50f      	bpl.n	8003814 <Vector9C+0x94>
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <Vector9C+0xc4>)
 80037f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037fa:	b113      	cbz	r3, 8003802 <Vector9C+0x82>
 80037fc:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8003800:	4798      	blx	r3
 8003802:	2320      	movs	r3, #32
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	4812      	ldr	r0, [pc, #72]	; (8003854 <Vector9C+0xd4>)
 800380a:	f7fd f831 	bl	8000870 <chThdDequeueAllI.constprop.0>
 800380e:	2300      	movs	r3, #0
 8003810:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
 8003814:	05a3      	lsls	r3, r4, #22
 8003816:	d50f      	bpl.n	8003838 <Vector9C+0xb8>
 8003818:	4a0a      	ldr	r2, [pc, #40]	; (8003844 <Vector9C+0xc4>)
 800381a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800381e:	b113      	cbz	r3, 8003826 <Vector9C+0xa6>
 8003820:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 8003824:	4798      	blx	r3
 8003826:	2320      	movs	r3, #32
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	480a      	ldr	r0, [pc, #40]	; (8003858 <Vector9C+0xd8>)
 800382e:	f7fd f81f 	bl	8000870 <chThdDequeueAllI.constprop.0>
 8003832:	2300      	movs	r3, #0
 8003834:	f383 8811 	msr	BASEPRI, r3
}
 8003838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800383c:	f7fc bf28 	b.w	8000690 <_port_irq_epilogue>
 8003840:	40013c00 	.word	0x40013c00
 8003844:	200008ac 	.word	0x200008ac
 8003848:	200008fc 	.word	0x200008fc
 800384c:	2000090c 	.word	0x2000090c
 8003850:	2000091c 	.word	0x2000091c
 8003854:	2000092c 	.word	0x2000092c
 8003858:	2000093c 	.word	0x2000093c
 800385c:	00000000 	.word	0x00000000

08003860 <Vector68>:
  pr = EXTI->PR;
 8003860:	4a0d      	ldr	r2, [pc, #52]	; (8003898 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
 8003862:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003864:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	400b      	ands	r3, r1
 800386a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800386e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
 8003870:	b16b      	cbz	r3, 800388e <Vector68+0x2e>
 8003872:	4a0a      	ldr	r2, [pc, #40]	; (800389c <Vector68+0x3c>)
 8003874:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003876:	b10b      	cbz	r3, 800387c <Vector68+0x1c>
 8003878:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800387a:	4798      	blx	r3
 800387c:	2320      	movs	r3, #32
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <Vector68+0x40>)
 8003884:	f7fc fff4 	bl	8000870 <chThdDequeueAllI.constprop.0>
 8003888:	2300      	movs	r3, #0
 800388a:	f383 8811 	msr	BASEPRI, r3
}
 800388e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003892:	f7fc befd 	b.w	8000690 <_port_irq_epilogue>
 8003896:	bf00      	nop
 8003898:	40013c00 	.word	0x40013c00
 800389c:	200008ac 	.word	0x200008ac
 80038a0:	200008ec 	.word	0x200008ec
	...

080038b0 <Vector64>:
  pr = EXTI->PR;
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
 80038b2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80038b4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 80038b6:	6813      	ldr	r3, [r2, #0]
 80038b8:	400b      	ands	r3, r1
 80038ba:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 80038be:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
 80038c0:	b16b      	cbz	r3, 80038de <Vector64+0x2e>
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <Vector64+0x3c>)
 80038c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80038c6:	b10b      	cbz	r3, 80038cc <Vector64+0x1c>
 80038c8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 80038ca:	4798      	blx	r3
 80038cc:	2320      	movs	r3, #32
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	4807      	ldr	r0, [pc, #28]	; (80038f0 <Vector64+0x40>)
 80038d4:	f7fc ffcc 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80038d8:	2300      	movs	r3, #0
 80038da:	f383 8811 	msr	BASEPRI, r3
}
 80038de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80038e2:	f7fc bed5 	b.w	8000690 <_port_irq_epilogue>
 80038e6:	bf00      	nop
 80038e8:	40013c00 	.word	0x40013c00
 80038ec:	200008ac 	.word	0x200008ac
 80038f0:	200008dc 	.word	0x200008dc
	...

08003900 <Vector60>:
  pr = EXTI->PR;
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
 8003902:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003904:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003906:	6813      	ldr	r3, [r2, #0]
 8003908:	400b      	ands	r3, r1
 800390a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800390e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
 8003910:	b16b      	cbz	r3, 800392e <Vector60+0x2e>
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <Vector60+0x3c>)
 8003914:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003916:	b10b      	cbz	r3, 800391c <Vector60+0x1c>
 8003918:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800391a:	4798      	blx	r3
 800391c:	2320      	movs	r3, #32
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	4807      	ldr	r0, [pc, #28]	; (8003940 <Vector60+0x40>)
 8003924:	f7fc ffa4 	bl	8000870 <chThdDequeueAllI.constprop.0>
 8003928:	2300      	movs	r3, #0
 800392a:	f383 8811 	msr	BASEPRI, r3
}
 800392e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003932:	f7fc bead 	b.w	8000690 <_port_irq_epilogue>
 8003936:	bf00      	nop
 8003938:	40013c00 	.word	0x40013c00
 800393c:	200008ac 	.word	0x200008ac
 8003940:	200008cc 	.word	0x200008cc
	...

08003950 <Vector5C>:
  pr = EXTI->PR;
 8003950:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
 8003952:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 8003954:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	400b      	ands	r3, r1
 800395a:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 800395e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
 8003960:	b16b      	cbz	r3, 800397e <Vector5C+0x2e>
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <Vector5C+0x3c>)
 8003964:	6993      	ldr	r3, [r2, #24]
 8003966:	b10b      	cbz	r3, 800396c <Vector5C+0x1c>
 8003968:	69d0      	ldr	r0, [r2, #28]
 800396a:	4798      	blx	r3
 800396c:	2320      	movs	r3, #32
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	4807      	ldr	r0, [pc, #28]	; (8003990 <Vector5C+0x40>)
 8003974:	f7fc ff7c 	bl	8000870 <chThdDequeueAllI.constprop.0>
 8003978:	2300      	movs	r3, #0
 800397a:	f383 8811 	msr	BASEPRI, r3
}
 800397e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8003982:	f7fc be85 	b.w	8000690 <_port_irq_epilogue>
 8003986:	bf00      	nop
 8003988:	40013c00 	.word	0x40013c00
 800398c:	200008ac 	.word	0x200008ac
 8003990:	200008bc 	.word	0x200008bc
	...

080039a0 <Vector58>:
  pr = EXTI->PR;
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
 80039a2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
 80039a4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	400b      	ands	r3, r1
 80039aa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80039ae:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
 80039b0:	b16b      	cbz	r3, 80039ce <Vector58+0x2e>
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <Vector58+0x3c>)
 80039b4:	6893      	ldr	r3, [r2, #8]
 80039b6:	b10b      	cbz	r3, 80039bc <Vector58+0x1c>
 80039b8:	68d0      	ldr	r0, [r2, #12]
 80039ba:	4798      	blx	r3
 80039bc:	2320      	movs	r3, #32
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	4806      	ldr	r0, [pc, #24]	; (80039dc <Vector58+0x3c>)
 80039c4:	f7fc ff54 	bl	8000870 <chThdDequeueAllI.constprop.0>
 80039c8:	2300      	movs	r3, #0
 80039ca:	f383 8811 	msr	BASEPRI, r3
}
 80039ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 80039d2:	f7fc be5d 	b.w	8000690 <_port_irq_epilogue>
 80039d6:	bf00      	nop
 80039d8:	40013c00 	.word	0x40013c00
 80039dc:	200008ac 	.word	0x200008ac

080039e0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 80039e0:	b4f0      	push	{r4, r5, r6, r7}
 80039e2:	4f14      	ldr	r7, [pc, #80]	; (8003a34 <__init_ram_areas+0x54>)
 80039e4:	4d14      	ldr	r5, [pc, #80]	; (8003a38 <__init_ram_areas+0x58>)
 80039e6:	4815      	ldr	r0, [pc, #84]	; (8003a3c <__init_ram_areas+0x5c>)
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <__init_ram_areas+0x60>)
 80039ea:	4916      	ldr	r1, [pc, #88]	; (8003a44 <__init_ram_areas+0x64>)
 80039ec:	f107 0c70 	add.w	ip, r7, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 80039f0:	2600      	movs	r6, #0
    while (p < rap->clear_area) {
 80039f2:	4298      	cmp	r0, r3
 80039f4:	d911      	bls.n	8003a1a <__init_ram_areas+0x3a>
 80039f6:	3904      	subs	r1, #4
 80039f8:	461a      	mov	r2, r3
      *p = *tp;
 80039fa:	f851 4f04 	ldr.w	r4, [r1, #4]!
 80039fe:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8003a02:	4290      	cmp	r0, r2
 8003a04:	d8f9      	bhi.n	80039fa <__init_ram_areas+0x1a>
 8003a06:	1e42      	subs	r2, r0, #1
 8003a08:	1ad2      	subs	r2, r2, r3
 8003a0a:	f022 0203 	bic.w	r2, r2, #3
 8003a0e:	3204      	adds	r2, #4
 8003a10:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8003a12:	429d      	cmp	r5, r3
 8003a14:	d903      	bls.n	8003a1e <__init_ram_areas+0x3e>
      *p = 0;
 8003a16:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8003a1a:	429d      	cmp	r5, r3
 8003a1c:	d8fb      	bhi.n	8003a16 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8003a1e:	4567      	cmp	r7, ip
 8003a20:	d005      	beq.n	8003a2e <__init_ram_areas+0x4e>
 8003a22:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8003a26:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	e7e1      	b.n	80039f2 <__init_ram_areas+0x12>
#endif
}
 8003a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	08003edc 	.word	0x08003edc
 8003a38:	20000d50 	.word	0x20000d50
 8003a3c:	20000d50 	.word	0x20000d50
 8003a40:	20000d50 	.word	0x20000d50
 8003a44:	08003f98 	.word	0x08003f98
	...

08003a50 <__default_exit>:
  while (true) {
 8003a50:	e7fe      	b.n	8003a50 <__default_exit>
 8003a52:	bf00      	nop
	...

08003a60 <__late_init>:
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
	...

08003a70 <__core_init>:
}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <memset>:
 8003a74:	b4f0      	push	{r4, r5, r6, r7}
 8003a76:	0786      	lsls	r6, r0, #30
 8003a78:	d046      	beq.n	8003b08 <memset+0x94>
 8003a7a:	1e54      	subs	r4, r2, #1
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d03c      	beq.n	8003afa <memset+0x86>
 8003a80:	b2ca      	uxtb	r2, r1
 8003a82:	4603      	mov	r3, r0
 8003a84:	e001      	b.n	8003a8a <memset+0x16>
 8003a86:	3c01      	subs	r4, #1
 8003a88:	d337      	bcc.n	8003afa <memset+0x86>
 8003a8a:	f803 2b01 	strb.w	r2, [r3], #1
 8003a8e:	079d      	lsls	r5, r3, #30
 8003a90:	d1f9      	bne.n	8003a86 <memset+0x12>
 8003a92:	2c03      	cmp	r4, #3
 8003a94:	d92a      	bls.n	8003aec <memset+0x78>
 8003a96:	b2cd      	uxtb	r5, r1
 8003a98:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003a9c:	2c0f      	cmp	r4, #15
 8003a9e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003aa2:	d934      	bls.n	8003b0e <memset+0x9a>
 8003aa4:	f1a4 0210 	sub.w	r2, r4, #16
 8003aa8:	f022 0c0f 	bic.w	ip, r2, #15
 8003aac:	f103 0720 	add.w	r7, r3, #32
 8003ab0:	0916      	lsrs	r6, r2, #4
 8003ab2:	4467      	add	r7, ip
 8003ab4:	f103 0210 	add.w	r2, r3, #16
 8003ab8:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003abc:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003ac0:	3210      	adds	r2, #16
 8003ac2:	42ba      	cmp	r2, r7
 8003ac4:	d1f8      	bne.n	8003ab8 <memset+0x44>
 8003ac6:	1c72      	adds	r2, r6, #1
 8003ac8:	f014 0f0c 	tst.w	r4, #12
 8003acc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003ad0:	f004 060f 	and.w	r6, r4, #15
 8003ad4:	d013      	beq.n	8003afe <memset+0x8a>
 8003ad6:	1f33      	subs	r3, r6, #4
 8003ad8:	f023 0303 	bic.w	r3, r3, #3
 8003adc:	3304      	adds	r3, #4
 8003ade:	4413      	add	r3, r2
 8003ae0:	f842 5b04 	str.w	r5, [r2], #4
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d1fb      	bne.n	8003ae0 <memset+0x6c>
 8003ae8:	f006 0403 	and.w	r4, r6, #3
 8003aec:	b12c      	cbz	r4, 8003afa <memset+0x86>
 8003aee:	b2ca      	uxtb	r2, r1
 8003af0:	441c      	add	r4, r3
 8003af2:	f803 2b01 	strb.w	r2, [r3], #1
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d1fb      	bne.n	8003af2 <memset+0x7e>
 8003afa:	bcf0      	pop	{r4, r5, r6, r7}
 8003afc:	4770      	bx	lr
 8003afe:	4634      	mov	r4, r6
 8003b00:	4613      	mov	r3, r2
 8003b02:	2c00      	cmp	r4, #0
 8003b04:	d1f3      	bne.n	8003aee <memset+0x7a>
 8003b06:	e7f8      	b.n	8003afa <memset+0x86>
 8003b08:	4614      	mov	r4, r2
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	e7c1      	b.n	8003a92 <memset+0x1e>
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4626      	mov	r6, r4
 8003b12:	e7e0      	b.n	8003ad6 <memset+0x62>
